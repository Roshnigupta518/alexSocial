diff --git a/node_modules/react-native-snap-carousel/.eslintrc b/node_modules/react-native-snap-carousel/.eslintrc
index 870084c..d4739ac 100644
--- a/node_modules/react-native-snap-carousel/.eslintrc
+++ b/node_modules/react-native-snap-carousel/.eslintrc
@@ -4,21 +4,35 @@
         "standard",
         "standard-react"
      ],
+     "plugins": [
+         "react"
+     ],
     "env" : {
-        "browser" : true
+        "browser" : true,
+        "es6": true
     },
     "globals": {
         "__DEV__": false
     },
+    "parserOptions": {
+        "ecmaVersion": 6,
+        "ecmaFeatures": {
+            "jsx": true
+        }
+    },
     "rules": {
-        "indent": [2, 4],
         "generator-star-spacing": 0,
-        "react/jsx-indent": [0, 4],
-        "jsx-indent-props": [0, 4],
-        "react/jsx-curly-spacing": [0, "never"],
-        "react/jsx-boolean-value": [0, "never"],
-        "semi" : [2, "always"],
+        "indent": [2, 4, { "ignoredNodes": ["JSXAttribute", "JSXSpreadAttribute"], "SwitchCase": 1 }],
+        "no-warning-comments": [1, {
+            "terms": ["todo", "fixme", "xxx"],
+            "location": "start"
+        }],
         "operator-linebreak": [2, "after"],
-        "no-warning-comments": [1, { "terms": ["todo", "fixme", "xxx"], "location": "start" }]
+        "padded-blocks": 0,
+        "semi": [2, "always"],
+        "react/jsx-indent-props": [2, 2],
+        "react/jsx-boolean-value": [0, "never"],
+        "react/jsx-curly-spacing": [0, "never"],
+        "react/jsx-indent": [2, 4]
     }
 }
diff --git a/node_modules/react-native-snap-carousel/.npmignore b/node_modules/react-native-snap-carousel/.npmignore
deleted file mode 100644
index 96236f8..0000000
--- a/node_modules/react-native-snap-carousel/.npmignore
+++ /dev/null
@@ -1 +0,0 @@
-example
\ No newline at end of file
diff --git a/node_modules/react-native-snap-carousel/CHANGELOG.md b/node_modules/react-native-snap-carousel/CHANGELOG.md
index 3116093..2cc795f 100644
--- a/node_modules/react-native-snap-carousel/CHANGELOG.md
+++ b/node_modules/react-native-snap-carousel/CHANGELOG.md
@@ -1,19 +1,257 @@
+## v3.9.1
+
+* Fix for `getNode()` deprecation warning with RN `0.62+` (thanks [@r0b0t3d](https://github.com/r0b0t3d))
+
+## v3.9.0
+
+* Fix for incorrect snapToItem (thanks [@Romick2005](https://github.com/Romick2005) & [@sergeyzhukov](https://github.com/sergeyzhukov))
+* Fix issue with tappable pagination dots (thanks [@Creskendoll](https://github.com/Creskendoll))
+* Clear all timeouts when stopping autoplay (thanks [@adrianocola](https://github.com/adrianocola))
+* Add props `animatedDuration`, `animatedFriction`, `animatedTension` and `delayPressInDot` to the `Pagination` component (thanks [@muhlenbrock](https://github.com/muhlenbrock))
+
+## v3.8.4
+
+* Remove TypeScript definitions since they were causing issues (thanks [@radko93](https://github.com/radko93))
+  * If you're using Typescript you should install the type definitions this way: `npm install --save @types/react-native-snap-carousel`
+
+## v3.8.3
+
+* Seems like it's time to remove the `getItemLayout` & `initialScrollIndex` override to properly display the first item when its index is a huge number (thanks [@rontalx](https://github.com/rontalx))
+  * :warning: Make sure to read how these props work together ([link#1](https://facebook.github.io/react-native/docs/flatlist#getitemlayout) & [link #2](https://facebook.github.io/react-native/docs/flatlist#initialscrollindex)), and to understand [why they were disabled in the first place](https://github.com/facebook/react-native/issues/15734#issuecomment-330616697)!
+* Fix `snapToItem` not working when `enableMomentum` is set to `true` on Android (thanks [@daaashleywch](https://github.com/daaashleywch))
+* Add basic TypeScript support (thanks [@facuacostag](https://github.com/facuacostag))
+* Stack layout's peaking items will remain opaque if `inactiveSlideOpacity` is set to `1`
+
+
+## v3.8.2
+
+* Fix autoplay stop after user interaction (thanks [@HelloCore](https://github.com/HelloCore))
+* Allow using a custom animated image component with `ParallaxImage` (thanks [@DanielMarkiel](https://github.com/DanielMarkiel))
+
+## v3.8.1
+
+* Migrate from deprecated `componentWillReceiveProps` to `componentDidUpdate` (thanks [@kiarashws](https://github.com/kiarashws))
+* Use `console.error` instead of `console.warn` for critical warnings (thanks [@bardiarastin](https://github.com/bardiarastin))
+* Update parallax doc (thanks [@bardiarastin](https://github.com/bardiarastin))
+
+## v3.8.0
+
+* Set [`removeClippedSubviews`](https://facebook.github.io/react-native/docs/scrollview#removeclippedsubviews) to `false` by default for 'tinder' and 'stack' layouts, or when `useScrollView` is set to `true`. This aims at preventing a bunch of rendering issues.
+* Make sure that autoplay is properly restarted after a `touchStart` event
+* Allow serialized animated event as `onScroll`. See [#439](https://github.com/archriss/react-native-snap-carousel/pull/439) for more info (thanks [@Jberivera](https://github.com/Jberivera))
+* Allow using a custom scroll component. See [#498](https://github.com/archriss/react-native-snap-carousel/pull/498) for more info (thanks [@martinezguillaume](https://github.com/martinezguillaume))
+* Prevent loop animation from being played when reaching the end of the dataset. See [#443](https://github.com/archriss/react-native-snap-carousel/pull/443) for more info (thanks [@suhanmoon](https://github.com/suhanmoon))
+* Fire the `onTouchStart` prop. See [#464](https://github.com/archriss/react-native-snap-carousel/pull/464) for more info (thanks [@sangle7](https://github.com/sangle7))
+* Add accessibilityLabel to `Pagination`. See [#438](https://github.com/archriss/react-native-snap-carousel/pull/438) for more info (thanks [@thymikee](https://github.com/thymikee))
+* Allow `contentContainerCustomStyle` to override default paddings. See [#482](https://github.com/archriss/react-native-snap-carousel/pull/482) for more info (thanks [@yamov](https://github.com/yamov))
+
+## v3.7.5
+* Fix issue with `scrollEnabled` introduced in version `3.7.3`... again! (thanks [@ifsnow](https://github.com/ifsnow))
+
+## v3.7.4
+* Fix issue with `scrollEnabled` introduced in version `3.7.3` (thanks [@JakeRawr](https://github.com/JakeRawr))
+
+## v3.7.3
+* Fix faulty animated value and make sure to always check for `data` before checking for `data.length`
+* Fix `scrollEnabled` override when it was initially set to `false` (thanks [@JakeRawr](https://github.com/JakeRawr))
+
+## v3.7.2
+* Fix `ParallaxImage` not being rendered (thanks [@louiszawadzki](https://github.com/louiszawadzki))
+
+## v3.7.1
+* Fix a potential crash in release mode (thanks [@hanpanpan200](https://github.com/hanpanpan200))
+* Do not round scroll offset's number in order to prevent potential issues with scroll repositioning
+
+## v3.7.0
+### New features and enhancements
+* Add a new callback method: [`onBeforeSnapToItem()`](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/PROPS_METHODS_AND_GETTERS.md#methods)
+* Add prop `lockScrollTimeoutDuration`
+* Add the ability to enable/disable callback's execution when snaping programmatically
+* Add the ability to change `scrollEnabled` to `true` from initially `false` (thanks [@tomauty](https://github.com/tomauty))
+### Bugfixes
+* Fix random errors when accessing wrapped component's reference
+* Fix errors triggered when calling `setState()` while the component has already been unmounted
+### Other
+* Support `keyExtractor` on `ScrollView` (thanks [@hadimhd](https://github.com/hadimhd))
+
+## v3.6.0
+* Add a `layout` prop to let users choose between 3 different carousel layouts (see [the documentation](https://github.com/archriss/react-native-snap-carousel#layouts-and-custom-interpolations))
+![react-native-snap-carousel default layout](https://i.imgur.com/e1WbZcu.gif)
+![react-native-snap-carousel stack layout](https://i.imgur.com/foMIGM2.gif)
+![react-native-snap-carousel tinder layout](https://i.imgur.com/R7OpEFs.gif)
+* Add the ability to define dynamic styles based on scroll position with props `scrollInterpolator` and `slideInterpolatedStyle`. This allows implementing custom animations and layouts (see [the dedicated documentation](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/CUSTOM_INTERPOLATIONS.md)).
+* Rename props `customAnimationType` and `customAnimationOptions` to `activeAnimationType` and `activeAnimationOptions`
+
+## v3.5.0
+* Add the ability to render either a `ScrollView` component or a `FlatList` one (default) ([see prop `useScrollView`](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/PROPS_METHODS_AND_GETTERS.md#behavior))
+* Add support for versions of React Native < `0.43` (see [this note](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/KNOWN_ISSUES.md#react-native-version))
+* Add support for custom animations ([see props `customAnimationType` and `customAnimationOptions`](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/PROPS_METHODS_AND_GETTERS.md#style-and-animation))
+* Add method [`triggerRenderingHack()`](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/PROPS_METHODS_AND_GETTERS.md#available-methods) to work around [a random `FlatList` bug](https://github.com/facebook/react-native/issues/1831) that keeps content hidden until the carousel is scrolled
+* Hack around `ScrollView`/`FlatList` image rendering issues on Android
+* Fix issue with tappable dots when loop is enabled
+
+## v3.4.0
+* Fix `snapToItem` call that results in snapping to the wrong item when `loop` is enabled
+* Fix issue that, in some use cases, prevents every items but the initial ones to be rendered
+* On Android, prevent loop and callback issues because scroll offset's value doesn't return an integer
+* Add prop `inactiveSlideShift` (see #204)
+* Expose `FlatList`'s prop `inverted` (**use at your own risk since it will mess with the current handling of RTL layouts**)
+* Set `removeClippedSubviews` to `true` by default
+
+## v3.3.4
+* Fix issue with possible faulty index when `loopClonesPerSide` is greater than data length
+* Guard against `setNativeProps()` being `undefined`
+* On Android, make sure that the first item has the proper active style after init
+* On iOS, remove the feature "snap as soon as the previous/next item becomes active when `lockScrollWhileSnapping` is enabled" since it messes with direct calls to `snapToItem()`
+
+## v3.3.3
+* Prevent issue on iOS when `enableSnap` is set to `false` while `lockScrollWhileSnapping` is set to `true`
+
+## v3.3.2
+* Fix issue with `lockScrollWhileSnapping` when no callback was provided
+* `Pagination` component: add props `activeOpacity` and `dotContainerStyle`
+
+## v3.3.1
+* Fix issue when initializing the carousel with empty data
+* Make tappable `PaginationDot` snaps to the right item when loop is enabled
+
+## v3.3.0
+* Bring in the most wanted 'infinite loop' feature :tada: (see [the 'Loop' section](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/PROPS_METHODS_AND_GETTERS.md#loop) for more info about the new props `loop` and `loopClonesPerSide`)
+* Improve Android behavior when momentum is disabled
+* Guard against potential errors when component is unmounted
+* Add prop `lockScrollWhileSnapping` to improve behavior when momentum is disabled
+
+## v3.2.3
+* Fix issue with callback not fired when doing a long swipe
+
+## v3.2.2
+* Fix RTL issues
+* Fix issue with active item when `enableMomentum` was set to `true`
+* Fix issue with overlapping items (thanks [@henninghall](https://github.com/henninghall))
+* `ParallaxImage` component: allow overriding default styles
+* `Pagination` component: adapt to RTL layouts
+
+## v3.2.1
+* Fix issue with active item when no callback has been specified (introduced in version `3.2.0`)
+
+## v3.2.0
+* Refactor callback handling. **Make sure to use the new prop `callbackOffsetMargin` if you experience missed callbacks.**
+* Make item's scale and opacity animations follow scroll value (thanks [@hammadj](https://github.com/hammadj))
+* `Pagination` component: make dots tappable with new props `tappableDots` and `carouselRef` (see the [example](https://github.com/archriss/react-native-snap-carousel/blob/master/example/src/index.js))
+* Fix issue when carousel has been unmounted but parent container requires to re-render
+* Fix state and scroll issues when the currently active item is being dynamically removed
+* Improve snap feeling when momentum is disabled (default)
+* Add prop `callbackOffsetMargin`
+* Remove props `animationFunc`, `animationOptions`, `scrollEndDragDebounceValue`, `snapOnAndroid`, and `useNativeOnScroll`
+
+## v3.1.0
+* `Pagination` component: add new props for advanced customization
+
+## v3.0.0
+### WARNING
+* **Do not use this version as some temporary code was pushed to `npm` by mistake. Make sure to use version `3.1.0` instead.**
+### Breaking changes
+* Plugin is now built on top of `FlatList`, which allows for huge performance optimizations. From now on, items must be rendered using props `data` and `renderItem`.
+### General
+* Add `ParallaxImage` component (see the specific documentation [here](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/PARALLAX_IMAGE.md))
+* Add prop `activeSlideAlignment`
+* Fix issue with autoplay when setting `scrollEnabled` to `false`
+* Prevent going back to the first item when overscrolling the last one
+* Prevent callback from being called at the wrong time in some specific scenarios
+
+## v2.4.0
+* Add `Pagination` component (see the specific documentation [here](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/PAGINATION.md))
+* Allow `firstItem` to be changed dynamically
+* Allow `0` value for `carouselHorizontalPadding` and `carouselVerticalPadding` (thanks [@bonbonez](https://github.com/bonbonez))
+* Keep the easing of slide's opacity animation linear
+* Use native driver for slide's animation (can be overridden via `animationOptions`)
+
+## v2.3.1
+* Fix issue when snap is disabled
+
+## v2.3.0
+* Refactor callback handling to provide a more reliable solution when momentum is disabled
+* Fix issue with parallel animations (thanks [@jnbt](https://github.com/jnbt))
+* Prevent calls to `undefined` interpolators when working with dynamic slides (thanks [@cskaynar](https://github.com/cskaynar))
+* Improve vertical mode
+* Add prop `scrollEndDragDebounceValue`
+* Expose current scroll position with `this.currentScrollPosition`
+* Remove props `scrollEndDragThrottleValue` and `snapCallbackDebounceValue` (use `scrollEndDragDebounceValue` instead)
+
+## v2.2.2
+* Fix issue that prevented inactive styles of first and last items to be applied when using `snapToPrev` and `snapToNext` methods
+
+## v2.2.1
+* Do not mark `sliderWidth` and `sliderHeight` as required
+* Add warnings when properties specific to carousel's orientation haven't been set
+
+## v2.2.0
+* Implement vertical mode (prop `vertical`)
+* Make sure that current active item is properly updated when snapping
+* Prevent issues when 'sliderWidth' is smaller than viewport's width
+* Recalculate card positions on layout to handle rotation (thanks [@andrewpope](https://github.com/andrewpope)); make sure to read [this note](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/TIPS_AND_TRICKS.md#handling-device-rotation)
+* Refresh card positions if slider and/or item's dimensions are updated (thanks [@hoangnm](https://github.com/hoangnm))
+* Add props `scrollEndDragThrottleValue` and `snapCallbackDebounceValue`
+* Expose `View`'s `onLayout` prop
+* Deprecate prop `onScrollViewScroll`
+
+## v2.1.4
+* Add prop `onScrollViewScroll`
+
+## v2.1.3
+* Default value for `showsHorizontalScrollIndicator` is now `false`
+* Expose `ScrollView`'s `onSscroll` prop (thanks [@radko93](https://github.com/radko93))
+
+## v2.1.2
+* Do not trigger `onSnapToItem` when snapping back to the same slide (thanks [@rgabs](https://github.com/rgabs))
+* Add prop `carouselHorizontalPadding` to override container's inner padding (thanks [@skeie](https://github.com/skeie))
+
+## v2.1.1
+* Ensure compatibility with RN 0.43 (previous version of plugin's dependency `react-addons-shallow-compare` was breaking with React 16)
+* Fix issue with padding on iOS that could cause the carousel to snap back when its last item was clicked
+
+## v2.1.0
+* Add RTL support
+* Keep current active item when adding slides dynamically
+* Prevent invalid `firstItem` number
+* Add prop `activeSlideOffset`
+
+## v2.0.3
+
+* Prevent error when carousel has only one child (thanks [@kevinvandijk](https://github.com/kevinvandijk))
+* Fix issue when appending dynamic slides (the first one was ignored)
+* Fix edge case that prevented the first slide from being focused when swiping back with momentum enabled
+* Bump example's RN version to 0.42.3
+
+## v2.0.2
+
+* Make sure that scroll indicator is hidden by default
+
+## v2.0.1
+
+* Fix un-handled exception with interpolators (thanks [@chitezh](https://github.com/chitezh))
+
+## v2.0.0
+
+* Items are now direct children of the `<Carousel />` component, which makes it easier to use (thanks [@Jonarod](https://github.com/Jonarod))
+* Props `items` and `renderItem` have been removed
+
 ## v1.6.1
 
-* Due to some touch events being buggy, rework methods so the children will receive touch events on Android.
+* Due to some touch events being buggy, rework methods so the children will receive touch events on Android
 
 ## v1.6.0
 
-* Add `enableMomentum` prop
+* Add prop `enableMomentum`
 * Fix an infinite-loop on iOS with momentum enabled
 * Fix the snapping effect when releasing touch without interia on iOS with momentum enabled
 * Fix autoplay on Android, it should start and stop properly and stop being triggered while swiping
-* Use `View.propTypes.style` instead of `PropTypes.number` in styles validation (thanks [@pesakitan22](https://github.com/pesakitan22) !)
+* Use `View.propTypes.style` instead of `PropTypes.number` in styles validation (thanks [@pesakitan22](https://github.com/pesakitan22))
 
 ## v1.5.0
 
-* Items length can now be changed on-the-fly (thanks [@superical](https://github.com/superical) !)
-* Now handling momentum (thanks [@FakeYou](https://github.com/FakeYou) !)
+* Items length can now be changed on-the-fly (thanks [@superical](https://github.com/superical))
+* Now handling momentum (thanks [@FakeYou](https://github.com/FakeYou))
 
 ## v1.4.0
 
@@ -26,7 +264,7 @@
 
 ## v1.3.0
 
-* Pass the item data as the 2nd param of onSnapToItem callback
+* Pass the item data as the 2nd param of `onSnapToItem` callback
 
 ## v1.2.1
 
@@ -34,10 +272,10 @@
 
 ## v1.2.0
 
-* Add onSnapToItem prop
+* Add prop `onSnapToItem`
 
 ## v1.1.0
 
 * Center slides properly
 * Handle one slide only
-* Add props 'inactiveSlideScale', 'inactiveSlideOpacity', 'containerCustomStyle' and 'contentContainerCustomStyle'
\ No newline at end of file
+* Add props `inactiveSlideScale`, `inactiveSlideOpacity`, `containerCustomStyle` and `contentContainerCustomStyle`
\ No newline at end of file
diff --git a/node_modules/react-native-snap-carousel/CONTRIBUTING.md b/node_modules/react-native-snap-carousel/CONTRIBUTING.md
new file mode 100644
index 0000000..cb1f35e
--- /dev/null
+++ b/node_modules/react-native-snap-carousel/CONTRIBUTING.md
@@ -0,0 +1,12 @@
+:warning: **From now on, users that don't adhere to the following guidelines when submitting an issue will see it closed without warning.**
+
+> This project is the result of countless hours of work and is maintained for free on our spare time. Show some love and respect by making it easier for us to help you!
+
+If you would like to report a problem, take a look around and see if someone already opened an issue about it. If you are certain this is a new, unreported bug, you can submit a bug report by [opening a new issue](https://github.com/archriss/react-native-snap-carousel/issues/new).
+
+:warning: When doing so, you need to fill out [the issue template](https://raw.githubusercontent.com/archriss/react-native-snap-carousel/master/ISSUE_TEMPLATE.md) completely. **This step is mandatory!** Not doing so will result in your issue getting closed. Don't take this personally if this happens, and feel free to open a new issue once you've gathered all the information required by the template.
+
+* **One issue, one bug:** Please report a single bug per issue.
+* **Provide a [Snack example]((https://snack.expo.io/)):** To demonstrate the issue, you need to provide a reduced test case using [Snack](https://snack.expo.io/) and follow [the guidelines for providing a Minimal, Complete, and Verifiable example](https://stackoverflow.com/help/mcve). More often than not, providing a screencast will also be of tremendous help to understand the matter at stake (a screenshot might sometimes be enough).
+* **Provide reproduction steps:** List all the steps necessary to reproduce the issue. Provide a Snack, share the relevant source code or upload a sample project to GitHub. We should be able to follow these steps to reproduce your issue with minimal effort.
+* **Try out the latest version:** Verify that the issue can be reproduced locally by updating your project to use [the latest commit from `master`](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/TIPS_AND_TRICKS.md#using-a-specific-commit). The bug may have already been fixed! Also make sure to test the latest stable release of React Native as your issue could be linked to RN's core.
\ No newline at end of file
diff --git a/node_modules/react-native-snap-carousel/ISSUE_TEMPLATE.md b/node_modules/react-native-snap-carousel/ISSUE_TEMPLATE.md
new file mode 100644
index 0000000..0629ddc
--- /dev/null
+++ b/node_modules/react-native-snap-carousel/ISSUE_TEMPLATE.md
@@ -0,0 +1,129 @@
+<!--
+  MAKE SURE TO READ AND FOLLOW THIS TEMPLATE CLOSELY OR YOUR ISSUE WILL BE CLOSED WITHOUT NOTICE
+-->
+
+### Is this a bug report, a feature request, or a question?
+
+(Write your answer here.)
+
+<!--
+  If you answered "Bug report":
+
+    We expect you to produce a high-quality bug report since putting care into your report helps us fix the issue faster.
+    For bug reports, it is REQUIRED to fill the rest of this template, or the issue will be closed.
+
+  If you answered "Feature request" or "Question":
+
+    Make sure to describe as precisely as possible the feature you'd like to see implemented or the question you'd like to see answered.
+    When relevant, provide visual examples (screenshots, screencasts, diagrams...).
+    You can ignore the next steps as long as you've made sure that your description is as clear, thorough and illustrated as possible.
+-->
+
+### Have you followed the required steps before opening a bug report?
+
+(Check the step you've followed - put an `x` character between the square brackets (`[]`).)
+
+- [] I have read [the guidelines regarding bug report](https://github.com/archriss/react-native-snap-carousel/blob/master/CONTRIBUTING.md).
+- [] I have reviewed [the documentation](https://github.com/archriss/react-native-snap-carousel/blob/master/README.md) in its entirety, including the dedicated documentations :books:.
+- [] I have searched for [existing issues](https://github.com/archriss/react-native-snap-carousel/issues) and made sure that the problem hasn't already been reported.
+- [] I am using [the latest plugin version](https://github.com/archriss/react-native-snap-carousel/releases).
+- [] I am following [the issue template](https://raw.githubusercontent.com/archriss/react-native-snap-carousel/master/ISSUE_TEMPLATE.md) closely in order to produce a useful bug report.
+
+<!--
+  Please DO NOT go futher if you've not followed ALL of the above steps.
+  Failing to do so will result in your issue getting closed without warning.
+-->
+
+### Have you made sure that it wasn't a [React Native bug](https://github.com/archriss/react-native-snap-carousel/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3A%22react-native+bug%22+)?
+
+(Write your answer here.)
+
+<!--
+  Steps you should take:
+
+    1. Take a look at plugin's issues that are [labelled `react-native bug`](https://github.com/archriss/react-native-snap-carousel/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3A%22react-native+bug%22+)
+
+    2. Search [React Native issues](https://github.com/facebook/react-native/issues)
+
+    3. Read the following sections of the doc again: ["Known issues"](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/KNOWN_ISSUES.md), ["Important note regarding Android"](https://github.com/archriss/react-native-snap-carousel#important-note-regarding-android), and ["Custom interpolations caveats"](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/CUSTOM_INTERPOLATIONS.md#caveats).
+ -->
+
+### Is the bug specific to iOS or Android? Or can it be reproduced on both platforms?
+
+(Write your answer here and specify the iOS/Android versions on which you've been able to reproduce the issue.)
+
+### Is the bug reproductible in a production environment (not a debug one)?
+
+(Write your answer here.)
+
+<!--
+  If you haven't been able to reproduce the bug in production mode, it probably has to do with React Native's limitations (see ["Known issues"](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/KNOWN_ISSUES.md)). Chances are we won't be able to do anything about it.
+-->
+
+### Environment
+
+<!--
+  Provide information about your current environment. At the very least, it should include the following:
+
+  Environment:
+    React: 16.0.0-beta.5
+    React native: 0.49.2
+    react-native-snap-carousel: 3.3.4
+
+  Target Platform:
+    Android (6.0)
+    iOS (10.3)
+-->
+
+(Write your answer here.)
+
+### Expected Behavior
+
+<!--
+  How did you expect your project to behave?
+  It’s fine if you’re not sure your understanding is correct.
+  Just write down what you thought would happen.
+-->
+
+(Write what you thought would happen.)
+
+### Actual Behavior
+
+<!--
+  Did something go wrong?
+  Is something broken, or not behaving as you expected?
+  Describe this section in detail, and attach screencasts (or screenshots) if possible.
+  Don't just say "it doesn't work"!
+-->
+
+(Write what happened. Add screencasts/screenshots!)
+
+### Reproducible Demo
+
+(Paste the link to a [Snack example](https://snack.expo.io/) in which the issue can be reproduced. Please follow [the guidelines](https://stackoverflow.com/help/mcve) for providing a Minimal, Complete, and Verifiable example.)
+
+<!--
+  This step is MANDATORY:
+
+    * It shows that you value and respect the time of the people that are willing to help you; no one wishes to waste his spare time trying to recreate someone else's problem.
+    * Issues without reproducible demos have an extremely low priority and will probably be closed without notice.
+    * You might figure out the issues yourself as you work on extracting it.
+-->
+
+### Steps to Reproduce
+
+<!--
+  How would you describe your issue to someone who doesn’t know you or your project?
+  Write a sequence of steps that anybody can repeat to see the issue.
+  Be specific! If the bug cannot be reproduced, your issue will be closed.
+-->
+
+(Write your steps so that anyone can reproduce the issue in the Snack demo you provided.)
+
+1.
+2.
+3.
+
+<!--
+  Thanks for helping us help you!
+-->
diff --git a/node_modules/react-native-snap-carousel/LICENSE b/node_modules/react-native-snap-carousel/LICENSE
new file mode 100644
index 0000000..3c31f41
--- /dev/null
+++ b/node_modules/react-native-snap-carousel/LICENSE
@@ -0,0 +1,29 @@
+BSD 3-Clause License
+
+Copyright (c) 2017, Archriss
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+
+* Redistributions of source code must retain the above copyright notice, this
+  list of conditions and the following disclaimer.
+
+* Redistributions in binary form must reproduce the above copyright notice,
+  this list of conditions and the following disclaimer in the documentation
+  and/or other materials provided with the distribution.
+
+* Neither the name of the copyright holder nor the names of its
+  contributors may be used to endorse or promote products derived from
+  this software without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
diff --git a/node_modules/react-native-snap-carousel/PULL_REQUEST_TEMPLATE.md b/node_modules/react-native-snap-carousel/PULL_REQUEST_TEMPLATE.md
new file mode 100644
index 0000000..883b8ee
--- /dev/null
+++ b/node_modules/react-native-snap-carousel/PULL_REQUEST_TEMPLATE.md
@@ -0,0 +1,25 @@
+### Platforms affected
+
+
+### What does this PR do?
+
+
+### What testing has been done on this change?
+
+
+### Tested features checklist
+<!--
+IMPORTANT: Please make sure that none of these features have been broken by your changes.
+It's easy to overlook something you didn't use yet.
+-->
+- [ ] Default setup ([example](https://github.com/archriss/react-native-snap-carousel/blob/master/example/src/index.js#L46-L87))
+- [ ] Carousels with and without momentum enabled ([prop `enableMomentum`](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/PROPS_METHODS_AND_GETTERS.md#behavior))
+- [ ] Vertical carousels ([prop `vertical`](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/PROPS_METHODS_AND_GETTERS.md#behavior))
+- [ ] Slide alignment ([prop `activeSlideAlignment`](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/PROPS_METHODS_AND_GETTERS.md#style-and-animation))
+- [ ] Autoplay ([prop `autoplay`](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/PROPS_METHODS_AND_GETTERS.md#autoplay))
+- [ ] Loop mode ([prop `loop`](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/PROPS_METHODS_AND_GETTERS.md#loop))
+- [ ] `ScrollView`/`FlatList` carousels ([prop `useScrollView`](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/PROPS_METHODS_AND_GETTERS.md#behavior))
+- [ ] [Callback methods](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/PROPS_METHODS_AND_GETTERS.md#callbacks)
+- [ ] [`ParallaxImage` component](https://github.com/archriss/react-native-snap-carousel#parallaximage-component)
+- [ ] [`Pagination` component](https://github.com/archriss/react-native-snap-carousel#pagination-component)
+- [ ] [Layouts and custom interpolations](https://github.com/archriss/react-native-snap-carousel#layouts-and-custom-interpolations)
diff --git a/node_modules/react-native-snap-carousel/README.md b/node_modules/react-native-snap-carousel/README.md
index fb3a5e4..4242d19 100644
--- a/node_modules/react-native-snap-carousel/README.md
+++ b/node_modules/react-native-snap-carousel/README.md
@@ -1,134 +1,240 @@
 # react-native-snap-carousel
-Simple swiper component for React Native with **previews** and **snapping effect**. Compatible with Android & iOS.
-Pull requests are very welcome!
+
+![platforms](https://img.shields.io/badge/platforms-Android%20%7C%20iOS-brightgreen.svg?style=flat-square&colorB=191A17)
+[![npm](https://img.shields.io/npm/v/react-native-snap-carousel.svg?style=flat-square)](https://www.npmjs.com/package/react-native-snap-carousel)
+[![npm](https://img.shields.io/npm/dm/react-native-snap-carousel.svg?style=flat-square&colorB=007ec6)](https://www.npmjs.com/package/react-native-snap-carousel)
+<!-- [![github release](https://img.shields.io/github/release/archriss/react-native-snap-carousel.svg?style=flat-square)](https://github.com/archriss/react-native-snap-carousel/releases) -->
+[![github issues](https://img.shields.io/github/issues/archriss/react-native-snap-carousel.svg?style=flat-square)](https://github.com/archriss/react-native-snap-carousel/issues)
+[![github closed issues](https://img.shields.io/github/issues-closed/archriss/react-native-snap-carousel.svg?style=flat-square&colorB=44cc11)](https://github.com/archriss/react-native-snap-carousel/issues?q=is%3Aissue+is%3Aclosed)
+[![Issue Stats](https://img.shields.io/issuestats/i/github/archriss/react-native-snap-carousel.svg?style=flat-square&colorB=44cc11)](http://github.com/archriss/react-native-snap-carousel/issues)
+
+-----
+-----
+
+## ✨ Some great news for you, fellow plugin user!
+
+### 💡 **[Head over there now](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/VERSION_4.md)** to learn more about all the goodness that's coming your way.
+
+-----
+-----
 
 ## Table of contents
 
 1. [Showcase](#showcase)
 1. [Usage](#usage)
-1. [Props](#props)
-1. [Methods](#methods)
-1. [Properties](#properties)
 1. [Example](#example)
+1. [Props, methods and getters](#props-methods-and-getters)
+1. [Layouts and custom interpolations](#layouts-and-custom-interpolations)
+1. [`ParallaxImage` component](#parallaximage-component)
+1. [`Pagination` component](#pagination-component)
 1. [Tips and tricks](#tips-and-tricks)
-1. [TODO](#todo)
+1. [Known issues](#known-issues)
+1. [Important note regarding Android](#important-note-regarding-android)
+1. [Important note regarding iOS](#important-note-regarding-ios)
+1. [Roadmap](#roadmap)
+1. [Credits](#credits)
 
 ## Showcase
 
-You can try these examples live in **Archriss' showcase app** on [android](https://play.google.com/store/apps/details?id=fr.archriss.demo.app) and [ios](https://itunes.apple.com/lu/app/archriss-presentation-mobile/id1180954376?mt=8).
-Note that the app is still WIP.
+### :raised_hands: New feature: layouts
+
+[Do you want to find out more?](#layouts-and-custom-interpolations)
+
+![react-native-snap-carousel default layout](https://i.imgur.com/e1WbZcu.gif)
+![react-native-snap-carousel tinder layout](https://i.imgur.com/R7OpEFs.gif)
+![react-native-snap-carousel stack layout](https://i.imgur.com/foMIGM2.gif)
+
+### Real-world examples
+
+These are live apps we've created that make heavy use of the plugin. Don't be shy, share yours if you've done something awesome with it!
+
+![react-native-snap-carousel archriss aix](https://i.imgur.com/pPm0csc.gif)
+![react-native-snap-carousel archriss aix](https://i.imgur.com/UFsPlz2.gif)
+
+![react-native-snap-carousel](https://i.imgur.com/Fope3uj.gif)
+![react-native-snap-carousel](https://i.imgur.com/WNOBYfl.gif)
+![react-native-snap-carousel](https://i.imgur.com/sK5DKaG.gif)
+
+---
+
+## :handshake: Maintainers wanted
+
+Hey there,
+
+Creating and maintaining this plugin has been a fun ride that started in 2016. We thank you all for your appreciation and for making the most out of it! You've motivated us to spend countless hours improving the plugin, and made us happy to give back to the Open Source community.
+
+Put simply, we love this project. However we currently aren't able to give it the love it deserves and the care it requires. **If you have enough time and knowledge, and want to become a maintainer, please let us know**.
+
+### 💡 **[Just head there if you're interested](https://github.com/archriss/react-native-snap-carousel/issues/632).**
+
+We're not abandoning the ship, but we need more people to help us keep it alive and well!
 
-![react-native-snap-carousel](http://i.imgur.com/Fope3uj.gif)
-![react-native-snap-carousel](https://media.giphy.com/media/3o6ZsU9gWWrvYtogow/giphy.gif)
-![react-native-snap-carousel](https://media.giphy.com/media/3o7TKUAlvi1tYLFCTK/giphy.gif)
+---
 
 ## Usage
 
-```
+```bash
 $ npm install --save react-native-snap-carousel
 ```
 
+If you're using Typescript you should also install type definitions:
+```bash
+$ npm install --save @types/react-native-snap-carousel
+```
+
+
 ```javascript
 import Carousel from 'react-native-snap-carousel';
 
-    _renderItem (data, index) {
+export class MyCarousel extends Component {
+
+    _renderItem = ({item, index}) => {
         return (
-            ...
+            <View style={styles.slide}>
+                <Text style={styles.title}>{ item.title }</Text>
+            </View>
         );
     }
 
     render () {
-        <Carousel
-          ref={'carousel'}
-          items={this.state.entries}
-          renderItem={this._renderItem}
-          sliderWidth={sliderWidth}
-          itemWidth={itemWidth}
-          slideStyle={styles.slide} />
+        return (
+            <Carousel
+              ref={(c) => { this._carousel = c; }}
+              data={this.state.entries}
+              renderItem={this._renderItem}
+              sliderWidth={sliderWidth}
+              itemWidth={itemWidth}
+            />
+        );
     }
+}
 ```
 
-## Props
-
-In addition of these props, you can provide any prop from [ScrollView](https://facebook.github.io/react-native/docs/scrollview.html) since it's using it both on Android & iOS.
-
-Prop | Description | Type | Default
------- | ------ | ------ | ------
-items | Array of items to loop on | Array | Required
-sliderWidth | The width in pixels of your slider | Number | Required
-itemWidth | Width in pixels of your items | Number | Required
-renderItem | Function returning a react element. The entry data is the 1st parameter, its index is the 2nd | Function | Required
-shouldOptimizeUpdates | whether to implement a `shouldComponentUpdate` strategy to minimize updates | Boolean | `true`
-slideStyle | Style of each item's container | Number | Required
-swipeThreshold | Delta x when swiping to trigger the snap | Number | `20`
-animationFunc | Animated animation to use. Provide the name of the method | String | `Timing`
-animationOptions | Animation options to be merged with the default ones. Can be used w/ animationFunc | Object | `{ easing: Easing.elastic(1) }`
-firstItem | Index of the first item to display | Number | `0`
-autoplay | Trigger autoplay on mount | Boolean | `false`
-autoplayInterval | Delay in ms until navigating to the next item | `3000`
-autoplayDelay | Delay before enabling autoplay on startup & after releasing the touch | Number | `5000`
-enableSnap | If enabled, releasing the touch will scroll to the center of the nearest/active item | Number | `true`
-enableMomentum | See [momentum](#momentum) | Boolean | `true`
-snapOnAndroid | Snapping on android is kinda choppy, especially when swiping quickly so you can disable it | Boolean | `false`
-containerCustomStyle | Optional styles for Scrollview's global wrapper | Number | `null`
-contentContainerCustomStyle | Optional styles for Scrollview's items container | Number | `null`
-inactiveSlideScale | Value of the 'scale' transform applied to inactive slides | Number | `0.9`
-inactiveSlideOpacity | Value of the opacity effect applied to inactive slides | Number | `1`
-onSnapToItem(slideIndex, itemData) | Callback fired when navigating to an item | Function | `undefined`
-
-## Methods
-
-* `startAutoplay (instantly = false)` Start the autoplay manually
-* `stopAutoplay ()` Stop the autoplay manually
-* `snapToItem (index, animated = true)` Snap to an item manually
-* `snapToNext (animated = true)` Snap to next item manually
-* `snapToPrev (animated = true)` Snap to previous item manually
-
-## Properties
-
-* `currentIndex` Current active item (`int`, starts at 0)
-
 ## Example
-You can find the following example in the [/example](https://github.com/archriss/react-native-snap-carousel/tree/master/example) folder.
 
-![react-native-snap-carousel](http://i.imgur.com/FxMg5md.gif)
+Here are simple examples that can be edited in real time in your browser:
 
-## Tips and tricks
+- https://snack.expo.io/@vitkor/carousel-simple-example
+- https://snack.expo.io/@bd-arc/react-native-snap-carousel-%7C-example-with-custom-interpolations
 
-### Margin between slides
-If you need some **extra horizontal margin** between slides (besides the one resulting from the scale effect), you should add it as `paddingHorizontal` on the slide container. Make sure to take this into account when calculating item's width.
+You can also find a more in-depth (read "complex") one in the [`/example` folder](https://github.com/archriss/react-native-snap-carousel/tree/master/example).
 
+![react-native-snap-carousel](https://i.imgur.com/pZincya.gif)
+
+## Props, methods and getters
+
+In order to let you to create mighty carousels and to keep up with your requests, we add new features on a regular basis. Consequently, the list of available props has become really huge and deserves a documentation of its own.
+
+### :books: [Documentation for "Props, methods and getters"](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/PROPS_METHODS_AND_GETTERS.md)
+
+## Layouts and custom interpolations
+
+### Built-in layouts
+
+In version `3.6.0`, we've added two new layouts on top of the original one: the first one is called 'stack' since it mimics a stack of cards, and the other one is called 'tinder' since it provides a Tinder-like animation.
+
+You can choose between the three of them using [the new prop `layout`](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/PROPS_METHODS_AND_GETTERS.md#style-and-animation) and you can modify the default card offset in the 'stack' and 'tinder' layouts with [prop `layoutCardOffset`](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/PROPS_METHODS_AND_GETTERS.md#style-and-animation).
+
+![react-native-snap-carousel default layout](https://i.imgur.com/e1WbZcu.gif)
 ```javascript
-const slideWidth = 250;
-const horizontalMargin = 40;
-const itemWidth = slideWidth + horizontalMargin * 2;
-
-const styles = Stylesheet.create({
-    slide: {
-        width: itemWidth
-        // other styles for your item's container
-    }
-};
+<Carousel layout={'default'} />
+```
 
-<Carousel
-  itemWidth={itemWidth}
-  slideStyle={styles.slide}
-  />
+![react-native-snap-carousel stack layout ios](https://i.imgur.com/c7pU4rT.gif)
+![react-native-snap-carousel stack layout android](https://i.imgur.com/AnruacR.gif)
+```javascript
+<Carousel layout={'stack'} layoutCardOffset={`18`} />
+```
 
+![react-native-snap-carousel tinder layout ios](https://i.imgur.com/D9QyTzb.gif)
+![react-native-snap-carousel tinder layout android](https://i.imgur.com/ab1TI4e.gif)
+```javascript
+<Carousel layout={'tinder'} layoutCardOffset={`9`} />
 ```
 
-### Momentum
+A few things worth noting:
+* As you can see, the effect had to be inverted on Android. This has to do with [a really annoying Android-specific bug](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/CUSTOM_INTERPOLATIONS.md#android).
+* Even though the new layouts have been created with horizontal carousels in mind, they will also work with vertical ones \o/
+* :warning: **You should NOT use `stack` or `tinder` layouts if you have a large data set to display.** In order to avoid rendering issues, the carousel will use a `ScrollView` component rather than a `FlatList` one for those layouts (see [prop `useScrollView`](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/PROPS_METHODS_AND_GETTERS.md#behavior)). The tradeof is that you won't benefit from any of `FlatList`'s advanced optimizations. See [this issue](https://github.com/archriss/react-native-snap-carousel/issues/262) for workarounds; or you may want to implement your own [custom interpolation](#custom-interpolations).
 
-Since `1.5.0`, the snapping effect can now be based on momentum instead of when you're releasing your finger. It means that the component will wait until the `ScrollView` isn't moving anymore to snap. By default, the inertia isn't too high on Android. However, we had to tweak the default iOS value a bit to make sure the snapping isn't delayed for too long.
-You can adjust this value to your needs thanks to [this prop](https://facebook.github.io/react-native/docs/scrollview.html#decelerationrate).
+### Custom interpolations
 
-## TODO
+On top of the new layouts, we've exposed the logic we used so that users can create their own awesome layouts! If you're interested, take a deep breath and dive into the dedicated documentation.
 
-- [ ] Add 'loop' mode
-- [ ] Handle changing props on-the-fly
-- [ ] Handle device orientation event
-- [ ] Add vertical implementation
-- [x] Handle passing 1 item only
+### :books: [Documentation for "Custom interpolations"](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/CUSTOM_INTERPOLATIONS.md)
+
+Here are a few examples of what can easily be achieved (you can explore [the source code](https://github.com/archriss/react-native-snap-carousel/blob/master/example/src/utils/animations.js) and try it live in [the provided example](https://github.com/archriss/react-native-snap-carousel/tree/master/example)):
+
+![react-native-snap-carousel custom layout](https://i.imgur.com/OrdLsCM.gif)
+![react-native-snap-carousel custom layout](https://i.imgur.com/slnTbyG.gif)
+![react-native-snap-carousel custom layout](https://i.imgur.com/kDx3xTc.gif)
+
+## `ParallaxImage` component
+
+Version `3.0.0` introduced a `<ParallaxImage />` component, an image component aware of carousel's current scroll position and therefore able to display a nice parallax effect (powered by the native driver to ensure top-notch performance).
+
+### :books: [Documentation for "`ParallaxImage` component"](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/PARALLAX_IMAGE.md)
+
+![react-native-snap-carousel parallax image](https://i.imgur.com/6iIb4SR.gif)
+
+## `Pagination` component
+
+Starting with version `2.4.0`, a customizable `<Pagination />` component has been added. You can see below how it looks like with its default configuration.
+
+### :books: [Documentation for "`Pagination` component"](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/PAGINATION.md)
+
+![react-native-snap-carousel pagination](https://i.imgur.com/FLQcGGL.gif)
+
+## Tips and tricks
+
+We've gathered together all the useful tips and tricks. There is a bunch of them, which makes **this section a must-read!**
+
+### :books: [Documentation for "Tips and tricks"](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/TIPS_AND_TRICKS.md)
+
+## Known issues
+
+**Make sure to read about the known issues before opening a new one**; you may find something useful.
+
+### :books: [Documentation for "Known issues"](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/KNOWN_ISSUES.md)
+
+## Important note regarding Android
+
+![react-native-snap-carousel android](https://i.imgur.com/03iuB2Um.jpg)
+
+Android's debug mode is a mess: timeouts regularly desynchronize and scroll events are fired with some lag, which completely alters the inner logic of the carousel. **On Android, you *will* experience issues with carousel's behavior when JS Dev Mode is enabled, and you *might* have trouble with unreliable callbacks and loop mode when it isn't**. This is unfortunate, but it's rooted in various flaws of `ScrollView`/`FlatList`'s implementation and the miscellaneous workarounds we had to implement to compensate for it.
+
+:warning: **Therefore you should always check if the issue you experience also happens in a production environment. This is, sadly, the only way to test the real performance and behavior of the carousel.**
+
+> For more information, you can read the following notes: ["Android performance"](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/KNOWN_ISSUES.md#android-performance) and ["Unreliable callbacks"](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/KNOWN_ISSUES.md#unreliable-callbacks).
+
+## Important note regarding iOS
+
+![react-native-snap-carousel ios](https://i.imgur.com/npuiUSbh.png)
+
+:warning: When debugging with the iOS simulator, **you're only one "Cmd + T" away from toggling "Slow Animations"**. If carousel's animations seem painfully slow, make sure that you haven't enabled this setting by mistake.
+
+## Roadmap
+
+- [ ] Add [more examples](https://github.com/archriss/react-native-snap-carousel/issues/257)
+- [ ] Base the plugin on a component less buggy than `FlatList`
+- [X] Implement different layouts and allow using custom interpolations
+- [X] Implement both `FlatList` and `ScrollView` handling
+- [X] Add the ability to provide custom items animation
+- [X] Implement 'loop' mode
+- [X] Improve Android's behavior
+- [x] Add parallax image component
+- [x] Base the plugin on `FlatList` instead of `ScrollView`
+- [x] Add alignment option
+- [x] Add pagination component
+- [x] Add vertical implementation
+- [x] Handle device orientation event (see [this note](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/TIPS_AND_TRICKS.md#handling-device-rotation))
+- [x] Add RTL support
 - [x] Improve momemtum handling
 - [x] Improve snap on Android
+- [x] Handle passing 1 item only
 - [x] Fix centering
+
+## Credits
+
+Written by [Benoît Delmaire](https://fr.linkedin.com/in/benoitdelmaire) ([bd-arc](https://github.com/bd-arc)) and [Maxime Bertonnier](https://fr.linkedin.com/in/maxime-bertonnier-744351aa) ([Exilz](https://github.com/Exilz)) at
+[Archriss](http://www.archriss.com/).
diff --git a/node_modules/react-native-snap-carousel/doc/CUSTOM_INTERPOLATIONS.md b/node_modules/react-native-snap-carousel/doc/CUSTOM_INTERPOLATIONS.md
new file mode 100644
index 0000000..687712b
--- /dev/null
+++ b/node_modules/react-native-snap-carousel/doc/CUSTOM_INTERPOLATIONS.md
@@ -0,0 +1,298 @@
+# Implementing custom interpolations
+
+> :warning: **This guide describes an advanced feature that is not intended for the faint-hearted**. Your sanity will be seriously challenged by the two most-feared enemies of this plugin: Android and React Native's `FlatList`. You **will** discover bugs that will drive you mad and, as a result, your aging process will accelerate drastically. Consider yourself warned and make sure to read [the caveats](#caveats) first and foremost!
+
+## Table of contents
+
+1. [Preview](#preview)
+1. [Usage](#usage)
+1. [Step-by-step example](#step-by-step-example)
+1. [Caveats](#caveats)
+
+## Preview
+
+Version `3.6.0` introduced a new cool feature: layouts. On top of the default one, we've implemented two other ways of stacking and animating items in the carousel. You can choose between these with [prop `layout`](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/PROPS_METHODS_AND_GETTERS.md#style-and-animation). Here how each one looks like (the reason why iOS and Android are differents [will be explained later](#caveats)):
+
+![react-native-snap-carousel default layout](https://i.imgur.com/e1WbZcu.gif)
+```javascript
+<Carousel layout={'default'} />
+```
+
+![react-native-snap-carousel stack layout ios](https://i.imgur.com/c7pU4rT.gif)
+![react-native-snap-carousel stack layout android](https://i.imgur.com/AnruacR.gif)
+```javascript
+<Carousel layout={'stack'} />
+```
+
+![react-native-snap-carousel tinder layout ios](https://i.imgur.com/D9QyTzb.gif)
+![react-native-snap-carousel tinder layout android](https://i.imgur.com/ab1TI4e.gif)
+```javascript
+<Carousel layout={'tinder'} />
+```
+
+We are able to do all this thanks to React Native's great [Animated API](https://facebook.github.io/react-native/docs/animations.html). Basically, we interpolate the current scroll position and provide to each item a set of animations based on this value. But those new layouts are just the tip of the iceberg. You can easily create others like these ones:
+
+![react-native-snap-carousel custom layout](https://i.imgur.com/slnTbyG.gif)
+![react-native-snap-carousel custom layout](https://i.imgur.com/OrdLsCM.gif)
+![react-native-snap-carousel custom layout](https://i.imgur.com/Nht4w9D.gif)
+![react-native-snap-carousel custom layout](https://i.imgur.com/kDx3xTc.gif)
+
+We've decided to expose a way for users to provide their own interpolators, customize their carousels and create awesome animations! Note that you can find the source code of the built-in layouts [here](https://github.com/archriss/react-native-snap-carousel/blob/master/src/utils/animations.js) and the source code of the custom examples [here](https://github.com/archriss/react-native-snap-carousel/blob/master/example/src/utils/animations.js). Taking a look at these is a very good way to understand how it works.
+
+## Usage
+
+### Prerequisites
+
+- You have some experience with React Native's [Animated API](https://facebook.github.io/react-native/docs/animations.html).
+- You have a good understanding of [Animated's interpolations](https://github.com/browniefed/react-native-animation-book/blob/master/INTERPOLATION.md).
+- You've read and understood [the caveats](#caveats).
+- You are known for both your mental toughness and the peace of your mind.
+
+### Summary
+
+Adding a custom interpolation is done by providing either one of these props (but most likely both): `scrollInterpolator` and `slideInterpolatedStyle`.
+
+:bulb: You cannot use prop `activeAnimationOptions` in conjunction with custom interpolations. Make sure it isn't set since the scroll position will simply not be interpolated otherwise.
+
+### Prop `scrollInterpolator`
+
+This prop will be used to interpolate the scroll position. Particularly, this means associating a specific scroll position to a specific value that is going to be used in `slideInterpolatedStyle` in order to animate styles.
+
+`scrollInterpolator` **has to be a function**. It will be called for every item in the data set on carousel's initialization and **it will receive two arguments: `index` and `carouselProps`**. The first one is the item index and the second one contains every carousel props since you might need them to define your interpolation. **The function must return an object of the following shape:**
+
+```javascript
+{
+    inputRange: [scroll value 1, scroll value 2, ...],
+    outputRange: [value associated with 1, value associated with 2, ...],
+}
+```
+
+> :warning: **Both arrays must have the same length**, otherwise you'll get an error.
+
+Since it can be pretty difficult to determine the adequate `inputRange` we've created a helper for you: [`getInputRangeFromIndexes(range, index, carouselProps)`](https://github.com/archriss/react-native-snap-carousel/blob/master/src/utils/animations.js#L5:L24). You only need to determine the range of items **relative to the active one** you'd like to animate at the same time. The current item will be zero-indexed in this function. For example, using a range of `[1, 0, -1]` means that you will be able to animate the current active item (`0`), the previous one (`-1)` and the next one (`1`).
+
+> :warning: As you might have noticed, **when using `getInputRangeFromIndexes()` you need to declare your range in a reverse order**. While this is pretty counter-intuitive, you'll otherwise get an error because `"inputRange must be monotonically increasing"`.
+
+### Prop `slideInterpolatedStyle`
+
+This prop is where the magic happens and where you're finally able to bend item's animation to your will. **`slideInterpolatedStyle` must be a function that returns a style object. It will receive three arguments: `index`, `animatedValue` and `carouselProps`.** The first and the last one are the same as the ones passed in `scrollInterpolator`, while `animatedValue` correspond with the animated value of carousel's scroll position.
+
+Based on the range you declared in `scrollInterpolator`, you can now interpolate values and do whatever you want.
+
+> :bulb: Unlike what you need to do in `scrollInterpolator`, the `inputRange` you declare in `slideInterpolatedStyle` has to be in a regular order.
+
+Consider the following:
+
+```javascript
+function animatedStyle = (index, animatedValue, carouselProps) => {
+    return {
+        opacity: animatedValue.interpolate({
+            inputRange: [-1, 0, 1],
+            outputRange: [0, 1, 0.5],
+            extrapolate: 'clamp'
+        })
+    }
+}
+```
+
+It will translate into:
+- item `-1` (the previous one) will have an opacity of `0`
+- item `0` (the active one) will have an opacity of `1`
+- item `1` (the next one) will have an opacity of `0.5`.
+
+When you scroll, items' opacity will progressively animate from one value to the next, following the scroll position.
+
+: bulb: Using `extrapolate: 'clamp'` will prevent your interpolation to exceed `outputRange`'s values, the "clamping" being desirable with most use cases. From [the RN doc](https://facebook.github.io/react-native/docs/animations.html#interpolation): *"By default, it will extrapolate the curve beyond the ranges given, but you can also have it clamp the output value."*
+
+## Step-by-step example
+
+It is recommended to take a look at [the source code of the built-in layouts](https://github.com/archriss/react-native-snap-carousel/blob/master/src/utils/animations.js) and at [the source code the custom examples](https://github.com/archriss/react-native-snap-carousel/blob/master/example/src/utils/animations.js); you'll learn a lot!
+
+For those who want to follow through a step-by-step tutorial, the following is for you.
+
+### Defining the scroll interpolator
+
+Let's say we want to create a photo album effect: when swiping, the active item will move away and the next ones will appear from underneath. Of course, these items are going to be slightly rotated.
+
+First things first: for which items do we need to create a custom animation?
+- Item `-1`: the item that has been moved away.
+- Item `0`: the active item.
+- Items `1` and `2`: underneath rotated items.
+- Item `3`: invisible item that will make item `2` appear with an opacity transition.
+
+With this clarified, declaring the scroll interpolator is as simple as :
+
+```javascript
+import { getInputRangeFromIndexes } from 'react-native-snap-carousel';
+
+function scrollInterpolator (index, carouselProps) {
+    const range = [3, 2, 1, 0, -1]; // <- Remember that this has to be declared in a reverse order
+    const inputRange = getInputRangeFromIndexes(range, index, carouselProps);
+    const outputRange = range;
+
+    return { inputRange, outputRange };
+}
+```
+
+### Creating the animations
+
+This is where the fun begins!
+
+The first trick is **to ensure that the active item will always sit on top of the next ones**. By default, an item with a higher index will also have a higher `zIndex`. To counteract this, you can use the following. :warning: **Currently, this can lead to swipe/click events being missed!** See [this issue](https://github.com/archriss/react-native-snap-carousel/issues/262) for more info.
+
+```javascript
+{
+    zIndex: carouselProps.data.length - index
+}
+```
+
+Then we can define the `opacity` animation. Since we only need a transition between the second and third items, declaring it is pretty straightforward:
+
+```javascript
+opacity: animatedValue.interpolate({
+    inputRange: [2, 3],
+    outputRange: [1, 0]
+})
+```
+
+Now for the `rotate` animation. The active item and the third one won't be rotated at all, while the previous one will be in order to add a nice visual effect when swiping. Read [this](https://facebook.github.io/react-native/docs/animations.html#interpolation) if you need an explanation of the `extrapolate` property.
+
+```javascript
+transform: [{
+    rotate: animatedValue.interpolate({
+        inputRange: [-1, 0, 1, 2, 3], // <- Unlike with `scrollInterpolator()`, this is declared in a regular order
+        outputRange: ['-25deg', '0deg', '-3deg', '1.8deg', '0deg'],
+        extrapolate: 'clamp'
+    })
+}]
+```
+
+The tricky part is the `transform` animation. First, we need to ensure that our animated items are all centered in the carousel. To do that, we need to apply a translation equals to: **`-itemWidth` (or `-itemHeight` for vertical sliders) * relative index**. Then, we want item `-1` to move a bit more quickly than the others, which means negatively translating it. Finally, it's a good idea to make our animations compatible with both horizontal and vertical carousels. Hence the following:
+
+```javascript
+const sizeRef = carouselProps.vertical ? carouselProps.itemHeight : carouselProps.itemWidth;
+const translateProp = carouselProps.vertical ? 'translateY' : 'translateX';
+
+return {
+    transform: [{
+        [translateProp]: animatedValue.interpolate({
+            inputRange: [-1, 0, 1, 2, 3],
+            outputRange: [
+                -sizeRef * 0.5,
+                0,
+                -sizeRef, // centered
+                -sizeRef * 2, // centered
+                -sizeRef * 3 // centered
+            ],
+            extrapolate: 'clamp'
+        })
+    }]
+};
+```
+
+Let's put it all together:
+
+```javascript
+import React, { PureComponent } from 'react';
+import Carousel, { getInputRangeFromIndexes } from 'react-native-snap-carousel';
+
+export default class MyCustomCarousel extends PureComponent {
+
+    _scrollInterpolator (index, carouselProps) {
+        const range = [3, 2, 1, 0, -1];
+        const inputRange = getInputRangeFromIndexes(range, index, carouselProps);
+        const outputRange = range;
+
+        return { inputRange, outputRange };
+    }
+
+    _animatedStyles (index, animatedValue, carouselProps) {
+        const sizeRef = carouselProps.vertical ? carouselProps.itemHeight : carouselProps.itemWidth;
+        const translateProp = carouselProps.vertical ? 'translateY' : 'translateX';
+
+        return {
+            zIndex: carouselProps.data.length - index,
+            opacity: animatedValue.interpolate({
+                inputRange: [2, 3],
+                outputRange: [1, 0]
+            }),
+            transform: [{
+                rotate: animatedValue.interpolate({
+                    inputRange: [-1, 0, 1, 2, 3],
+                    outputRange: ['-25deg', '0deg', '-3deg', '1.8deg', '0deg'],
+                    extrapolate: 'clamp'
+                })
+            }, {
+                [translateProp]: animatedValue.interpolate({
+                    inputRange: [-1, 0, 1, 2, 3],
+                    outputRange: [
+                        -sizeRef * 0.5,
+                        0,
+                        -sizeRef, // centered
+                        -sizeRef * 2, // centered
+                        -sizeRef * 3 // centered
+                    ],
+                    extrapolate: 'clamp'
+                })
+            }]
+        };
+    }
+
+    render () {
+        return (
+            <Carousel
+              // other props
+              scrollInterpolator={this._scrollInterpolator}
+              slideInterpolatedStyle={this._animatedStyles}
+              useScrollView={true}
+            />
+        );
+    }
+}
+```
+
+Here is the result, which you can try live in [the provided example](https://github.com/archriss/react-native-snap-carousel/tree/master/example):
+
+![react-native-snap-carousel custom layout](https://i.imgur.com/slnTbyG.gif)
+
+:pill: Now for the bad news: **as is, this example won't be properly rendered on Android**. Continue reading to find out why and to discover ways to make it work.
+
+## Caveats
+
+### Android
+
+If you have any kind of experience with React Native, you already know that Android is always there to punch you in the face when you make the mistake of thinking that everything is fine.
+
+The issue here is pretty simple but very sad: [Android doesn't honor the `zIndex` property for `ScrollView`'s items](https://github.com/facebook/react-native/issues/16878). In concrete terms, this means that all items **after** the current active one will visually sit on top of it. Usually, you won't want that to happen.
+
+For most layouts, you will probably use the following trick to render the active item on top of the next ones (as seen in the 'stack' layout, the 'tinder' layout, the step-by-step example, and more):
+
+```javascript
+{ zIndex: carouselProps.data.length - index }
+```
+
+Well, do not bother doing so on Android since it just won't work... As far as we know, you have three ways of dealing with this matter:
+- **Use Android-specific prop `elevation`** -> `{ elevation: carouselProps.data.length - index }`. While this will work from a visual point of view, it has two major drawbacks: you will generate shadows (which you can "cut" with a container) and, more importantly, it has no effect over the rendering hierarchy. This means that **the item receving the tap event is not going to be the active one**. Pretty bothersome, right? Still, if you don't provide user interaction, this solution can be enough.
+- **Invert the effect**. This is what has been done for the built-in layouts. Since the active item will always sits on top of the previous one on Android, background cards are made of the previous items instead of the next ones.
+- **Use `FlatList`'s prop `inverted` with a reverse data set**. This provides the perfect transition to our second main problem...
+
+
+### The `FlatList` component
+
+`FlatList` is buggy as hell, period.
+
+With custom interpolations, what you're most likely to experience is... nothing! Your incredible animations are not going to be played because the next and previous items are going to show up too late to the party.
+
+Two solutions:
+- **Play with the following `FlatList` props** until you find something that suits your needs (or not): `initialNumToRender`, `maxToRenderPerBatch`, `windowSize` and `updateCellsBatchingPeriod`.
+- **Set `useScrollView` to `true` and/or `removeClippedSubviews` to `false`**. End of the bugs. :warning: This is a trade-off: you will have to forget about the performance optimizations that *are supposed* to come with `FlatList`, but your sanity will be preserved. We've chosen this solution for the 'stack' and 'tinder' layouts. **Bear in mind that this solution is not suited for large data sets.**
+
+### Others
+
+We use the native driver to ensure smooth animations and prevent performance issues. As stated [in RN doc](https://facebook.github.io/react-native/docs/animations.html#caveats): *"Not everything you can do with Animated is currently supported by the native driver. The main limitation is that **you can only animate non-layout properties: things like `transform` and `opacity` will work, but flexbox and position properties will not**."*.
+
+## What's next?
+
+We hope that you find this feature as awesome and useful as we are. Now go create awesome animations!
+
+We only ask for one thing in return: **please share with us your most interesting interpolations!**
\ No newline at end of file
diff --git a/node_modules/react-native-snap-carousel/doc/KNOWN_ISSUES.md b/node_modules/react-native-snap-carousel/doc/KNOWN_ISSUES.md
new file mode 100644
index 0000000..78f33fe
--- /dev/null
+++ b/node_modules/react-native-snap-carousel/doc/KNOWN_ISSUES.md
@@ -0,0 +1,75 @@
+# Known issues
+
+## Table of contents
+
+1. [`FlatList` and `ScrollView`'s limitations](#flatlist-and-scrollviews-limitations)
+1. [React Native version](#react-native-version)
+1. [Android performance](#android-performance)
+1. [Unreliable callbacks](#unreliable-callbacks)
+1. [Unreliable first item](#unreliable-first-item)
+1. [Error with Jest](#error-with-jest)
+1. [RTL support (experimental)](#rtl-support-experimental)
+
+## `FlatList` and `ScrollView`'s limitations
+
+Note that this plugin is built on top of React Native's `FlatList` which, in turn, is based on `VirtualizedList` and `ScrollView`. Unfortunately, their implementations have flaws that affect the plugin, the most problematic ones being the following:
+- there is no `scrollEnd` event
+- `scrollTo` method doesn't accept any callback
+- Android's `scrollTo` animation is quite brutal
+- it is not possible to specify a scroll duration
+- there are rendering and performance issues with the `FlatList` component.
+
+On top of that, `FlatList` has [its own set of bugs and buggy behaviors](https://github.com/facebook/react-native/issues?utf8=%E2%9C%93&q=flatlist).
+
+We're trying to work around these issues, but the result is not always as smooth as we'd want it to be. **You can help by letting the React Native team know how badly we need those features!** React Native has [a dedicated canny](https://react-native.canny.io/feature-requests) for feature requests; here are the ones that need your vote the most:
+- [[ScrollView] Add completion callback to scrollTo](https://react-native.canny.io/feature-requests/p/scrollview-add-completion-callback-to-scrollto)
+- [snapToInterval for Android](https://react-native.canny.io/feature-requests/p/snaptointerval-for-android)
+- [Add speed attribute to scrollTo](https://react-native.canny.io/feature-requests/p/add-speed-attribute-to-scrollto)
+- [Bring ios only methods to Android ScrollView](https://react-native.canny.io/feature-requests/p/bring-ios-only-methods-to-android-scrollview)
+- [ScrollView Animation Events (e.g. onScrollAnimationEnd)](https://react-native.canny.io/feature-requests/p/scrollview-animation-events-eg-onscrollanimationend)
+
+Remember that every vote counts and take a look at [#203](https://github.com/archriss/react-native-snap-carousel/issues/203) for more info!
+
+## React Native version
+
+:warning: **RN 0.43.x is the minimum recommended version for plugin releases `>= 3.0.0` since it was the first version to introduce the `FlatList` component.** Since version `3.5.0`, the component will fall back to rendering a `ScrollView` if you're using an older version of React Native (mirroring the effect of setting prop `useScrollView` to `true`). **But keep in mind that the `ScrollView` component is not suited to render a huge number of items.** If you experience performance issues, consider updating your React Native version and using the default `FlatList` version.
+
+Bear in mind that we follow RN evolutions closely, which means newer versions of the plugin might break when used in conjunction with a version of RN that is not the latest stable one.
+
+## Android performance
+
+:warning: **Make sure to test carousel's performance and behavior without JS Dev Mode enabled, ideally with a production build.**.
+
+It can take user experience from "crappy and sluggish" to "pretty good" - it's Android though, so nothing like "perfect" or "incredibly smooth"...
+
+Also, make sure to implement all the recommendations listed [here](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/TIPS_AND_TRICKS.md#optimizing-performance).
+
+## Unreliable callbacks
+
+When `enableMomentum` is disabled (default behavior), providing a reliable callback is really tricky since no `scrollEnd` event has been exposed yet for the `ScrollView` component. We can only rely on the `scrollEndDrag` event, which comes with a huge bunch of issues. See [#34](https://github.com/archriss/react-native-snap-carousel/issues/34) for more information.
+
+Version 2.3.0 tackled these issues with all sorts of flags and hacks. But you could still be facing the following one: **when you build a debug version of your app without enabling JS remote debugging, timers may desynchronize and cause a complete callback mess**. Try to either enable remote debugging or build a production version of your app, and everything should get back to normal.
+
+Callback handling has been completely revamped in version 3.2.0, in a less hacky and more reliable way. There is one issue though: callbacks now rely on scroll events. Usually, this is not a problem since the plugin features a native-powered scroll. **But there has been [a regression in React Native 0.46.x](https://github.com/facebook/react-native/issues/15769), that has been fixed in version 0.48.2.**
+
+If you're using an in-between version, you're in for some trouble since events won't be fired frequently enough (particularly on Android). **We've added a prop `callbackOffsetMargin` to help with this situation.**
+
+## Unreliable first item
+
+By design, **the `FlatList` component only renders a small chunk if items initially**.
+
+This means **you may need to rely on inherited props [`getItemLayout`](https://facebook.github.io/react-native/docs/flatlist#getitemlayout) & [`initialScrollIndex`](https://facebook.github.io/react-native/docs/flatlist#initialscrollindex) to get the `firstItem` prop to work properly** (usable from version `3.8.3` on).
+
+## Error with Jest
+
+You might encounter the following error when using the plugin in conjonction with Jest: `TypeError: Cannot read property 'style' of undefined at Object.<anonymous>`.
+
+As you can see [here](https://github.com/facebook/react-native/blob/master/jest/setup.js), this is because React Native mocks `ScrollView` for you when you write unit tests with Jest.
+
+The easiest workaround is to add `jest.unmock('ScrollView')` before importing the component in your test file (thanks [@hoangnm](https://github.com/hoangnm) for the tip!).
+
+## RTL support (experimental)
+
+Since version 2.1.0, the plugin is compatible with RTL layouts. Our implementation relies on miscellaneous hacks that work around a [React Native bug](https://github.com/facebook/react-native/issues/11960) with horizontal `ScrollView`. As such, this feature should be considered experimental since it might break with newer versions of React Native.
+
+Note that you may want to reverse the order of your data array for your items to be displayed in the proper RTL order. We've tried implementing it internally, but this led to numerous and unnecessary issues. You'll just have to do something as simple as `myCustomData.reverse()`.
diff --git a/node_modules/react-native-snap-carousel/doc/PAGINATION.md b/node_modules/react-native-snap-carousel/doc/PAGINATION.md
new file mode 100644
index 0000000..fdb44de
--- /dev/null
+++ b/node_modules/react-native-snap-carousel/doc/PAGINATION.md
@@ -0,0 +1,96 @@
+# `<Pagination />` component
+
+Starting with version `2.4.0`, a customizable `<Pagination />` component has been added. This is how it looks like with its default configuration:
+
+![react-native-snap-carousel pagination](https://i.imgur.com/FLQcGGL.gif)
+
+## Table of contents
+
+1. [Props](#props)
+1. [Note on dots' colors](#note-on-dots-colors)
+1. [Usage](#usage)
+
+## Props
+
+Prop | Description | Type | Default
+------ | ------ | ------ | ------
+**`activeDotIndex`** | Index of the currently active dot | Number | **Required**
+**`dotsLength`** | Number of dots to display | Number | **Required**
+`activeOpacity` | Opacity of the dot when tapped. The prop has no effect if `tappableDots` hasn't been set to `true`. | Number | 1
+`carouselRef` | Reference to the `Carousel` component to which pagination is linked. Needed only when setting `tappableDots` to `true`. | Object | `undefined`
+`containerStyle` | Style for dots' container that will be merged with the default one | View Style Object | `{}`
+`dotColor` | Background color of the active dot. **Use this if you want to animate the change between active and inactive colors**, and always in conjunction with `inactiveDotColor` (see [notes](#dots-colors)). | String | `undefined`
+`dotContainerStyle` | Style of each dot's container. Use this if you need to specify styles that wouldn't have any effect when defined with `dotStyle` (such as `flex`). | View Style Object | `{}`
+`dotElement` | Optional custom active dot element that will replace the default one. The element will receive a prop `active` set to `true` as well as a prop `index`. | React element | `undefined`
+`dotStyle` | Dots' style that will be merged with the default one | View Style Object | `{}`
+`inactiveDotColor` | Background color of the inactive dots. **Use this if you want to animate the change between active and inactive colors**, and always in conjunction with `dotColor` (see [notes](#dots-colors)). | String | `undefined`
+`inactiveDotElement` | Optional custom inactive dot element that will replace the default one. The element will receive a prop `active` set to `false` as well as a prop `index` | React element | `undefined`
+`inactiveDotOpacity` | Value of the opacity effect applied to inactive dots | Number | `0.5`
+`inactiveDotScale` | Value of the 'scale' transform applied to inactive dots | Number | `0.5`
+`inactiveDotStyle` | Dots' style that will be applied to inactive elements | View Style Object | `{}`
+`renderDots` | Function that gives you complete control over pagination's rendering. It will receive three parameters : `(activeIndex, total, context)`. This can be especially useful in order to replace dots with numbers. **:warning: You will need to provide your own logic to handle taps. See [this comment](https://github.com/archriss/react-native-snap-carousel/issues/273#issuecomment-368295203) for more info.** | Function | `undefined`
+`tappableDots` | Make default dots tappable, e.g. your carousel will slide to the corresponding item. Note that `carouselRef` must be specified for this to work. | Boolean | `false`
+`vertical` | Whether to layout dots vertically or horizontally | Boolean | `false`
+`animatedDuration` | Length of dot animation (milliseconds) | Number | `250`
+`animatedFriction` | Controls "bounciness"/overshoot on dot animation | Number | `4`
+`animatedTension` | Controls speed dot animation | Number | `50`
+`delayPressInDot` | Delay in ms, from the start of the touch, before onPressIn is called on dot | Number | `0`
+
+## Note on dots' colors
+If your active and inactive dots aren't of the same color, you have a choice to make:
+1. either animate the color transition by specifying both `dotColor` and `inactiveDotColor`
+1. or setting `{ backgroundColor }` in both `dotStyle` and `inactiveDotStyle`.
+
+**When animating the color transition, the dot component will no longer be able to use the native driver for scale and opacity transitions.** As stated in [React Native's doc](https://facebook.github.io/react-native/docs/animations.html#caveats), color animations aren't supported by the native driver. And, unfortunately, it doesn't seem currently possible to run native-powered and js-powered animations at the same time on the same element.
+
+Basically, this is a tradeoff between color transition and optimal smoothness. We recommended you to try the first version and, if you experiment performance drops, to settle for the second one.
+
+## Usage
+
+Since `<Pagination />` is, purposely, a separated component, you need to connect it to your `<Carousel />` component manually. This is pretty straightforward, but here is an example to get you started.
+
+```javascript
+import Carousel, { Pagination } from 'react-native-snap-carousel';
+
+export default class MyCarousel extends Component {
+
+    _renderItem ({item, index}) {
+        return <MySlideComponent data={item} />
+    }
+
+    get pagination () {
+        const { entries, activeSlide } = this.state;
+        return (
+            <Pagination
+              dotsLength={entries.length}
+              activeDotIndex={activeSlide}
+              containerStyle={{ backgroundColor: 'rgba(0, 0, 0, 0.75)' }}
+              dotStyle={{
+                  width: 10,
+                  height: 10,
+                  borderRadius: 5,
+                  marginHorizontal: 8,
+                  backgroundColor: 'rgba(255, 255, 255, 0.92)'
+              }}
+              inactiveDotStyle={{
+                  // Define styles for inactive dots here
+              }}
+              inactiveDotOpacity={0.4}
+              inactiveDotScale={0.6}
+            />
+        );
+    }
+
+    render () {
+        return (
+            <View>
+                <Carousel
+                  data={this.state.entries}
+                  renderItem={this._renderItem}
+                  onSnapToItem={(index) => this.setState({ activeSlide: index }) }
+                />
+                { this.pagination }
+            </View>
+        );
+    }
+```
diff --git a/node_modules/react-native-snap-carousel/doc/PARALLAX_IMAGE.md b/node_modules/react-native-snap-carousel/doc/PARALLAX_IMAGE.md
new file mode 100644
index 0000000..3527310
--- /dev/null
+++ b/node_modules/react-native-snap-carousel/doc/PARALLAX_IMAGE.md
@@ -0,0 +1,196 @@
+# `<ParallaxImage />` component
+
+Version `3.0.0` introduced a `<ParallaxImage />` component, an image component aware of carousel's current scroll position and therefore able to display a nice parallax effect (powered by the native driver to ensure top-notch performance).
+
+![react-native-snap-carousel parallax image](https://i.imgur.com/6iIb4SR.gif)
+
+## Props
+
+Prop | Description | Type | Default
+------ | ------ | ------ | ------
+`containerStyle` | Optional style for image's container | View Style Object | `{}`
+`dimensions` | Optional on-screen dimensions of the image, as measured with [native methods](https://facebook.github.io/react-native/docs/direct-manipulation.html#other-native-methods). This allows for a bit of optimization, but it's sometimes tricky to get these in responsive layouts. | `{ width: number, height: number }` | `undefined`
+`fadeDuration` | Duration of the fade-in effect when image is loaded | Number | `500`
+`parallaxFactor` | Speed of the parallax effect. Be aware that the bigger the value, the more image will appear "zoomed in". | Number | `0.3`
+`showSpinner` | Whether to display a spinner while image is loading or not | Boolean | `true`
+`spinnerColor` | Color of the spinner | String | 'rgba(0, 0, 0, 0.4)'
+`AnimatedImageComponent` | Custom animated image component | Function Object | `Animated.Image`
+
+All [`<Image />` props](https://facebook.github.io/react-native/docs/image.html#props) are also inherited, **particularly `source` which is required**.
+
+## Usage
+
+The first thing you need to do is to **set `hasParallaxImages` to `true` for your `<Carousel />`**. This will make a new argument available in your `renderItem()` function, which must then be passed to the `<ParallaxImage />`.
+
+Here is an example that shows how to connect images to your carousel (note the `parallaxProps` argument).
+
+```javascript
+import Carousel, { ParallaxImage } from 'react-native-snap-carousel';
+import { Dimensions, StyleSheet } from 'react-native';
+
+const { width: screenWidth } = Dimensions.get('window')
+
+export default class MyCarousel extends Component {
+
+    _renderItem ({item, index}, parallaxProps) {
+        return (
+            <View style={styles.item}>
+                <ParallaxImage
+                    source={{ uri: item.thumbnail }}
+                    containerStyle={styles.imageContainer}
+                    style={styles.image}
+                    parallaxFactor={0.4}
+                    {...parallaxProps}
+                />
+                <Text style={styles.title} numberOfLines={2}>
+                    { item.title }
+                </Text>
+            </View>
+        );
+    }
+
+    render () {
+        return (
+            <Carousel
+                sliderWidth={screenWidth}
+                sliderHeight={screenWidth}
+                itemWidth={screenWidth - 60}
+                data={this.state.entries}
+                renderItem={this._renderItem}
+                hasParallaxImages={true}
+            />
+        );
+    }
+}
+
+const styles = StyleSheet.create({
+  item: {
+    width: screenWidth - 60,
+    height: screenWidth - 60,
+  },
+  imageContainer: {
+    flex: 1,
+    marginBottom: Platform.select({ ios: 0, android: 1 }), // Prevent a random Android rendering issue
+    backgroundColor: 'white',
+    borderRadius: 8,
+  },
+  image: {
+    ...StyleSheet.absoluteFillObject,
+    resizeMode: 'cover',
+  },
+})
+```
+
+## Example to use with React Hooks
+
+```javascript
+import React, {useRef, useState, useEffect} from 'react';
+import Carousel, {ParallaxImage} from 'react-native-snap-carousel';
+import {
+  View,
+  Text,
+  Dimensions,
+  StyleSheet,
+  TouchableOpacity,
+  Platform,
+} from 'react-native';
+
+const ENTRIES1 = [
+  {
+    title: 'Beautiful and dramatic Antelope Canyon',
+    subtitle: 'Lorem ipsum dolor sit amet et nuncat mergitur',
+    illustration: 'https://i.imgur.com/UYiroysl.jpg',
+  },
+  {
+    title: 'Earlier this morning, NYC',
+    subtitle: 'Lorem ipsum dolor sit amet',
+    illustration: 'https://i.imgur.com/UPrs1EWl.jpg',
+  },
+  {
+    title: 'White Pocket Sunset',
+    subtitle: 'Lorem ipsum dolor sit amet et nuncat ',
+    illustration: 'https://i.imgur.com/MABUbpDl.jpg',
+  },
+  {
+    title: 'Acrocorinth, Greece',
+    subtitle: 'Lorem ipsum dolor sit amet et nuncat mergitur',
+    illustration: 'https://i.imgur.com/KZsmUi2l.jpg',
+  },
+  {
+    title: 'The lone tree, majestic landscape of New Zealand',
+    subtitle: 'Lorem ipsum dolor sit amet',
+    illustration: 'https://i.imgur.com/2nCt3Sbl.jpg',
+  },
+];
+const {width: screenWidth} = Dimensions.get('window');
+
+const MyCarousel = props => {
+  const [entries, setEntries] = useState([]);
+  const carouselRef = useRef(null);
+
+  const goForward = () => {
+    carouselRef.current.snapToNext();
+  };
+
+  useEffect(() => {
+    setEntries(ENTRIES1);
+  }, []);
+
+  const renderItem = ({item, index}, parallaxProps) => {
+    return (
+      <View style={styles.item}>
+        <ParallaxImage
+          source={{uri: item.illustration}}
+          containerStyle={styles.imageContainer}
+          style={styles.image}
+          parallaxFactor={0.4}
+          {...parallaxProps}
+        />
+        <Text style={styles.title} numberOfLines={2}>
+          {item.title}
+        </Text>
+      </View>
+    );
+  };
+
+  return (
+    <View style={styles.container}>
+      <TouchableOpacity onPress={goForward}>
+        <Text>go to next slide</Text>
+      </TouchableOpacity>
+      <Carousel
+        ref={carouselRef}
+        sliderWidth={screenWidth}
+        sliderHeight={screenWidth}
+        itemWidth={screenWidth - 60}
+        data={entries}
+        renderItem={renderItem}
+        hasParallaxImages={true}
+      />
+    </View>
+  );
+};
+
+export default MyCarousel;
+
+const styles = StyleSheet.create({
+  container: {
+    flex: 1,
+  },
+  item: {
+    width: screenWidth - 60,
+    height: screenWidth - 60,
+  },
+  imageContainer: {
+    flex: 1,
+    marginBottom: Platform.select({ios: 0, android: 1}), // Prevent a random Android rendering issue
+    backgroundColor: 'white',
+    borderRadius: 8,
+  },
+  image: {
+    ...StyleSheet.absoluteFillObject,
+    resizeMode: 'cover',
+  },
+});
+
+```
diff --git a/node_modules/react-native-snap-carousel/doc/PROPS_METHODS_AND_GETTERS.md b/node_modules/react-native-snap-carousel/doc/PROPS_METHODS_AND_GETTERS.md
new file mode 100644
index 0000000..8ece217
--- /dev/null
+++ b/node_modules/react-native-snap-carousel/doc/PROPS_METHODS_AND_GETTERS.md
@@ -0,0 +1,146 @@
+# Props, methods and getters
+
+## Table of contents
+
+1. [Props](#props)
+    * [Required](#required)
+    * [Behavior](#behavior)
+    * [Loop](#loop)
+    * [Autoplay](#autoplay)
+    * [Style and animation](#style-and-animation)
+    * [Callbacks](#callbacks)
+    * [Inherited props](#inherited-props)
+1. [Methods](#methods)
+1. [Getters](#getters)
+
+## Props
+
+### Required
+
+Prop | Description | Type | Default
+------ | ------ | ------ | ------
+**`data`** | Array of items to loop on | Array | **Required**
+**`renderItem`** | Takes an item from data and renders it into the list. The function receives one argument `{item, index}` (see [Usage](https://github.com/archriss/react-native-snap-carousel#usage)) and must return a React element. | Function | **Required**
+**`itemWidth`** | Width in pixels of carousel's items, **must be the same for all of them** | Number | **Required for __horizontal__ carousel**
+**`sliderWidth`** | Width in pixels of the carousel itself | Number | **Required for __horizontal__ carousel**
+**`itemHeight`** | Height in pixels of carousel's items, **must be the same for all of them** | Number | **Required for __vertical__ carousel**
+**`sliderHeight`** | Height in pixels of the carousel itself | Number | **Required for __vertical__ carousel**
+
+### Behavior
+
+Prop | Description | Type | Default
+------ | ------ | ------ | ------
+`activeSlideOffset` | From slider's center, minimum slide distance to be scrolled before being set to active. | Number | `20`
+`apparitionDelay` | `FlatList`'s init is a real mess, with lots of unneeded flickers and slides movement. This prop controls the delay during which the carousel will be hidden when mounted. **WARNING: on Android, using it may lead to [rendering issues](https://github.com/archriss/react-native-snap-carousel/issues/236) (i.e. images not showing up)**. Make sure to test thoroughly if you decide on using it. | Number | `0`
+`callbackOffsetMargin` | Scroll events might not be triggered often enough to get a precise measure and, therefore, to provide a reliable callback. This usually is an Android issue, which might be linked to the version of React Native you're using (see ["Unreliable callbacks"](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/KNOWN_ISSUES.md#unreliable-callbacks)). To work around this, you can define a small margin that will increase the "sweet spot"'s width. The default value should cover most cases, but **you will want to increase it if you experience missed callbacks**. | Number | `5`
+`enableMomentum` | See [momentum](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/TIPS_AND_TRICKS.md#momentum) | Boolean | `false`
+`enableSnap` | If enabled, releasing the touch will scroll to the center of the nearest/active item | Boolean | `true`
+`firstItem` | Index of the first item to display. :warning: **Make sure to use inherited props [`getItemLayout`](https://facebook.github.io/react-native/docs/flatlist#getitemlayout) & [`initialScrollIndex`](https://facebook.github.io/react-native/docs/flatlist#initialscrollindex) if the prop doesn't seem to work**. | Number | `0`
+`hasParallaxImages` | Whether the carousel contains `<ParallaxImage />` components or not. Required for specific data to be passed to children. | Boolean | `false`
+`lockScrollTimeoutDuration` | This prop works in conjunction with `lockScrollWhileSnapping`. When scroll is locked, a timer is created in order to release the scroll if something goes wrong with the regular callback handling. **Normally, you shouldn't have to use this prop.** | Number | `1000`
+`lockScrollWhileSnapping` | Prevent the user from swiping again while the carousel is snapping to a position. This prevents miscellaneous minor issues (inadvertently tapping an item while scrolling, stopping the scrolling animation if the carousel is tapped in the middle of a snap, clunky behavior on Android when short snapping quickly in opposite directions). The only drawback is that enabling the prop hinders the ability to swipe quickly between items as a little pause between swipes is needed. **Note that the prop won't have any effect if `enableMomentum` is set to `true`, since it would otherwise impede the natural and expected behavior.** | Boolean | `false`
+`scrollEnabled` | When `false`, the view cannot be scrolled via touch interaction ([inherited prop](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/PROPS_METHODS_AND_GETTERS.md#inherited-props)) | Boolean | `true`
+`shouldOptimizeUpdates` | Whether to implement a `shouldComponentUpdate` strategy to minimize updates | Boolean | `true`
+`swipeThreshold` | Delta x when swiping to trigger the snap | Number | `20`
+`useScrollView` | Whether to use a `ScrollView` component instead of the default `FlatList` one. The advantages are to avoid rendering issues that can arise with `FlatList` and to provide compatibility with React Native pre- `0.43`. The major drawbacks are that you won't benefit from any of `FlatList`'s advanced optimizations and that you won't be able to use either `VirtualizedList` or `FlatList`'s specific props. **We recommend activating it only with a small set of slides and to test performance thoroughly in production mode.** Since version `3.7.6`, this prop also accepts a custom scroll component (see #498 for more info). | Boolean | `false` for `default` layout, `true` for `stack` and `tinder` layouts
+`vertical` | Layout slides vertically instead of horizontally | Boolean | `false`
+
+### Loop
+
+Prop | Description | Type | Default
+------ | ------ | ------ | ------
+`loop` | Enable infinite loop mode. **:warning: It won't work if `enableSnap` has been set to `false`.** | Boolean | `false`
+`loopClonesPerSide` | Number of clones to append to each side of the original items. **When swiping very quickly**, the user will eventually need to pause for a quick second before the scroll is repositioned (this occurs when the end of the set is reached). By increasing this number, the user will be able to scroll more slides before having to stop; but you'll also load more items in memory. This is a trade-off between optimal user experience and performance. | Number | `3`
+
+### Autoplay
+
+Prop | Description | Type | Default
+------ | ------ | ------ | ------
+`autoplay` | Trigger autoplay on mount. If you enable autoplay, we recommend you to set `enableMomentum` to `false` (default) and `lockScrollWhileSnapping` to `true`; this will enhance user experience a bit. | Boolean | `false`
+`autoplayDelay` | Delay before enabling autoplay on startup & after releasing the touch | Number | `1000`
+`autoplayInterval` | Delay in ms until navigating to the next item | Number |  `3000`
+
+### Style and animation
+
+Prop | Description | Type | Default
+------ | ------ | ------ | ------
+`activeAnimationOptions` | Custom animation options. Note that `useNativeDriver` will be enabled by default and that opacity's easing will always be kept linear. **Setting this prop to something other than `null` will trigger custom animations and will completely change the way items are animated**: rather than having their opacity and scale interpolated based the scroll value (default behavior), they will now play the custom animation you provide as soon as they become active. **This means you cannot use props `layout`, `scrollInterpolator` or `slideInterpolatedStyle` in conjunction with `activeAnimationOptions`.** | Object | `null`
+`activeAnimationType` | Custom [animation type](https://facebook.github.io/react-native/docs/animated.html#configuring-animations): either `'decay`, `'spring'` or `'timing'`. Note that it will only be applied to the scale animation since opacity's animation type will always be set to `timing` (no one wants the opacity to 'bounce' around). | String | `'timing'`
+`activeSlideAlignment` | Determine active slide's alignment relative to the carousel. Possible values are: `'start'`, `'center'` and `'end'`. **It is not recommended to use this prop in conjunction with the `layout` one.** | String | `'center'`
+`containerCustomStyle` | Optional styles for Scrollview's global wrapper | View Style Object | `{}`
+`contentContainerCustomStyle` | Optional styles for Scrollview's items container | View Style Object | `{}`
+`inactiveSlideOpacity` | Value of the opacity effect applied to inactive slides | Number | `0.7`
+`inactiveSlideScale` | Value of the 'scale' transform applied to inactive slides | Number | `0.9`
+`inactiveSlideShift` | Value of the 'translate' transform applied to inactive slides (see [#204](https://github.com/archriss/react-native-snap-carousel/issues/204) or [the "custom interpolations" doc](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/CUSTOM_INTERPOLATIONS.md) for an example usage). This prop will have no effect with layouts others than the default one. | Number | `0`
+`layout` | Define the way items are rendered and animated. Possible values are `'default'`, `'stack'` and `'tinder'`. See [this](https://github.com/archriss/react-native-snap-carousel#layouts-and-custom-interpolations) for more info and visual examples. :warning: **Setting this prop to either `'stack'` or `'tinder'` will activate `useScrollView` [to prevent rendering bugs with `FlatList`](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/CUSTOM_INTERPOLATIONS.md#caveats). Therefore, those layouts won't be suited if you have a large data set since all items are going to be rendered upfront.** | String | `'default'`
+`layoutCardOffset` | Use to increase or decrease the default card offset in both 'stack' and 'tinder' layouts. | Number | `18` for the 'stack' layout, `9` for the 'tinder' one
+`scrollInterpolator` | Used to define custom interpolations. See [the dedicated doc](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/CUSTOM_INTERPOLATIONS.md#summary). | Function | `undefined`
+`slideInterpolatedStyle` | Used to define custom interpolations. See [the dedicated doc](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/CUSTOM_INTERPOLATIONS.md#summary). | Function | `undefined`
+`slideStyle` | Optional style for each item's container (the one whose scale and opacity are animated) | Animated View Style Object | `{}`
+
+### Callbacks
+
+Prop | Description | Type | Default
+------ | ------ | ------ | ------
+`onLayout(event)` | Exposed `View` callback; invoked on mount and layout changes | Function | `undefined`
+`onScroll(event)` | Exposed `ScrollView` callback; fired while scrolling | Function | `undefined`
+`onBeforeSnapToItem(slideIndex)` | Callback fired when the new active item has been determined, before snapping to it | Function | `undefined`
+`onSnapToItem(slideIndex)` | Callback fired after snapping to an item | Function | `undefined`
+
+### Inherited props
+
+The component is built on top of the `FlatList` component, meaning it inherits from [`FlatList`](https://facebook.github.io/react-native/docs/flatlist.html), [`VirtualizedList`](https://facebook.github.io/react-native/docs/virtualizedlist.html), and [`ScrollView`](https://facebook.github.io/react-native/docs/scrollview.html).
+
+You can use almost all props from this three components, but some of them can't be overriden because it would mess with our implementation's logic.
+
+Here are a few useful props regarding carousel's **style and "feeling"**: `scrollEnabled` (if you want to disable user scrolling while still being able to use `Carousel`'s methods), `showsHorizontalScrollIndicator`, `overScrollMode` (android), `bounces` (ios), `decelerationRate` (ios), `scrollEventThrottle` (ios).
+
+And here are some useful ones for **performance optimizations and rendering**: `initialNumToRender`, `maxToRenderPerBatch`, `windowSize`, `updateCellsBatchingPeriod`, `extraData`, `removeClippedSubviews` (the latter may have bugs, as stated in [RN's doc](https://facebook.github.io/react-native/docs/flatlist.html#removeclippedsubviews)). The first three are already implemented with default parameters, but you can override them if they don't suit your needs.
+
+## Methods
+
+### Reference to the component
+
+In order to use the following methods, you need to create a reference to the carousel's instance. There are two ways of doing it.
+
+#### ref as a callback attribute (**recommended**)
+```javascript
+<Carousel
+  // other props
+  ref={(c) => { this._carousel = c; }}
+/>
+
+// methods can then be called this way
+onPress={() => { this._carousel.snapToNext(); }}
+```
+
+#### ref as a string attribute ([legacy](http://stackoverflow.com/questions/37468913/why-ref-string-is-legacy))
+```javascript
+<Carousel
+  // other props
+  ref={'carousel'}
+/>
+
+// methods can then be called this way
+onPress={() => { this.refs.carousel.snapToNext(); }}
+```
+
+### Available methods
+
+Method | Description
+------ | ------
+`startAutoplay (instantly = false)` | Start the autoplay programmatically
+`stopAutoplay ()` | Stop the autoplay programmatically
+`snapToItem (index, animated = true, fireCallback = true)` | Snap to an item programmatically
+`snapToNext (animated = true, fireCallback = true)` | Snap to next item programmatically
+`snapToPrev (animated = true, fireCallback = true)` | Snap to previous item programmatically
+`triggerRenderingHack (offset)` | Call this when needed to work around [a random `FlatList` bug](https://github.com/facebook/react-native/issues/1831) that keeps content hidden until the carousel is scrolled (see [#238](https://github.com/archriss/react-native-snap-carousel/issues/238)). Note that the `offset` parameter is not required and will default to either `1` or `-1` depending on the current scroll position.
+
+## Getters
+
+> You need a reference to the carousel's instance (see [above](#reference-to-the-component) if needed).
+
+Property | Description
+------ | ------
+`currentIndex` | Current active item (`int`, starts at 0)
+`currentScrollPosition` | Underlying `ScrollView`'s current content offset (`int`, starts at `0` if `activeSlideAlignment` is set to `start`, negative value otherwise)
diff --git a/node_modules/react-native-snap-carousel/doc/TIPS_AND_TRICKS.md b/node_modules/react-native-snap-carousel/doc/TIPS_AND_TRICKS.md
new file mode 100644
index 0000000..aa6ac3a
--- /dev/null
+++ b/node_modules/react-native-snap-carousel/doc/TIPS_AND_TRICKS.md
@@ -0,0 +1,358 @@
+# Tips and tricks
+
+## Table of contents
+
+1. [Optimizing performance](#optimizing-performance)
+1. [Momentum](#momentum)
+1. [Margin between slides](#margin-between-slides)
+1. [Carousel's stretched height](#carousels-stretched-height)
+1. [Items' dynamic height](#items-dynamic-height)
+1. [Fullscreen slides](#fullscreen-slides)
+1. [Viewport wide slides / no preview effect](#viewport-wide-slides--no-preview-effect)
+1. [Handling device rotation](#handling-device-rotation)
+1. [Native-powered animations](#native-powered-animations)
+1. [Implementing navigation](#implementing-navigation)
+1. [Implementing zooming feature](#implementing-zooming-feature)
+1. [Using a specific commit](#using-a-specific-commit)
+1. [Useful threads](#useful-threads)
+1. [Understanding styles](#understanding-styles)
+1. [Migration from version 2.x](#migration-from-version-2x)
+
+## Optimizing performance
+
+Here are a few good practices to keep in mind when dealing with the component (or any React Native list for that matter):
+
+* **Implement `shouldComponentUpdate`** (see [the `shallowCompare` addon](https://www.npmjs.com/package/react-addons-shallow-compare`)) for every carousel children (in `renderItem()`) or **make it a `PureComponent`** (some users report that `shouldComponentUpdate` is faster, but you should try both and decide for yourself).
+* Make sure the carousel **isn't a child of a `ScrollView`** (this includes `FlatList`, `VirtualizedList` and many plugins). Apparently, it would render all child components, even those currently off-screen.
+* If your data set is huge, **consider loading additional chunks of data only when the user has reached the end of the current set**. In order to do this, you'll have to play with `VirtualizedList`'s props `onEndReached` and `onEndReachedThreshold`
+* **Add [prop `removeClippedSubviews`](https://facebook.github.io/react-native/docs/scrollview.html#removeclippedsubviews)** and set it to `true` so that out-of-view items are removed from memory.
+
+Here are a few other tips given by [@pcooney10](https://github.com/pcooney10) in [this thread](https://github.com/archriss/react-native-snap-carousel/issues/247#issuecomment-360276562):
+
+- Make sure there aren't any excessive calls to `this.setState` in the component that renders the carousels and their parents.
+- Properly leverage the `initialNumToRender` and `maxToRenderPerBatch` props inherited from `FlatList`, and `windowSize` inherited from `VirtualizedList`.
+- Utilize [`InteractionManager`](https://facebook.github.io/react-native/docs/interactionmanager.html) to render the Carousels that are "below the fold".
+- Avoid using functions and object literals for props declared on components - this apparently results in "new props" during a re-render.
+
+Lastly, make sure to read [this note](https://github.com/archriss/react-native-snap-carousel#important-note-regarding-android) regarding Android and [this one](https://github.com/archriss/react-native-snap-carousel#important-note-regarding-ios) regarding iOS.
+
+## Momentum
+
+Since version `1.5.0`, the snapping effect can be based on momentum (by setting `enableMomentum` to `true`) instead of when you're releasing your finger. It means that the component will wait until the `ScrollView` isn't moving anymore to snap.
+
+By default, the inertia isn't too high on Android. However, we had to tweak the default iOS value a bit to make sure the snapping isn't delayed for too long. You can adjust this value to your needs thanks to [this prop](https://facebook.github.io/react-native/docs/scrollview.html#decelerationrate).
+
+If momentum is disabled (default behavior), make sure to play with prop `scrollEndDragDebounceValue` since it can help achieving a better snap feeling.
+
+> **We recommend setting `enableMomentum` to `false` (default) and `decelerationRate` to `'fast'` when you are displaying only one main slide** (as in the showcase above), and to use `true` and `0.9` otherwise.
+
+## Margin between slides
+If you need some **extra horizontal margin** between slides (besides the one resulting from the scale effect), you should add it as `paddingHorizontal` on slide's container.
+
+:warning: **The value of `itemWidth` must include this extra margin.**
+
+```javascript
+const horizontalMargin = 20;
+const slideWidth = 280;
+
+const sliderWidth = Dimensions.get('window').width;
+const itemWidth = slideWidth + horizontalMargin * 2;
+const itemHeight = 200;
+
+const styles = StyleSheet.create({
+    slide: {
+        width: itemWidth,
+        height: itemHeight,
+        paddingHorizontal: horizontalMargin
+        // other styles for the item container
+    },
+    slideInnerContainer: {
+        width: slideWidth,
+        flex: 1
+        // other styles for the inner container
+    }
+};
+```
+```javascript
+    _renderItem ({item, index}) {
+        return (
+            <View style={styles.slide}>
+                <View style={styles.slideInnerContainer} />
+            </View>
+        );
+    }
+
+    render () {
+        return (
+            <Carousel
+              renderItem={this._renderItem}
+              sliderWidth={sliderWidth}
+              itemWidth={itemWidth}
+            />
+        );
+    }
+```
+
+## Carousel's stretched height
+
+Since `<Carousel />` is, ultimately, based on `<ScrollView />`, it inherits [its default styles](https://github.com/facebook/react-native/blob/c38f167019a3c481847d4abc80a458f7784f1336/Libraries/Components/ScrollView/ScrollView.js#L1153-L1169) and particularly `{ flexGrow: 1 }`. This means that, by default, **the carousel container will stretch to fill up all available space**.
+
+If this is not what you're after, you can prevent this behavior by passing `{ flexGrow: 0 }` to prop `containerCustomStyle`.
+
+Alternatively, you can either use this prop to pass a custom height to the container, or wrap the carousel in a `<View />` with a fixed height.
+
+## Items' dynamic height
+
+If you want your slides to have dynamic height (e.g. to fill up the entirety of the available space), you need to transfer `{ flex: 1 }` to all the relevant wrappers. Here is a minimal example:
+
+```javascript
+_renderItem ({item, index}) {
+    return (
+        <View style={{ flex: 1 }} />
+    );
+}
+
+render () {
+    return (
+        <Carousel
+          data={this.state.data}
+          renderItem={this._renderItem}
+          containerCustomStyle={{ flex: 1 }}
+          slideStyle={{ flex: 1 }}
+        />
+    );
+}
+```
+
+## Fullscreen slides
+
+While the plugin hasn't been designed with this use case in mind, you can easily implement fullscreen slides. The following code can serve as a good starting point.
+
+```javascript
+const { width: viewportWidth, height: viewportHeight } = Dimensions.get('window');
+
+export class MyCarousel extends Component {
+
+    _renderItem ({item, index}) {
+        return (
+            <View style={{ height: viewportHeight }} /> // or { flex: 1 } for responsive height
+        );
+    }
+
+    render () {
+        return (
+            <Carousel
+              data={this.state.entries}
+              renderItem={this._renderItem}
+              sliderWidth={viewportWidth}
+              itemWidth={viewportWidth}
+              slideStyle={{ width: viewportWidth }}
+              inactiveSlideOpacity={1}
+              inactiveSlideScale={1}
+            />
+        );
+    }
+}
+```
+
+[This plugin](https://github.com/shichongrui/react-native-on-layout) can also prove useful.
+
+## Viewport wide slides / no preview effect
+
+**If you are using the plugin without the preview effect (meaning that your slides, as well as your slider, are viewport wide), we do not recommend using this plugin.**
+
+You'll be better off with [`react-native-swiper`](https://github.com/leecade/react-native-swiper) for the simple reason that it implements the `ViewPagerAndroid` component, which provides a way better overall feeling on Android, whereas we must hack our way around [the frustrating limitations of the `ScrollView` component](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/KNOWN_ISSUES.md#flatlist-and-scrollviews-limitations).
+
+## Handling device rotation
+
+Since version 2.2.0, slides will re-center properly if you update slider and/or items' dimensions when `onLayout` is fired.
+
+Here is an example of a working implementation (thanks [@andrewpope](https://github.com/archriss/react-native-snap-carousel/pull/76#issuecomment-306187425)):
+
+```
+constructor(props) {
+    super(props);
+    this.state = {
+        viewport: {
+            width: Dimensions.get('window').width,
+            height: Dimensions.get('window').height
+        }
+    };
+}
+
+render() {
+    return (
+        <View
+            onLayout={() => {
+                this.setState({
+                    viewport: {
+                        width: Dimensions.get('window').width,
+                        height: Dimensions.get('window').height
+                    }
+                });
+            }}
+        >
+            <Carousel
+                ref={c => { this.carousel = c; } }
+                sliderWidth={this.state.viewport.width}
+                itemWidth={this.state.viewport.width}
+                ...
+            />
+        </View>
+    );
+}
+```
+
+## Native-powered animations
+
+Slides' animations are based on scroll events and have been moved to the native thread in order to prevent the tiny lag associated with React Native's JavaScript bridge. This is really useful when displaying a `transform` and/or `opacity` animation that needs to follow carousel's scroll position closely. You can find more info in [this post from Facebook](https://facebook.github.io/react-native/blog/2017/02/14/using-native-driver-for-animated.html) or in [this one on Medium](https://medium.com/xebia/linking-animations-to-scroll-position-in-react-native-5c55995f5a6e).
+
+## Implementing navigation
+
+Some users had trouble implementing navigation with the carousel (see [#83](https://github.com/archriss/react-native-snap-carousel/issues/83), [#146](https://github.com/archriss/react-native-snap-carousel/issues/146) and [#212](https://github.com/archriss/react-native-snap-carousel/issues/212)) because they weren't aware of methods' context.
+
+[jordangrant](https://github.com/jordangrant) was kind enough to share [a comprehensive walkthrough](https://github.com/archriss/react-native-snap-carousel/issues/146#issuecomment-343933652) which is reproduced below. Kuddos to him!
+
+In your Carousel:
+
+```
+<Carousel
+    data={image1}
+    renderItem={this._renderItem.bind(this)}   //<------
+    sliderWidth={equalWidth2}
+    itemWidth={equalWidth5}
+  />
+```
+
+Adding the bind allows the `_renderItem` function to understand what `this` is (in `this.props.navigation`).
+
+In `_renderItem()`:
+
+```
+_renderItem ({item, index}) {
+        return (
+            <SliderEntry
+              data={item}
+              navigation={this.props.navigation}   //<-------
+            />
+        );
+    }
+```
+
+And inside `SliderEntry.js`:
+
+```
+export default class SliderEntry extends Component {
+
+    static propTypes = {
+        data: PropTypes.object.isRequired,
+    };
+
+    render () {
+        const { data: { title, subtitle, illustration}, navigation } = this.props;    //<------
+
+        return (
+          <TouchableOpacity
+            activeOpacity={1}
+            style={styles.slideInnerContainer}
+            onPress={() => navigation.navigate('Feed')}  //<------- now you can use navigation
+          >
+    }
+}
+```
+
+## Implementing zooming feature
+
+See https://github.com/archriss/react-native-snap-carousel/issues/264#issuecomment-366473756
+
+## Using a specific commit
+
+This plugin is regularly updated, and new versions are frequently pushed to `npm`. But you may want to use a specific commit, not yet merged or published.
+
+This is pretty easy: in your `package.json` file, use the GitHub link instead of a version number, and point to the specific commit using `#`. For example, if the commit reference is `fbdb671`, you would write:
+```javascript
+"react-native-snap-carousel": "https://github.com/archriss/react-native-snap-carousel#fbdb671"
+```
+
+## Useful threads
+
+Some issues stand above the others because a lot of useful information has been shared.
+
+In order to make it easier for everyone to find them, they are [tagged with an asterisk](https://github.com/archriss/react-native-snap-carousel/issues?q=is%3Aissue+label%3A%2A).
+
+## Understanding styles
+
+Here is a screenshot that should help you understand how each of the required variables is used.
+
+![react-native-snap-carousel info](https://i.imgur.com/PMi6aBd.jpg)
+
+## Migration from version 2.x
+
+Slides are no longer appended as direct children of the component since the plugin is now based on `FlatList` instead of `ScrollView`. There are two new props that takes care of their rendering: `data` and `renderItem` (both are inherited from `FlatList`).
+
+> :warning: **Make sure to read about [the recommended React Native version](https://github.com/archriss/react-native-snap-carousel/blob/master/doc/KNOWN_ISSUES.md#react-native-version) before migrating.**
+
+If you were already looping throught an array of data to populate the carousel, the migration is pretty straightforward. Just pass your slides' data to the `data` prop, convert your slides' getter to a function and pass it to the `renderItem` prop: you're good to go!
+
+**From**
+```javascript
+    get slides () {
+        return this.state.entries.map((entry, index) => {
+            return (
+                <View key={`entry-${index}`} style={styles.slide}>
+                    <Text style={styles.title}>{ entry.title }</Text>
+                </View>
+            );
+        });
+    }
+
+    render () {
+        return (
+            <Carousel
+              sliderWidth={sliderWidth}
+              itemWidth={itemWidth}
+            >
+                { this.slides }
+            </Carousel>
+        );
+    }
+```
+
+**To**
+```javascript
+    _renderItem ({item, index}) {
+        return (
+            <View style={styles.slide}>
+                <Text style={styles.title}>{ item.title }</Text>
+            </View>
+        );
+    }
+
+    render () {
+        return (
+            <Carousel
+              data={this.state.entries}
+              renderItem={this._renderItem}
+              sliderWidth={sliderWidth}
+              itemWidth={itemWidth}
+            />
+        );
+    }
+```
+
+> Note that the `key` prop is no longer needed for carousel's items. If you want to provide a custom key, you should pass your own [`keyExtractor`](https://facebook.github.io/react-native/docs/flatlist.html#keyextractor) to the `<Carousel />`.
+
+If you were previously appending random types of children, you will need to rely on a specific bit of data to return the proper element from your `renderItem` function.
+
+**Example**
+```javascript
+    _renderItem ({item, index}) {
+        if (item.type === 'text') {
+            return <Text style={styles.textSlide} />;
+        } else if (item.type === 'image') {
+            return <Image style={styles.imageSlide} />;
+        } else {
+            return <View style={styles.viewSlide} />;
+        }
+    }
+```
diff --git a/node_modules/react-native-snap-carousel/doc/VERSION_4.md b/node_modules/react-native-snap-carousel/doc/VERSION_4.md
new file mode 100644
index 0000000..eac8ec5
--- /dev/null
+++ b/node_modules/react-native-snap-carousel/doc/VERSION_4.md
@@ -0,0 +1,71 @@
+# A shiny new version is on its way!
+
+![react-native-snap-carousel mind blown](https://i.imgur.com/gdaKtSm.gif)
+
+## 💡 Why?
+
+So far, and because of [numerous React Native limitations](https://github.com/archriss/react-native-snap-carousel/issues/203), the entire plugin has basically been based on a pile of hacks and workarounds...
+
+With the most recent versions of React Native, a few interesting props have appeared and made me consider the possibility of finally rewriting the inner logic of the carousel.
+
+Don't get me wrong: we'll still have to rely on a few hacks to account for, well, Android particularly. But it was possible to get rid of most of them, and that is for the best!
+
+## ✨ Wonderful benefits
+
+Most of the heavy work is done, and here's what you can enjoy out-of-the-box:
+
+- **(Very) Smooth scrolling.** Put simply, this is night and day. Just try it for yourself and you'll see that there's just no going back!
+- **Reliable callback logic.**
+- **Optimized custom interpolations ('stack' and 'tinder' layouts for example) that can be used with a huge number of items.** Previously, you couldn't use those with a big data set as this would create performance issues. :warning: **This one is iOS-only for now** (but, given a few recent tests, we might find a way to make it work on Android).
+- **An experimental snap feature** that is promising but not yet complete (see below).
+
+## 📍 Next steps
+
+Before making it widely available, **I now need your help** 🙌
+
+The first thing you can do is test this new version and let me know how it works for you and you particular setup. For example, vertical carousels, pagination and parallax images haven't been tested yet — they are expected to work properly though.
+
+### How to test?
+
+- You can find the already published beta versions by running: `npm view react-native-snap-carousel versions --json`
+- [Follow this PR closely](https://github.com/archriss/react-native-snap-carousel/pull/678). **This is where the discussion will take place.**
+- And if you like to live on the edge, [try the latest commits](https://stackoverflow.com/a/27630247/) of that same PR ;-)
+
+### 🦸‍♀️🦸‍♂️ Get your hands dirty!
+
+Then, **if you want to jump in**, I'd be glad if you could help me with the following:
+
+1. **Reducing the number of rerenders** (see [#478](https://github.com/archriss/react-native-snap-carousel/issues/478)). [`why-did-you-render`](https://github.com/welldone-software/why-did-you-render) is going to prove really helpful for that.
+2. **Finding a way to make the experimental snap feature work even with the last items** (see "New props" below for more details on this feature).
+
+Let's finish that together and make sure this plugin remains absolutely awesome!
+
+Cheers,
+[bd-arc](https://github.com/bd-arc)
+
+---
+
+## 📚 New, updated and removed props
+
+### New props
+
+Prop | Description | Type | Default
+------ | ------ | ------ | ------
+✅ **`useExperimentalSnap`** | By default, items will always be centered according to the `activeSlideAlignment` prop. A sometimes unwanted result of this is the addition of empty spaces at the end/beginning of the carousel. Since version 4, it is possible to use another centering option that will avoid white spaces. :warning: **If you set it to `true`, some items might not be "reachable" — i.e. for the last item(s), the snap callbacks won't be triggered and the animations won't be complete.** We recommend activate it only if you don't rely on `onSnapToItem` and if both `inactiveSlideScale` and `inactiveSlideOpacity` are set to `1`. A side benefit of activating it is **the ability to slide only one item at a time** when setting the inherited prop `disableIntervalMomentum` to `true`. | Boolean | `false`
+✅ **`onScrollIndexChanged(slideIndex)`** | Executed as soon as the active index changes during scroll (whereas `onSnapToItem` is executed only for the last active item). :warning: **Avoid doing heavy calculations or rendering here!** | Function | `undefined`
+
+### Updated props
+
+Prop | Description | Type | Default
+------ | ------ | ------ | ------
+✅ **`renderItem({ item, index, dataIndex })`** | `renderItem()` now receives a **`dataIndex` param** that will represent the index based on your data set and not on the actual number of items — the two numbers won't match for looped carousels. This is useful if you need to pass to the item something based on your data rather than on the inner index. | Function | **Required**
+
+### Removed props
+
+- ❌ `activeAnimationOptions`
+- ❌ `activeAnimationType`
+- ❌ `enableMomentum`
+- ❌ `lockScrollTimeoutDuration`
+- ❌ `lockScrollWhileSnapping`
+- ❌ `onBeforeSnapToItem`
+- ❌ `swipeThreshold`
\ No newline at end of file
diff --git a/node_modules/react-native-snap-carousel/index.js b/node_modules/react-native-snap-carousel/index.js
deleted file mode 100644
index 48754c2..0000000
--- a/node_modules/react-native-snap-carousel/index.js
+++ /dev/null
@@ -1,475 +0,0 @@
-import React, { Component, PropTypes } from 'react';
-import { ScrollView, Animated, Platform, Easing } from 'react-native';
-import shallowCompare from 'react-addons-shallow-compare';
-
-export default class Carousel extends Component {
-
-    static propTypes = {
-        ...ScrollView.propTypes,
-        /**
-         * Supply items to loop on
-         */
-        items: PropTypes.array.isRequired,
-        /**
-         * Width in pixels of your slider according
-         * to your styles
-         */
-        sliderWidth: PropTypes.number.isRequired,
-        /**
-         * Width in pixels of your elements
-         */
-        itemWidth: PropTypes.number.isRequired,
-        /**
-         * Function returning a react element. The entry
-         * data is the 1st parameter, its index is the 2nd
-         */
-        renderItem: PropTypes.func.isRequired,
-        /**
-         * Style of each item's container
-         */
-        slideStyle: Animated.View.propTypes.style,
-        /**
-         * whether to implement a `shouldComponentUpdate`
-         * strategy to minimize updates
-         */
-        shouldOptimizeUpdates: PropTypes.bool,
-        /**
-        * Global wrapper's style
-        */
-        containerCustomStyle: Animated.View.propTypes.style,
-        /**
-        * Content container's style
-        */
-        contentContainerCustomStyle: Animated.View.propTypes.style,
-        /**
-         * Delta x when swiping to trigger the snap
-         */
-        swipeThreshold: PropTypes.number,
-        /**
-         * Animated animation to use. Provide the name
-         * of the method, defaults to timing
-         */
-        animationFunc: PropTypes.string,
-        /**
-         * Animation options to be merged with the
-         * default ones. Can be used w/ animationFunc
-         */
-        animationOptions: PropTypes.object,
-        /**
-         * Scale factor of the inactive slides
-         */
-        inactiveSlideScale: PropTypes.number,
-        /**
-         * Opacity value of the inactive slides
-         */
-        inactiveSlideOpacity: PropTypes.number,
-        /**
-         * Index of the first item to display
-         */
-        firstItem: PropTypes.number,
-        /**
-         * Trigger autoplay
-         */
-        autoplay: PropTypes.bool,
-        /**
-         * Delay until navigating to the next item
-         */
-        autoplayInterval: PropTypes.number,
-        /**
-         * Delay before enabling autoplay on startup and
-         * after releasing the touch
-         */
-        autoplayDelay: PropTypes.number,
-        /**
-         * If enabled, releasing the touch will scroll
-         * to the center of the nearest/active item
-         */
-        enableSnap: PropTypes.bool,
-        /**
-         * If enabled, snapping will be triggered once
-         * the ScrollView stops moving, not when the
-         * user releases his finger
-        */
-        enableMomentum: PropTypes.bool,
-        /**
-         * Snapping on android is kinda choppy, especially
-         * when swiping quickly so you can disable it
-         */
-        snapOnAndroid: PropTypes.bool,
-        /**
-         * Fired when snapping to an item
-         */
-        onSnapToItem: PropTypes.func
-    };
-
-    static defaultProps = {
-        shouldOptimizeUpdates: true,
-        autoplay: false,
-        autoplayInterval: 3000,
-        autoplayDelay: 5000,
-        firstItem: 0,
-        enableSnap: true,
-        enableMomentum: true,
-        snapOnAndroid: false,
-        swipeThreshold: 20,
-        animationFunc: 'timing',
-        animationOptions: {
-            easing: Easing.elastic(1)
-        },
-        slideStyle: {},
-        containerCustomStyle: null,
-        contentContainerCustomStyle: null,
-        inactiveSlideScale: 0.9,
-        inactiveSlideOpacity: 1
-    }
-
-    constructor (props) {
-        super(props);
-        this.state = {
-            activeItem: props.firstItem
-        };
-        this._positions = [];
-        this._calcCardPositions(props);
-        this._onTouchStart = this._onTouchStart.bind(this);
-        this._onScroll = this._onScroll.bind(this);
-        this._onScrollEnd = this._snapEnabled ? this._onScrollEnd.bind(this) : false;
-        this._onScrollBegin = this._snapEnabled ? this._onScrollBegin.bind(this) : false;
-        this._initInterpolators = this._initInterpolators.bind(this);
-        this._onTouchRelease = this._onTouchRelease.bind(this);
-        // This bool aims at fixing an iOS bug due to scrolTo that triggers onMomentumScrollEnd.
-        // onMomentumScrollEnd fires this._snapScroll, thus creating an infinite loop.
-        this._ignoreNextMomentum = false;
-    }
-
-    componentDidMount () {
-        const { firstItem, autoplay } = this.props;
-
-        this._initInterpolators(this.props);
-        setTimeout(() => {
-            this.snapToItem(firstItem, false, false, true);
-        }, 0);
-        if (autoplay) {
-            this.startAutoplay();
-        }
-    }
-
-    shouldComponentUpdate (nextProps, nextState) {
-        if (this.props.shouldOptimizeUpdates === false) {
-            return true;
-        } else {
-            return shallowCompare(this, nextProps, nextState);
-        }
-    }
-
-    componentWillReceiveProps (nextProps) {
-        const { items, firstItem } = nextProps;
-
-        if (items.length !== this.props.items.length) {
-            this._positions = [];
-            this._calcCardPositions(nextProps);
-            this._initInterpolators(nextProps);
-            this.setState({ activeItem: firstItem });
-        }
-    }
-
-    componentWillUnmount () {
-        this.stopAutoplay();
-    }
-
-    get _snapEnabled () {
-        const { enableSnap, snapOnAndroid } = this.props;
-
-        return enableSnap && (Platform.OS === 'ios' || snapOnAndroid);
-    }
-
-    get _nextItem () {
-        const { activeItem } = this.state;
-
-        return this._positions[activeItem + 1] ? activeItem + 1 : 0;
-    }
-
-    _calcCardPositions (props = this.props) {
-        const { items, itemWidth } = props;
-
-        items.forEach((item, index) => {
-            this._positions[index] = {
-                start: index * itemWidth
-            };
-            this._positions[index].end = this._positions[index].start + itemWidth;
-        });
-    }
-
-    _initInterpolators (props = this.props) {
-        const { items, firstItem } = props;
-        let interpolators = [];
-
-        items.forEach((item, index) => {
-            interpolators.push(new Animated.Value(index === firstItem ? 1 : 0));
-        });
-        this.setState({ interpolators });
-    }
-
-    _getActiveItem (centerX, offset = 25) {
-        for (let i = 0; i < this._positions.length; i++) {
-            const { start, end } = this._positions[i];
-            if (centerX + offset >= start && centerX - offset <= end) {
-                return i;
-            }
-        }
-        return 0;
-    }
-
-    _getCenterX (event) {
-        const { sliderWidth, itemWidth } = this.props;
-        const containerSideMargin = (sliderWidth - itemWidth) / 2;
-
-        return event.nativeEvent.contentOffset.x + sliderWidth / 2 - containerSideMargin;
-    }
-
-    _onScroll (event) {
-        const { animationFunc, animationOptions, enableMomentum } = this.props;
-        const { activeItem } = this.state;
-        const newActiveItem = this._getActiveItem(this._getCenterX(event));
-
-        if (enableMomentum) {
-            clearTimeout(this._snapNoMomentumTimeout);
-        }
-
-        if (activeItem !== newActiveItem) {
-            Animated[animationFunc](
-                this.state.interpolators[activeItem],
-                { ...animationOptions, toValue: 0 }
-            ).start();
-            this.setState({ activeItem: newActiveItem });
-            Animated[animationFunc](
-                this.state.interpolators[newActiveItem],
-                { ...animationOptions, toValue: 1 }
-            ).start();
-        }
-    }
-
-    _onTouchStart () {
-        if (this._autoplaying) {
-            this.stopAutoplay();
-        }
-    }
-
-    _onScrollBegin (event) {
-        this._scrollStartX = event.nativeEvent.contentOffset.x;
-        this._scrollStartActive = this.state.activeItem;
-        this._ignoreNextMomentum = false;
-    }
-
-    _onScrollEnd (event) {
-        const { autoplayDelay, autoplay } = this.props;
-
-        if (this._ignoreNextMomentum) {
-            // iOS fix
-            this._ignoreNextMomentum = false;
-            return;
-        }
-        this._scrollEndX = event.nativeEvent.contentOffset.x;
-        this._scrollEndActive = this.state.activeItem;
-
-        const deltaX = this._scrollEndX - this._scrollStartX;
-
-        if (this._snapEnabled) {
-            this._snapScroll(deltaX);
-        }
-
-        if (autoplay) {
-            // Restart autoplay after a little while
-            // This could be done when releasing touch
-            // but the event is buggy on Android...
-            clearTimeout(this._enableAutoplayTimeout);
-            this._enableAutoplayTimeout =
-                setTimeout(() => {
-                    this.startAutoplay(true);
-                }, autoplayDelay + 1000);
-        }
-    }
-
-    // Due to a bug, this event is only fired on iOS
-    // https://github.com/facebook/react-native/issues/6791
-    // it's fine since we're only fixing an iOS bug in it, so ...
-    _onTouchRelease (event) {
-        const { enableMomentum } = this.props;
-
-        if (enableMomentum && Platform.OS === 'ios') {
-            this._snapNoMomentumTimeout =
-                setTimeout(() => {
-                    this._snapScroll(0);
-                }, 100);
-        }
-    }
-
-    _snapScroll (deltaX) {
-        const { swipeThreshold } = this.props;
-
-        // When using momentum and releasing the touch with
-        // no velocity, scrollEndActive will be undefined (iOS)
-        if (!this._scrollEndActive && Platform.OS === 'ios') {
-            this._scrollEndActive = this._scrollStartActive;
-        }
-
-        if (this._scrollStartActive !== this._scrollEndActive) {
-            // Snap to the new active item
-            this.snapToItem(this._scrollEndActive);
-        } else {
-            // Snap depending on delta
-            if (deltaX > 0) {
-                if (deltaX > swipeThreshold) {
-                    this.snapToItem(this._scrollStartActive + 1);
-                } else {
-                    this.snapToItem(this._scrollEndActive);
-                }
-            } else if (deltaX < 0) {
-                if (deltaX < -swipeThreshold) {
-                    this.snapToItem(this._scrollStartActive - 1);
-                } else {
-                    this.snapToItem(this._scrollEndActive);
-                }
-            } else {
-                // Snap to current
-                this.snapToItem(this._scrollEndActive);
-            }
-        }
-    }
-
-    get items () {
-        const { items, renderItem, slideStyle, inactiveSlideScale, inactiveSlideOpacity } = this.props;
-        if (!this.state.interpolators || !this.state.interpolators.length) {
-            return false;
-        }
-
-        return items.map((entry, index) => {
-            const animatedValue = this.state.interpolators[index];
-            return (
-                <Animated.View
-                  key={`carousel-item-${index}`}
-                  style={[
-                      slideStyle,
-                      {transform: [{
-                          scale: animatedValue.interpolate({
-                              inputRange: [0, 1],
-                              outputRange: [inactiveSlideScale, 1]
-                          })
-                      }],
-                          opacity: animatedValue.interpolate({
-                              inputRange: [0, 1],
-                              outputRange: [inactiveSlideOpacity, 1]
-                          })
-                      }
-                  ]}>
-                    { renderItem(entry, index) }
-                </Animated.View>
-            );
-        });
-    }
-
-    get currentIndex () {
-        return this.state.activeItem;
-    }
-
-    startAutoplay (instantly = false) {
-        const { autoplayInterval, autoplayDelay } = this.props;
-
-        if (this._autoplaying) {
-            return;
-        }
-
-        setTimeout(() => {
-            this._autoplaying = true;
-            this._autoplayInterval =
-                setInterval(() => {
-                    if (this._autoplaying) {
-                        this.snapToItem(this._nextItem);
-                    }
-                }, autoplayInterval);
-        }, instantly ? 0 : autoplayDelay);
-    }
-
-    stopAutoplay () {
-        this._autoplaying = false;
-        clearInterval(this._autoplayInterval);
-    }
-
-    snapToItem (index, animated = true, fireCallback = true, initial = false) {
-        const itemsLength = this._positions.length;
-
-        if (index >= itemsLength) {
-            index = itemsLength - 1;
-            fireCallback = false;
-        } else if (index < 0) {
-            index = 0;
-            fireCallback = false;
-        }
-
-        const snapX = this._positions[index].start;
-
-        // Make sure the component hasn't been unmounted
-        if (this.refs.scrollview) {
-            this.refs.scrollview.scrollTo({x: snapX, y: 0, animated});
-            this.props.onSnapToItem && fireCallback && this.props.onSnapToItem(index, this.props.items[index]);
-
-            // iOS fix, check the note in the constructor
-            if (!initial && Platform.OS === 'ios') {
-                this._ignoreNextMomentum = true;
-            }
-        }
-    }
-
-    snapToNext (animated = true) {
-        const itemsLength = this._positions.length;
-
-        let newIndex = this.currentIndex + 1;
-        if (newIndex > itemsLength - 1) {
-            newIndex = 0;
-        }
-        this.snapToItem(newIndex, animated);
-    }
-
-    snapToPrev (animated = true) {
-        const itemsLength = this._positions.length;
-
-        let newIndex = this.currentIndex - 1;
-        if (newIndex < 0) {
-            newIndex = itemsLength - 1;
-        }
-        this.snapToItem(newIndex, animated);
-    }
-
-    render () {
-        const { sliderWidth, itemWidth, containerCustomStyle, contentContainerCustomStyle, enableMomentum } = this.props;
-
-        const containerSideMargin = (sliderWidth - itemWidth) / 2;
-        const style = [
-            { paddingHorizontal: Platform.OS === 'ios' ? containerSideMargin : 0 },
-            containerCustomStyle || {}
-        ];
-        const contentContainerStyle = [
-            { paddingHorizontal: Platform.OS === 'android' ? containerSideMargin : 0 },
-            contentContainerCustomStyle || {}
-        ];
-
-        return (
-            <ScrollView
-              decelerationRate={0.9}
-              style={style}
-              contentContainerStyle={contentContainerStyle}
-              ref={'scrollview'}
-              horizontal={true}
-              onScrollBeginDrag={this._onScrollBegin}
-              onMomentumScrollEnd={enableMomentum ? this._onScrollEnd : undefined}
-              onScrollEndDrag={!enableMomentum ? this._onScrollEnd : undefined}
-              onResponderRelease={this._onTouchRelease}
-              onScroll={this._onScroll}
-              onTouchStart={this._onTouchStart}
-              scrollEventThrottle={50}
-              {...this.props}
-              >
-                { this.items }
-            </ScrollView>
-        );
-    }
-}
diff --git a/node_modules/react-native-snap-carousel/src/carousel/Carousel.js b/node_modules/react-native-snap-carousel/src/carousel/Carousel.js
new file mode 100644
index 0000000..ac5bb14
--- /dev/null
+++ b/node_modules/react-native-snap-carousel/src/carousel/Carousel.js
@@ -0,0 +1,1372 @@
+import React, { Component } from 'react';
+import { Animated, Easing, FlatList, I18nManager, Platform, ScrollView, View } from 'react-native';
+import PropTypes from 'prop-types';
+import { ViewPropTypes } from 'deprecated-react-native-prop-types';
+import shallowCompare from 'react-addons-shallow-compare';
+import {
+    defaultScrollInterpolator,
+    stackScrollInterpolator,
+    tinderScrollInterpolator,
+    defaultAnimatedStyles,
+    shiftAnimatedStyles,
+    stackAnimatedStyles,
+    tinderAnimatedStyles
+} from '../utils/animations';
+
+const IS_IOS = Platform.OS === 'ios';
+
+// Native driver for scroll events
+// See: https://facebook.github.io/react-native/blog/2017/02/14/using-native-driver-for-animated.html
+const AnimatedFlatList = FlatList ? Animated.createAnimatedComponent(FlatList) : null;
+const AnimatedScrollView = Animated.createAnimatedComponent(ScrollView);
+
+// React Native automatically handles RTL layouts; unfortunately, it's buggy with horizontal ScrollView
+// See https://github.com/facebook/react-native/issues/11960
+// NOTE: the following variable is not declared in the constructor
+// otherwise it is undefined at init, which messes with custom indexes
+const IS_RTL = I18nManager.isRTL;
+
+export default class Carousel extends Component {
+
+    static propTypes = {
+        data: PropTypes.array.isRequired,
+        renderItem: PropTypes.func.isRequired,
+        itemWidth: PropTypes.number, // required for horizontal carousel
+        itemHeight: PropTypes.number, // required for vertical carousel
+        sliderWidth: PropTypes.number, // required for horizontal carousel
+        sliderHeight: PropTypes.number, // required for vertical carousel
+        activeAnimationType: PropTypes.string,
+        activeAnimationOptions: PropTypes.object,
+        activeSlideAlignment: PropTypes.oneOf(['center', 'end', 'start']),
+        activeSlideOffset: PropTypes.number,
+        apparitionDelay: PropTypes.number,
+        autoplay: PropTypes.bool,
+        autoplayDelay: PropTypes.number,
+        autoplayInterval: PropTypes.number,
+        callbackOffsetMargin: PropTypes.number,
+        containerCustomStyle: ViewPropTypes ? ViewPropTypes.style : View.propTypes.style,
+        contentContainerCustomStyle: ViewPropTypes ? ViewPropTypes.style : View.propTypes.style,
+        enableMomentum: PropTypes.bool,
+        enableSnap: PropTypes.bool,
+        firstItem: PropTypes.number,
+        hasParallaxImages: PropTypes.bool,
+        inactiveSlideOpacity: PropTypes.number,
+        inactiveSlideScale: PropTypes.number,
+        inactiveSlideShift: PropTypes.number,
+        layout: PropTypes.oneOf(['default', 'stack', 'tinder']),
+        layoutCardOffset: PropTypes.number,
+        lockScrollTimeoutDuration: PropTypes.number,
+        lockScrollWhileSnapping: PropTypes.bool,
+        loop: PropTypes.bool,
+        loopClonesPerSide: PropTypes.number,
+        scrollEnabled: PropTypes.bool,
+        scrollInterpolator: PropTypes.func,
+        slideInterpolatedStyle: PropTypes.func,
+        slideStyle: ViewPropTypes ? ViewPropTypes.style : View.propTypes.style,
+        shouldOptimizeUpdates: PropTypes.bool,
+        swipeThreshold: PropTypes.number,
+        useScrollView: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
+        vertical: PropTypes.bool,
+        onBeforeSnapToItem: PropTypes.func,
+        onSnapToItem: PropTypes.func
+    };
+
+    static defaultProps = {
+        activeAnimationType: 'timing',
+        activeAnimationOptions: null,
+        activeSlideAlignment: 'center',
+        activeSlideOffset: 20,
+        apparitionDelay: 0,
+        autoplay: false,
+        autoplayDelay: 1000,
+        autoplayInterval: 3000,
+        callbackOffsetMargin: 5,
+        containerCustomStyle: {},
+        contentContainerCustomStyle: {},
+        enableMomentum: false,
+        enableSnap: true,
+        firstItem: 0,
+        hasParallaxImages: false,
+        inactiveSlideOpacity: 0.7,
+        inactiveSlideScale: 0.9,
+        inactiveSlideShift: 0,
+        layout: 'default',
+        lockScrollTimeoutDuration: 1000,
+        lockScrollWhileSnapping: false,
+        loop: false,
+        loopClonesPerSide: 3,
+        scrollEnabled: true,
+        slideStyle: {},
+        shouldOptimizeUpdates: true,
+        swipeThreshold: 20,
+        useScrollView: !AnimatedFlatList,
+        vertical: false
+    }
+
+    constructor (props) {
+        super(props);
+
+        this.state = {
+            hideCarousel: true,
+            interpolators: []
+        };
+
+        // The following values are not stored in the state because 'setState()' is asynchronous
+        // and this results in an absolutely crappy behavior on Android while swiping (see #156)
+        const initialActiveItem = this._getFirstItem(props.firstItem);
+        this._activeItem = initialActiveItem;
+        this._previousActiveItem = initialActiveItem;
+        this._previousFirstItem = initialActiveItem;
+        this._previousItemsLength = initialActiveItem;
+
+        this._mounted = false;
+        this._positions = [];
+        this._currentContentOffset = 0; // store ScrollView's scroll position
+        this._canFireBeforeCallback = false;
+        this._canFireCallback = false;
+        this._scrollOffsetRef = null;
+        this._onScrollTriggered = true; // used when momentum is enabled to prevent an issue with edges items
+        this._lastScrollDate = 0; // used to work around a FlatList bug
+        this._scrollEnabled = props.scrollEnabled !== false;
+
+        this._initPositionsAndInterpolators = this._initPositionsAndInterpolators.bind(this);
+        this._renderItem = this._renderItem.bind(this);
+        this._onSnap = this._onSnap.bind(this);
+
+        this._onLayout = this._onLayout.bind(this);
+        this._onScroll = this._onScroll.bind(this);
+        this._onScrollBeginDrag = props.enableSnap ? this._onScrollBeginDrag.bind(this) : undefined;
+        this._onScrollEnd = props.enableSnap || props.autoplay ? this._onScrollEnd.bind(this) : undefined;
+        this._onScrollEndDrag = !props.enableMomentum ? this._onScrollEndDrag.bind(this) : undefined;
+        this._onMomentumScrollEnd = props.enableMomentum ? this._onMomentumScrollEnd.bind(this) : undefined;
+        this._onTouchStart = this._onTouchStart.bind(this);
+        this._onTouchEnd = this._onTouchEnd.bind(this);
+        this._onTouchRelease = this._onTouchRelease.bind(this);
+
+        this._getKeyExtractor = this._getKeyExtractor.bind(this);
+
+        this._setScrollHandler(props);
+
+        // This bool aims at fixing an iOS bug due to scrollTo that triggers onMomentumScrollEnd.
+        // onMomentumScrollEnd fires this._snapScroll, thus creating an infinite loop.
+        this._ignoreNextMomentum = false;
+
+        // Warnings
+        if (!ViewPropTypes) {
+            console.warn('react-native-snap-carousel: It is recommended to use at least version 0.44 of React Native with the plugin');
+        }
+        if (!props.vertical && (!props.sliderWidth || !props.itemWidth)) {
+            console.error('react-native-snap-carousel: You need to specify both `sliderWidth` and `itemWidth` for horizontal carousels');
+        }
+        if (props.vertical && (!props.sliderHeight || !props.itemHeight)) {
+            console.error('react-native-snap-carousel: You need to specify both `sliderHeight` and `itemHeight` for vertical carousels');
+        }
+        if (props.apparitionDelay && !IS_IOS && !props.useScrollView) {
+            console.warn('react-native-snap-carousel: Using `apparitionDelay` on Android is not recommended since it can lead to rendering issues');
+        }
+        if (props.customAnimationType || props.customAnimationOptions) {
+            console.warn('react-native-snap-carousel: Props `customAnimationType` and `customAnimationOptions` have been renamed to `activeAnimationType` and `activeAnimationOptions`');
+        }
+        if (props.onScrollViewScroll) {
+            console.error('react-native-snap-carousel: Prop `onScrollViewScroll` has been removed. Use `onScroll` instead');
+        }
+    }
+
+    componentDidMount () {
+        const { apparitionDelay, autoplay, firstItem } = this.props;
+        const _firstItem = this._getFirstItem(firstItem);
+        const apparitionCallback = () => {
+            this.setState({ hideCarousel: false });
+            if (autoplay) {
+                this.startAutoplay();
+            }
+        };
+
+        this._mounted = true;
+        this._initPositionsAndInterpolators();
+
+        // Without 'requestAnimationFrame' or a `0` timeout, images will randomly not be rendered on Android...
+        requestAnimationFrame(() => {
+            if (!this._mounted) {
+                return;
+            }
+
+            this._snapToItem(_firstItem, false, false, true, false);
+            this._hackActiveSlideAnimation(_firstItem, 'start', true);
+
+            if (apparitionDelay) {
+                this._apparitionTimeout = setTimeout(() => {
+                    apparitionCallback();
+                }, apparitionDelay);
+            } else {
+                apparitionCallback();
+            }
+        });
+    }
+
+    shouldComponentUpdate (nextProps, nextState) {
+        if (this.props.shouldOptimizeUpdates === false) {
+            return true;
+        } else {
+            return shallowCompare(this, nextProps, nextState);
+        }
+    }
+
+    componentDidUpdate (prevProps) {
+        const { interpolators } = this.state;
+        const { firstItem, itemHeight, itemWidth, scrollEnabled, sliderHeight, sliderWidth } = this.props;
+        const itemsLength = this._getCustomDataLength(this.props);
+
+        if (!itemsLength) {
+            return;
+        }
+
+        const nextFirstItem = this._getFirstItem(firstItem, this.props);
+        let nextActiveItem = this._activeItem || this._activeItem === 0 ? this._activeItem : nextFirstItem;
+
+        const hasNewSliderWidth = sliderWidth && sliderWidth !== prevProps.sliderWidth;
+        const hasNewSliderHeight = sliderHeight && sliderHeight !== prevProps.sliderHeight;
+        const hasNewItemWidth = itemWidth && itemWidth !== prevProps.itemWidth;
+        const hasNewItemHeight = itemHeight && itemHeight !== prevProps.itemHeight;
+        const hasNewScrollEnabled = scrollEnabled !== prevProps.scrollEnabled;
+
+        // Prevent issues with dynamically removed items
+        if (nextActiveItem > itemsLength - 1) {
+            nextActiveItem = itemsLength - 1;
+        }
+
+        // Handle changing scrollEnabled independent of user -> carousel interaction
+        if (hasNewScrollEnabled) {
+            this._setScrollEnabled(scrollEnabled);
+        }
+
+        if (interpolators.length !== itemsLength || hasNewSliderWidth ||
+            hasNewSliderHeight || hasNewItemWidth || hasNewItemHeight) {
+            this._activeItem = nextActiveItem;
+            this._previousItemsLength = itemsLength;
+
+            this._initPositionsAndInterpolators(this.props);
+
+            // Handle scroll issue when dynamically removing items (see #133)
+            // This also fixes first item's active state on Android
+            // Because 'initialScrollIndex' apparently doesn't trigger scroll
+            if (this._previousItemsLength > itemsLength) {
+                this._hackActiveSlideAnimation(nextActiveItem, null, true);
+            }
+
+            if (hasNewSliderWidth || hasNewSliderHeight || hasNewItemWidth || hasNewItemHeight) {
+                this._snapToItem(nextActiveItem, false, false, false, false);
+            }
+        } else if (nextFirstItem !== this._previousFirstItem && nextFirstItem !== this._activeItem) {
+            this._activeItem = nextFirstItem;
+            this._previousFirstItem = nextFirstItem;
+            this._snapToItem(nextFirstItem, false, true, false, false);
+        }
+
+        if (this.props.onScroll !== prevProps.onScroll) {
+          this._setScrollHandler(this.props);
+        }
+    }
+
+    componentWillUnmount () {
+        this._mounted = false;
+        this.stopAutoplay();
+        clearTimeout(this._apparitionTimeout);
+        clearTimeout(this._hackSlideAnimationTimeout);
+        clearTimeout(this._enableAutoplayTimeout);
+        clearTimeout(this._autoplayTimeout);
+        clearTimeout(this._snapNoMomentumTimeout);
+        clearTimeout(this._edgeItemTimeout);
+        clearTimeout(this._lockScrollTimeout);
+    }
+
+    get realIndex () {
+        return this._activeItem;
+    }
+
+    get currentIndex () {
+        return this._getDataIndex(this._activeItem);
+    }
+
+    get currentScrollPosition () {
+        return this._currentContentOffset;
+    }
+
+    _setScrollHandler(props) {
+      // Native driver for scroll events
+      const scrollEventConfig = {
+        listener: this._onScroll,
+        useNativeDriver: true,
+      };
+      this._scrollPos = new Animated.Value(0);
+      const argMapping = props.vertical
+        ? [{ nativeEvent: { contentOffset: { y: this._scrollPos } } }]
+        : [{ nativeEvent: { contentOffset: { x: this._scrollPos } } }];
+
+      if (props.onScroll && Array.isArray(props.onScroll._argMapping)) {
+        // Because of a react-native issue https://github.com/facebook/react-native/issues/13294
+        argMapping.pop();
+        const [ argMap ] = props.onScroll._argMapping;
+        if (argMap && argMap.nativeEvent && argMap.nativeEvent.contentOffset) {
+          // Shares the same animated value passed in props
+          this._scrollPos =
+            argMap.nativeEvent.contentOffset.x ||
+            argMap.nativeEvent.contentOffset.y ||
+            this._scrollPos;
+        }
+        argMapping.push(...props.onScroll._argMapping);
+      }
+      this._onScrollHandler = Animated.event(
+        argMapping,
+        scrollEventConfig
+      );
+    }
+
+    _needsScrollView () {
+        const { useScrollView } = this.props;
+        return useScrollView || !AnimatedFlatList || this._shouldUseStackLayout() || this._shouldUseTinderLayout();
+    }
+
+    _needsRTLAdaptations () {
+        const { vertical } = this.props;
+        return IS_RTL && !IS_IOS && !vertical;
+    }
+
+    _canLockScroll () {
+        const { scrollEnabled, enableMomentum, lockScrollWhileSnapping } = this.props;
+        return scrollEnabled && !enableMomentum && lockScrollWhileSnapping;
+    }
+
+    _enableLoop () {
+        const { data, enableSnap, loop } = this.props;
+        return enableSnap && loop && data && data.length && data.length > 1;
+    }
+
+    _shouldAnimateSlides (props = this.props) {
+        const { inactiveSlideOpacity, inactiveSlideScale, scrollInterpolator, slideInterpolatedStyle } = props;
+        return inactiveSlideOpacity < 1 ||
+            inactiveSlideScale < 1 ||
+            !!scrollInterpolator ||
+            !!slideInterpolatedStyle ||
+            this._shouldUseShiftLayout() ||
+            this._shouldUseStackLayout() ||
+            this._shouldUseTinderLayout();
+    }
+
+    _shouldUseCustomAnimation () {
+        const { activeAnimationOptions } = this.props;
+        return !!activeAnimationOptions && !this._shouldUseStackLayout() && !this._shouldUseTinderLayout();
+    }
+
+    _shouldUseShiftLayout () {
+        const { inactiveSlideShift, layout } = this.props;
+        return layout === 'default' && inactiveSlideShift !== 0;
+    }
+
+    _shouldUseStackLayout () {
+        return this.props.layout === 'stack';
+    }
+
+    _shouldUseTinderLayout () {
+        return this.props.layout === 'tinder';
+    }
+
+    _getCustomData (props = this.props) {
+        const { data, loopClonesPerSide } = props;
+        const dataLength = data && data.length;
+
+        if (!dataLength) {
+            return [];
+        }
+
+        if (!this._enableLoop()) {
+            return data;
+        }
+
+        let previousItems = [];
+        let nextItems = [];
+
+        if (loopClonesPerSide > dataLength) {
+            const dataMultiplier = Math.floor(loopClonesPerSide / dataLength);
+            const remainder = loopClonesPerSide % dataLength;
+
+            for (let i = 0; i < dataMultiplier; i++) {
+                previousItems.push(...data);
+                nextItems.push(...data);
+            }
+
+            previousItems.unshift(...data.slice(-remainder));
+            nextItems.push(...data.slice(0, remainder));
+        } else {
+            previousItems = data.slice(-loopClonesPerSide);
+            nextItems = data.slice(0, loopClonesPerSide);
+        }
+
+        return previousItems.concat(data, nextItems);
+    }
+
+    _getCustomDataLength (props = this.props) {
+        const { data, loopClonesPerSide } = props;
+        const dataLength = data && data.length;
+
+        if (!dataLength) {
+            return 0;
+        }
+
+        return this._enableLoop() ? dataLength + (2 * loopClonesPerSide) : dataLength;
+    }
+
+    _getCustomIndex (index, props = this.props) {
+        const itemsLength = this._getCustomDataLength(props);
+
+        if (!itemsLength || (!index && index !== 0)) {
+            return 0;
+        }
+
+        return this._needsRTLAdaptations() ? itemsLength - index - 1 : index;
+    }
+
+    _getDataIndex (index) {
+        const { data, loopClonesPerSide } = this.props;
+        const dataLength = data && data.length;
+
+        if (!this._enableLoop() || !dataLength) {
+            return index;
+        }
+
+        if (index >= dataLength + loopClonesPerSide) {
+            return loopClonesPerSide > dataLength ?
+                (index - loopClonesPerSide) % dataLength :
+                index - dataLength - loopClonesPerSide;
+        } else if (index < loopClonesPerSide) {
+            // TODO: is there a simpler way of determining the interpolated index?
+            if (loopClonesPerSide > dataLength) {
+                const baseDataIndexes = [];
+                const dataIndexes = [];
+                const dataMultiplier = Math.floor(loopClonesPerSide / dataLength);
+                const remainder = loopClonesPerSide % dataLength;
+
+                for (let i = 0; i < dataLength; i++) {
+                    baseDataIndexes.push(i);
+                }
+
+                for (let j = 0; j < dataMultiplier; j++) {
+                    dataIndexes.push(...baseDataIndexes);
+                }
+
+                dataIndexes.unshift(...baseDataIndexes.slice(-remainder));
+                return dataIndexes[index];
+            } else {
+                return index + dataLength - loopClonesPerSide;
+            }
+        } else {
+            return index - loopClonesPerSide;
+        }
+    }
+
+    // Used with `snapToItem()` and 'PaginationDot'
+    _getPositionIndex (index) {
+        const { loop, loopClonesPerSide } = this.props;
+        return loop ? index + loopClonesPerSide : index;
+    }
+
+    _getFirstItem (index, props = this.props) {
+        const { loopClonesPerSide } = props;
+        const itemsLength = this._getCustomDataLength(props);
+
+        if (!itemsLength || index > itemsLength - 1 || index < 0) {
+            return 0;
+        }
+
+        return this._enableLoop() ? index + loopClonesPerSide : index;
+    }
+
+    _getWrappedRef () {
+        if (this._carouselRef && (
+            (this._needsScrollView() && this._carouselRef.scrollTo) ||
+            (!this._needsScrollView() && this._carouselRef.scrollToOffset)
+        )) {
+            return this._carouselRef;
+        }
+        // https://github.com/facebook/react-native/issues/10635
+        // https://stackoverflow.com/a/48786374/8412141
+        return this._carouselRef && this._carouselRef.getNode && this._carouselRef.getNode();
+    }
+
+    _getScrollEnabled () {
+        return this._scrollEnabled;
+    }
+
+    _setScrollEnabled (scrollEnabled = true) {
+        const wrappedRef = this._getWrappedRef();
+
+        if (!wrappedRef || !wrappedRef.setNativeProps) {
+            return;
+        }
+
+        // 'setNativeProps()' is used instead of 'setState()' because the latter
+        // really takes a toll on Android behavior when momentum is disabled
+        wrappedRef.setNativeProps({ scrollEnabled });
+        this._scrollEnabled = scrollEnabled;
+    }
+
+    _getKeyExtractor (item, index) {
+        return this._needsScrollView() ? `scrollview-item-${index}` : `flatlist-item-${index}`;
+    }
+
+    _getScrollOffset (event) {
+        const { vertical } = this.props;
+        return (event && event.nativeEvent && event.nativeEvent.contentOffset &&
+            event.nativeEvent.contentOffset[vertical ? 'y' : 'x']) || 0;
+    }
+
+    _getContainerInnerMargin (opposite = false) {
+        const { sliderWidth, sliderHeight, itemWidth, itemHeight, vertical, activeSlideAlignment } = this.props;
+
+        if ((activeSlideAlignment === 'start' && !opposite) ||
+            (activeSlideAlignment === 'end' && opposite)) {
+            return 0;
+        } else if ((activeSlideAlignment === 'end' && !opposite) ||
+            (activeSlideAlignment === 'start' && opposite)) {
+            return vertical ? sliderHeight - itemHeight : sliderWidth - itemWidth;
+        } else {
+            return vertical ? (sliderHeight - itemHeight) / 2 : (sliderWidth - itemWidth) / 2;
+        }
+    }
+
+    _getViewportOffset () {
+        const { sliderWidth, sliderHeight, itemWidth, itemHeight, vertical, activeSlideAlignment } = this.props;
+
+        if (activeSlideAlignment === 'start') {
+            return vertical ? itemHeight / 2 : itemWidth / 2;
+        } else if (activeSlideAlignment === 'end') {
+            return vertical ?
+                sliderHeight - (itemHeight / 2) :
+                sliderWidth - (itemWidth / 2);
+        } else {
+            return vertical ? sliderHeight / 2 : sliderWidth / 2;
+        }
+    }
+
+    _getCenter (offset) {
+        return offset + this._getViewportOffset() - this._getContainerInnerMargin();
+    }
+
+    _getActiveItem (offset) {
+        const { activeSlideOffset, swipeThreshold } = this.props;
+        const center = this._getCenter(offset);
+        const centerOffset = activeSlideOffset || swipeThreshold;
+
+        for (let i = 0; i < this._positions.length; i++) {
+            const { start, end } = this._positions[i];
+            if (center + centerOffset >= start && center - centerOffset <= end) {
+                return i;
+            }
+        }
+
+        const lastIndex = this._positions.length - 1;
+        if (this._positions[lastIndex] && center - centerOffset > this._positions[lastIndex].end) {
+            return lastIndex;
+        }
+
+        return 0;
+    }
+
+    _initPositionsAndInterpolators (props = this.props) {
+        const { data, itemWidth, itemHeight, scrollInterpolator, vertical } = props;
+        const sizeRef = vertical ? itemHeight : itemWidth;
+
+        if (!data || !data.length) {
+            return;
+        }
+
+        let interpolators = [];
+        this._positions = [];
+
+        this._getCustomData(props).forEach((itemData, index) => {
+            const _index = this._getCustomIndex(index, props);
+            let animatedValue;
+
+            this._positions[index] = {
+                start: index * sizeRef,
+                end: index * sizeRef + sizeRef
+            };
+
+            if (!this._shouldAnimateSlides(props)) {
+                animatedValue = new Animated.Value(1);
+            } else if (this._shouldUseCustomAnimation()) {
+                animatedValue = new Animated.Value(_index === this._activeItem ? 1 : 0);
+            } else {
+                let interpolator;
+
+                if (scrollInterpolator) {
+                    interpolator = scrollInterpolator(_index, props);
+                } else if (this._shouldUseStackLayout()) {
+                    interpolator = stackScrollInterpolator(_index, props);
+                } else if (this._shouldUseTinderLayout()) {
+                    interpolator = tinderScrollInterpolator(_index, props);
+                }
+
+                if (!interpolator || !interpolator.inputRange || !interpolator.outputRange) {
+                    interpolator = defaultScrollInterpolator(_index, props);
+                }
+
+                animatedValue = this._scrollPos.interpolate({
+                    ...interpolator,
+                    extrapolate: 'clamp'
+                });
+            }
+
+            interpolators.push(animatedValue);
+        });
+
+        this.setState({ interpolators });
+    }
+
+    _getSlideAnimation (index, toValue) {
+        const { interpolators } = this.state;
+        const { activeAnimationType, activeAnimationOptions } = this.props;
+
+        const animatedValue = interpolators && interpolators[index];
+
+        if (!animatedValue && animatedValue !== 0) {
+            return null;
+        }
+
+        const animationCommonOptions = {
+            isInteraction: false,
+            useNativeDriver: true,
+            ...activeAnimationOptions,
+            toValue: toValue
+        };
+
+        return Animated.parallel([
+            Animated['timing'](
+                animatedValue,
+                { ...animationCommonOptions, easing: Easing.linear }
+            ),
+            Animated[activeAnimationType](
+                animatedValue,
+                { ...animationCommonOptions }
+            )
+        ]);
+    }
+
+    _playCustomSlideAnimation (current, next) {
+        const { interpolators } = this.state;
+        const itemsLength = this._getCustomDataLength();
+        const _currentIndex = this._getCustomIndex(current);
+        const _currentDataIndex = this._getDataIndex(_currentIndex);
+        const _nextIndex = this._getCustomIndex(next);
+        const _nextDataIndex = this._getDataIndex(_nextIndex);
+        let animations = [];
+
+        // Keep animations in sync when looping
+        if (this._enableLoop()) {
+            for (let i = 0; i < itemsLength; i++) {
+                if (this._getDataIndex(i) === _currentDataIndex && interpolators[i]) {
+                    animations.push(this._getSlideAnimation(i, 0));
+                } else if (this._getDataIndex(i) === _nextDataIndex && interpolators[i]) {
+                    animations.push(this._getSlideAnimation(i, 1));
+                }
+            }
+        } else {
+            if (interpolators[current]) {
+                animations.push(this._getSlideAnimation(current, 0));
+            }
+            if (interpolators[next]) {
+                animations.push(this._getSlideAnimation(next, 1));
+            }
+        }
+
+        Animated.parallel(animations, { stopTogether: false }).start();
+    }
+
+    _hackActiveSlideAnimation (index, goTo, force = false) {
+        const { data } = this.props;
+
+        if (!this._mounted || !this._carouselRef || !this._positions[index] || (!force && this._enableLoop())) {
+            return;
+        }
+
+        const offset = this._positions[index] && this._positions[index].start;
+
+        if (!offset && offset !== 0) {
+            return;
+        }
+
+        const itemsLength = data && data.length;
+        const direction = goTo || itemsLength === 1 ? 'start' : 'end';
+
+        this._scrollTo(offset + (direction === 'start' ? -1 : 1), false);
+
+        clearTimeout(this._hackSlideAnimationTimeout);
+        this._hackSlideAnimationTimeout = setTimeout(() => {
+            this._scrollTo(offset, false);
+        }, 50); // works randomly when set to '0'
+    }
+
+    _lockScroll () {
+        const { lockScrollTimeoutDuration } = this.props;
+        clearTimeout(this._lockScrollTimeout);
+        this._lockScrollTimeout = setTimeout(() => {
+            this._releaseScroll();
+        }, lockScrollTimeoutDuration);
+        this._setScrollEnabled(false);
+    }
+
+    _releaseScroll () {
+        clearTimeout(this._lockScrollTimeout);
+        this._setScrollEnabled(true);
+    }
+
+    _repositionScroll (index) {
+        const { data, loopClonesPerSide } = this.props;
+        const dataLength = data && data.length;
+
+        if (!this._enableLoop() || !dataLength ||
+            (index >= loopClonesPerSide && index < dataLength + loopClonesPerSide)) {
+            return;
+        }
+
+        let repositionTo = index;
+
+        if (index >= dataLength + loopClonesPerSide) {
+            repositionTo = index - dataLength;
+        } else if (index < loopClonesPerSide) {
+            repositionTo = index + dataLength;
+        }
+
+        this._snapToItem(repositionTo, false, false, false, false);
+    }
+
+    _scrollTo (offset, animated = true) {
+        const { vertical } = this.props;
+        const wrappedRef = this._getWrappedRef();
+
+        if (!this._mounted || !wrappedRef) {
+            return;
+        }
+
+        const specificOptions = this._needsScrollView() ? {
+            x: vertical ? 0 : offset,
+            y: vertical ? offset : 0
+        } : {
+            offset
+        };
+        const options = {
+            ...specificOptions,
+            animated
+        };
+
+        if (this._needsScrollView()) {
+            wrappedRef.scrollTo(options);
+        } else {
+            wrappedRef.scrollToOffset(options);
+        }
+    }
+
+    _onScroll (event) {
+        const { callbackOffsetMargin, enableMomentum, onScroll } = this.props;
+
+        const scrollOffset = event ? this._getScrollOffset(event) : this._currentContentOffset;
+        const nextActiveItem = this._getActiveItem(scrollOffset);
+        const itemReached = nextActiveItem === this._itemToSnapTo;
+        const scrollConditions =
+            scrollOffset >= this._scrollOffsetRef - callbackOffsetMargin &&
+            scrollOffset <= this._scrollOffsetRef + callbackOffsetMargin;
+
+        this._currentContentOffset = scrollOffset;
+        this._onScrollTriggered = true;
+        this._lastScrollDate = Date.now();
+
+        if (this._activeItem !== nextActiveItem && this._shouldUseCustomAnimation()) {
+            this._playCustomSlideAnimation(this._activeItem, nextActiveItem);
+        }
+
+        if (enableMomentum) {
+            clearTimeout(this._snapNoMomentumTimeout);
+
+            if (this._activeItem !== nextActiveItem) {
+                this._activeItem = nextActiveItem;
+            }
+
+            if (itemReached) {
+                if (this._canFireBeforeCallback) {
+                    this._onBeforeSnap(this._getDataIndex(nextActiveItem));
+                }
+
+                if (scrollConditions && this._canFireCallback) {
+                    this._onSnap(this._getDataIndex(nextActiveItem));
+                }
+            }
+        } else if (this._activeItem !== nextActiveItem && itemReached) {
+            if (this._canFireBeforeCallback) {
+                this._onBeforeSnap(this._getDataIndex(nextActiveItem));
+            }
+
+            if (scrollConditions) {
+                this._activeItem = nextActiveItem;
+
+                if (this._canLockScroll()) {
+                    this._releaseScroll();
+                }
+
+                if (this._canFireCallback) {
+                    this._onSnap(this._getDataIndex(nextActiveItem));
+                }
+            }
+        }
+
+        if (nextActiveItem === this._itemToSnapTo &&
+            scrollOffset === this._scrollOffsetRef) {
+            this._repositionScroll(nextActiveItem);
+        }
+
+        if (typeof onScroll === "function" && event) {
+            onScroll(event);
+        }
+    }
+
+    _onStartShouldSetResponderCapture (event) {
+        const { onStartShouldSetResponderCapture } = this.props;
+
+        if (onStartShouldSetResponderCapture) {
+            onStartShouldSetResponderCapture(event);
+        }
+
+        return this._getScrollEnabled();
+    }
+
+    _onTouchStart () {
+        const { onTouchStart } = this.props
+
+        // `onTouchStart` is fired even when `scrollEnabled` is set to `false`
+        if (this._getScrollEnabled() !== false && this._autoplaying) {
+            this.pauseAutoPlay();
+        }
+
+        if (onTouchStart) {
+            onTouchStart()
+        }
+    }
+
+    _onTouchEnd () {
+        const { onTouchEnd } = this.props
+
+        if (this._getScrollEnabled() !== false && this._autoplay && !this._autoplaying) {
+            // This event is buggy on Android, so a fallback is provided in _onScrollEnd()
+            this.startAutoplay();
+        }
+
+        if (onTouchEnd) {
+            onTouchEnd()
+        }
+    }
+
+    // Used when `enableSnap` is ENABLED
+    _onScrollBeginDrag (event) {
+        const { onScrollBeginDrag } = this.props;
+
+        if (!this._getScrollEnabled()) {
+            return;
+        }
+
+        this._scrollStartOffset = this._getScrollOffset(event);
+        this._scrollStartActive = this._getActiveItem(this._scrollStartOffset);
+        this._ignoreNextMomentum = false;
+        // this._canFireCallback = false;
+
+        if (onScrollBeginDrag) {
+            onScrollBeginDrag(event);
+        }
+    }
+
+    // Used when `enableMomentum` is DISABLED
+    _onScrollEndDrag (event) {
+        const { onScrollEndDrag } = this.props;
+
+        if (this._carouselRef) {
+            this._onScrollEnd && this._onScrollEnd();
+        }
+
+        if (onScrollEndDrag) {
+            onScrollEndDrag(event);
+        }
+    }
+
+    // Used when `enableMomentum` is ENABLED
+    _onMomentumScrollEnd (event) {
+        const { onMomentumScrollEnd } = this.props;
+
+        if (this._carouselRef) {
+            this._onScrollEnd && this._onScrollEnd();
+        }
+
+        if (onMomentumScrollEnd) {
+            onMomentumScrollEnd(event);
+        }
+    }
+
+    _onScrollEnd (event) {
+        const { autoplayDelay, enableSnap } = this.props;
+
+        if (this._ignoreNextMomentum) {
+            // iOS fix
+            this._ignoreNextMomentum = false;
+            return;
+        }
+
+        if (this._currentContentOffset === this._scrollEndOffset) {
+            return;
+        }
+
+        this._scrollEndOffset = this._currentContentOffset;
+        this._scrollEndActive = this._getActiveItem(this._scrollEndOffset);
+
+        if (enableSnap) {
+            this._snapScroll(this._scrollEndOffset - this._scrollStartOffset);
+        }
+
+        // The touchEnd event is buggy on Android, so this will serve as a fallback whenever needed
+        // https://github.com/facebook/react-native/issues/9439
+        if (this._autoplay && !this._autoplaying) {
+            clearTimeout(this._enableAutoplayTimeout);
+            this._enableAutoplayTimeout = setTimeout(() => {
+                this.startAutoplay();
+            }, autoplayDelay + 50);
+        }
+    }
+
+    // Due to a bug, this event is only fired on iOS
+    // https://github.com/facebook/react-native/issues/6791
+    // it's fine since we're only fixing an iOS bug in it, so ...
+    _onTouchRelease (event) {
+        const { enableMomentum } = this.props;
+
+        if (enableMomentum && IS_IOS) {
+            clearTimeout(this._snapNoMomentumTimeout);
+            this._snapNoMomentumTimeout = setTimeout(() => {
+                this._snapToItem(this._activeItem);
+            }, 100);
+        }
+    }
+
+    _onLayout (event) {
+        const { onLayout } = this.props;
+
+        // Prevent unneeded actions during the first 'onLayout' (triggered on init)
+        if (this._onLayoutInitDone) {
+            this._initPositionsAndInterpolators();
+            this._snapToItem(this._activeItem, false, false, false, false);
+        } else {
+            this._onLayoutInitDone = true;
+        }
+
+        if (onLayout) {
+            onLayout(event);
+        }
+    }
+
+    _snapScroll (delta) {
+        const { swipeThreshold } = this.props;
+
+        // When using momentum and releasing the touch with
+        // no velocity, scrollEndActive will be undefined (iOS)
+        if (!this._scrollEndActive && this._scrollEndActive !== 0 && IS_IOS) {
+            this._scrollEndActive = this._scrollStartActive;
+        }
+
+        if (this._scrollStartActive !== this._scrollEndActive) {
+            // Snap to the new active item
+            this._snapToItem(this._scrollEndActive);
+        } else {
+            // Snap depending on delta
+            if (delta > 0) {
+                if (delta > swipeThreshold) {
+                    this._snapToItem(this._scrollStartActive + 1);
+                } else {
+                    this._snapToItem(this._scrollEndActive);
+                }
+            } else if (delta < 0) {
+                if (delta < -swipeThreshold) {
+                    this._snapToItem(this._scrollStartActive - 1);
+                } else {
+                    this._snapToItem(this._scrollEndActive);
+                }
+            } else {
+                // Snap to current
+                this._snapToItem(this._scrollEndActive);
+            }
+        }
+    }
+
+    _snapToItem (index, animated = true, fireCallback = true, initial = false, lockScroll = true) {
+        const { enableMomentum, onSnapToItem, onBeforeSnapToItem } = this.props;
+        const itemsLength = this._getCustomDataLength();
+        const wrappedRef = this._getWrappedRef();
+
+        if (!itemsLength || !wrappedRef) {
+            return;
+        }
+
+        if (!index || index < 0) {
+            index = 0;
+        } else if (itemsLength > 0 && index >= itemsLength) {
+            index = itemsLength - 1;
+        }
+
+        if (index !== this._previousActiveItem) {
+            this._previousActiveItem = index;
+
+            // Placed here to allow overscrolling for edges items
+            if (lockScroll && this._canLockScroll()) {
+                this._lockScroll();
+            }
+
+            if (fireCallback) {
+                if (onBeforeSnapToItem) {
+                    this._canFireBeforeCallback = true;
+                }
+
+                if (onSnapToItem) {
+                    this._canFireCallback = true;
+                }
+            }
+        }
+
+        this._itemToSnapTo = index;
+        this._scrollOffsetRef = this._positions[index] && this._positions[index].start;
+        this._onScrollTriggered = false;
+
+        if (!this._scrollOffsetRef && this._scrollOffsetRef !== 0) {
+            return;
+        }
+
+        this._scrollTo(this._scrollOffsetRef, animated);
+
+        this._scrollEndOffset = this._currentContentOffset;
+
+        if (enableMomentum) {
+            // iOS fix, check the note in the constructor
+            if (!initial) {
+                this._ignoreNextMomentum = true;
+            }
+
+            // When momentum is enabled and the user is overscrolling or swiping very quickly,
+            // 'onScroll' is not going to be triggered for edge items. Then callback won't be
+            // fired and loop won't work since the scrollview is not going to be repositioned.
+            // As a workaround, '_onScroll()' will be called manually for these items if a given
+            // condition hasn't been met after a small delay.
+            // WARNING: this is ok only when relying on 'momentumScrollEnd', not with 'scrollEndDrag'
+            if (index === 0 || index === itemsLength - 1) {
+                clearTimeout(this._edgeItemTimeout);
+                this._edgeItemTimeout = setTimeout(() => {
+                    if (!initial && index === this._activeItem && !this._onScrollTriggered) {
+                        this._onScroll();
+                    }
+                }, 250);
+            }
+        }
+    }
+
+    _onBeforeSnap (index) {
+        const { onBeforeSnapToItem } = this.props;
+
+        if (!this._carouselRef) {
+            return;
+        }
+
+        this._canFireBeforeCallback = false;
+        onBeforeSnapToItem && onBeforeSnapToItem(index);
+    }
+
+    _onSnap (index) {
+        const { onSnapToItem } = this.props;
+
+        if (!this._carouselRef) {
+            return;
+        }
+
+        this._canFireCallback = false;
+        onSnapToItem && onSnapToItem(index);
+    }
+
+    startAutoplay () {
+        const { autoplayInterval, autoplayDelay } = this.props;
+        this._autoplay = true;
+
+        if (this._autoplaying) {
+            return;
+        }
+
+        clearTimeout(this._autoplayTimeout);
+        this._autoplayTimeout = setTimeout(() => {
+            this._autoplaying = true;
+            this._autoplayInterval = setInterval(() => {
+                if (this._autoplaying) {
+                    this.snapToNext();
+                }
+            }, autoplayInterval);
+        }, autoplayDelay);
+    }
+
+    pauseAutoPlay () {
+        this._autoplaying = false;
+        clearTimeout(this._autoplayTimeout);
+        clearTimeout(this._enableAutoplayTimeout);
+        clearInterval(this._autoplayInterval);
+    }
+
+    stopAutoplay () {
+        this._autoplay = false;
+        this.pauseAutoPlay();
+    }
+
+    snapToItem (index, animated = true, fireCallback = true) {
+        if (!index || index < 0) {
+            index = 0;
+        }
+
+        const positionIndex = this._getPositionIndex(index);
+
+        if (positionIndex === this._activeItem) {
+            return;
+        }
+
+        this._snapToItem(positionIndex, animated, fireCallback);
+    }
+
+    snapToNext (animated = true, fireCallback = true) {
+        const itemsLength = this._getCustomDataLength();
+
+        let newIndex = this._activeItem + 1;
+        if (newIndex > itemsLength - 1) {
+            if (!this._enableLoop()) {
+                return;
+            }
+            newIndex = 0;
+        }
+        this._snapToItem(newIndex, animated, fireCallback);
+    }
+
+    snapToPrev (animated = true, fireCallback = true) {
+        const itemsLength = this._getCustomDataLength();
+
+        let newIndex = this._activeItem - 1;
+        if (newIndex < 0) {
+            if (!this._enableLoop()) {
+                return;
+            }
+            newIndex = itemsLength - 1;
+        }
+        this._snapToItem(newIndex, animated, fireCallback);
+    }
+
+    // https://github.com/facebook/react-native/issues/1831#issuecomment-231069668
+    triggerRenderingHack (offset) {
+        // Avoid messing with user scroll
+        if (Date.now() - this._lastScrollDate < 500) {
+            return;
+        }
+
+        const scrollPosition = this._currentContentOffset;
+        if (!scrollPosition && scrollPosition !== 0) {
+            return;
+        }
+
+        const scrollOffset = offset || (scrollPosition === 0 ? 1 : -1);
+        this._scrollTo(scrollPosition + scrollOffset, false);
+    }
+
+    _getSlideInterpolatedStyle (index, animatedValue) {
+        const { layoutCardOffset, slideInterpolatedStyle } = this.props;
+
+        if (slideInterpolatedStyle) {
+            return slideInterpolatedStyle(index, animatedValue, this.props);
+        } else if (this._shouldUseTinderLayout()) {
+            return tinderAnimatedStyles(index, animatedValue, this.props, layoutCardOffset);
+        } else if (this._shouldUseStackLayout()) {
+            return stackAnimatedStyles(index, animatedValue, this.props, layoutCardOffset);
+        } else if (this._shouldUseShiftLayout()) {
+            return shiftAnimatedStyles(index, animatedValue, this.props);
+        } else {
+            return defaultAnimatedStyles(index, animatedValue, this.props);
+        }
+    }
+
+    _renderItem ({ item, index }) {
+        const { interpolators } = this.state;
+        const {
+            hasParallaxImages,
+            itemWidth,
+            itemHeight,
+            keyExtractor,
+            renderItem,
+            sliderHeight,
+            sliderWidth,
+            slideStyle,
+            vertical
+        } = this.props;
+
+        const animatedValue = interpolators && interpolators[index];
+
+        if (!animatedValue && animatedValue !== 0) {
+            return null;
+        }
+
+        const animate = this._shouldAnimateSlides();
+        const Component = animate ? Animated.View : View;
+        const animatedStyle = animate ? this._getSlideInterpolatedStyle(index, animatedValue) : {};
+
+        const parallaxProps = hasParallaxImages ? {
+            scrollPosition: this._scrollPos,
+            carouselRef: this._carouselRef,
+            vertical,
+            sliderWidth,
+            sliderHeight,
+            itemWidth,
+            itemHeight
+        } : undefined;
+
+        const mainDimension = vertical ? { height: itemHeight } : { width: itemWidth };
+        const specificProps = this._needsScrollView() ? {
+            key: keyExtractor ? keyExtractor(item, index) : this._getKeyExtractor(item, index)
+        } : {};
+
+        return (
+            <Component style={[mainDimension, slideStyle, animatedStyle]} pointerEvents={'box-none'} {...specificProps}>
+                { renderItem({ item, index }, parallaxProps) }
+            </Component>
+        );
+    }
+
+    _getComponentOverridableProps () {
+        const {
+            enableMomentum,
+            itemWidth,
+            itemHeight,
+            loopClonesPerSide,
+            sliderWidth,
+            sliderHeight,
+            vertical
+        } = this.props;
+
+        const visibleItems = Math.ceil(vertical ?
+            sliderHeight / itemHeight :
+            sliderWidth / itemWidth) + 1;
+        const initialNumPerSide = this._enableLoop() ? loopClonesPerSide : 2;
+        const initialNumToRender = visibleItems + (initialNumPerSide * 2);
+        const maxToRenderPerBatch = 1 + (initialNumToRender * 2);
+        const windowSize = maxToRenderPerBatch;
+
+        const specificProps = !this._needsScrollView() ? {
+            initialNumToRender: initialNumToRender,
+            maxToRenderPerBatch: maxToRenderPerBatch,
+            windowSize: windowSize
+            // updateCellsBatchingPeriod
+        } : {};
+
+        return {
+            decelerationRate: enableMomentum ? 0.9 : 'fast',
+            showsHorizontalScrollIndicator: false,
+            showsVerticalScrollIndicator: false,
+            overScrollMode: 'never',
+            automaticallyAdjustContentInsets: false,
+            directionalLockEnabled: true,
+            pinchGestureEnabled: false,
+            scrollsToTop: false,
+            removeClippedSubviews: !this._needsScrollView(),
+            inverted: this._needsRTLAdaptations(),
+            // renderToHardwareTextureAndroid: true,
+            ...specificProps
+        };
+    }
+
+    _getComponentStaticProps () {
+        const { hideCarousel } = this.state;
+        const {
+            containerCustomStyle,
+            contentContainerCustomStyle,
+            keyExtractor,
+            sliderWidth,
+            sliderHeight,
+            style,
+            vertical
+        } = this.props;
+
+        const containerStyle = [
+            containerCustomStyle || style || {},
+            hideCarousel ? { opacity: 0 } : {},
+            vertical ?
+                { height: sliderHeight, flexDirection: 'column' } :
+                // LTR hack; see https://github.com/facebook/react-native/issues/11960
+                // and https://github.com/facebook/react-native/issues/13100#issuecomment-328986423
+                { width: sliderWidth, flexDirection: this._needsRTLAdaptations() ? 'row-reverse' : 'row' }
+        ];
+        const contentContainerStyle = [
+            vertical ? {
+                paddingTop: this._getContainerInnerMargin(),
+                paddingBottom: this._getContainerInnerMargin(true)
+            } : {
+                paddingLeft: this._getContainerInnerMargin(),
+                paddingRight: this._getContainerInnerMargin(true)
+            },
+            contentContainerCustomStyle || {}
+        ];
+
+        const specificProps = !this._needsScrollView() ? {
+            // extraData: this.state,
+            renderItem: this._renderItem,
+            numColumns: 1,
+            keyExtractor: keyExtractor || this._getKeyExtractor
+        } : {};
+
+        return {
+            ref: c => this._carouselRef = c,
+            data: this._getCustomData(),
+            style: containerStyle,
+            contentContainerStyle: contentContainerStyle,
+            horizontal: !vertical,
+            scrollEventThrottle: 1,
+            onScroll: this._onScrollHandler,
+            onScrollBeginDrag: this._onScrollBeginDrag,
+            onScrollEndDrag: this._onScrollEndDrag,
+            onMomentumScrollEnd: this._onMomentumScrollEnd,
+            onResponderRelease: this._onTouchRelease,
+            onStartShouldSetResponderCapture: this._onStartShouldSetResponderCapture,
+            onTouchStart: this._onTouchStart,
+            onTouchEnd: this._onScrollEnd,
+            onLayout: this._onLayout,
+            ...specificProps
+        };
+    }
+
+    render () {
+        const { data, renderItem, useScrollView } = this.props;
+
+        if (!data || !renderItem) {
+            return null;
+        }
+
+        const props = {
+            ...this._getComponentOverridableProps(),
+            ...this.props,
+            ...this._getComponentStaticProps()
+        };
+
+        const ScrollViewComponent = typeof useScrollView === 'function' ? useScrollView : AnimatedScrollView
+
+        return this._needsScrollView() ? (
+            <ScrollViewComponent {...props}>
+                {
+                    this._getCustomData().map((item, index) => {
+                        return this._renderItem({ item, index });
+                    })
+                }
+            </ScrollViewComponent>
+        ) : (
+            <AnimatedFlatList {...props} />
+        );
+    }
+}
diff --git a/node_modules/react-native-snap-carousel/src/index.js b/node_modules/react-native-snap-carousel/src/index.js
new file mode 100644
index 0000000..d937253
--- /dev/null
+++ b/node_modules/react-native-snap-carousel/src/index.js
@@ -0,0 +1,6 @@
+import Carousel from './carousel/Carousel';
+import Pagination from './pagination/Pagination';
+import ParallaxImage from './parallaximage/ParallaxImage';
+import { getInputRangeFromIndexes } from './utils/animations';
+
+export { Carousel as default, Pagination, ParallaxImage, getInputRangeFromIndexes };
diff --git a/node_modules/react-native-snap-carousel/src/pagination/Pagination.js b/node_modules/react-native-snap-carousel/src/pagination/Pagination.js
new file mode 100644
index 0000000..d300dce
--- /dev/null
+++ b/node_modules/react-native-snap-carousel/src/pagination/Pagination.js
@@ -0,0 +1,168 @@
+import React, { PureComponent } from 'react';
+import { I18nManager, Platform, View } from 'react-native';
+import { ViewPropTypes } from 'deprecated-react-native-prop-types';
+import PropTypes from 'prop-types';
+import PaginationDot from './PaginationDot';
+import styles from './Pagination.style';
+
+const IS_IOS = Platform.OS === 'ios';
+const IS_RTL = I18nManager.isRTL;
+
+export default class Pagination extends PureComponent {
+
+    static propTypes = {
+        activeDotIndex: PropTypes.number.isRequired,
+        dotsLength: PropTypes.number.isRequired,
+        activeOpacity: PropTypes.number,
+        carouselRef: PropTypes.object,
+        containerStyle: ViewPropTypes ? ViewPropTypes.style : View.propTypes.style,
+        dotColor: PropTypes.string,
+        dotContainerStyle: ViewPropTypes ? ViewPropTypes.style : View.propTypes.style,
+        dotElement: PropTypes.element,
+        dotStyle: ViewPropTypes ? ViewPropTypes.style : View.propTypes.style,
+        inactiveDotColor: PropTypes.string,
+        inactiveDotElement: PropTypes.element,
+        inactiveDotOpacity: PropTypes.number,
+        inactiveDotScale: PropTypes.number,
+        inactiveDotStyle: ViewPropTypes ? ViewPropTypes.style : View.propTypes.style,
+        renderDots: PropTypes.func,
+        tappableDots: PropTypes.bool,
+        vertical: PropTypes.bool,
+        accessibilityLabel: PropTypes.string,
+        animatedDuration: PropTypes.number,
+        animatedFriction: PropTypes.number,
+        animatedTension: PropTypes.number,
+        delayPressInDot: PropTypes.number,
+    };
+
+    static defaultProps = {
+        inactiveDotOpacity: 0.5,
+        inactiveDotScale: 0.5,
+        tappableDots: false,
+        vertical: false,
+        animatedDuration: 250,
+        animatedFriction: 4,
+        animatedTension: 50,
+        delayPressInDot: 0,
+    }
+
+    constructor (props) {
+        super(props);
+
+        // Warnings
+        if ((props.dotColor && !props.inactiveDotColor) || (!props.dotColor && props.inactiveDotColor)) {
+            console.warn(
+                'react-native-snap-carousel | Pagination: ' +
+                'You need to specify both `dotColor` and `inactiveDotColor`'
+            );
+        }
+        if ((props.dotElement && !props.inactiveDotElement) || (!props.dotElement && props.inactiveDotElement)) {
+            console.warn(
+                'react-native-snap-carousel | Pagination: ' +
+                'You need to specify both `dotElement` and `inactiveDotElement`'
+            );
+        }
+        if (props.tappableDots && props.carouselRef === undefined) {
+            console.warn(
+                'react-native-snap-carousel | Pagination: ' +
+                'You must specify prop `carouselRef` when setting `tappableDots` to `true`'
+            );
+        }
+    }
+
+    _needsRTLAdaptations () {
+        const { vertical } = this.props;
+        return IS_RTL && !IS_IOS && !vertical;
+    }
+
+    get _activeDotIndex () {
+        const { activeDotIndex, dotsLength } = this.props;
+        return this._needsRTLAdaptations() ? dotsLength - activeDotIndex - 1 : activeDotIndex;
+    }
+
+    get dots () {
+        const {
+            activeOpacity,
+            carouselRef,
+            dotsLength,
+            dotColor,
+            dotContainerStyle,
+            dotElement,
+            dotStyle,
+            inactiveDotColor,
+            inactiveDotElement,
+            inactiveDotOpacity,
+            inactiveDotScale,
+            inactiveDotStyle,
+            renderDots,
+            tappableDots,
+            animatedDuration,
+            animatedFriction,
+            animatedTension,
+            delayPressInDot,
+        } = this.props;
+
+        if (renderDots) {
+            return renderDots(this._activeDotIndex, dotsLength, this);
+        }
+
+        const DefaultDot = <PaginationDot
+          carouselRef={carouselRef}
+          tappable={tappableDots && typeof carouselRef !== 'undefined'}
+          activeOpacity={activeOpacity}
+          color={dotColor}
+          containerStyle={dotContainerStyle}
+          style={dotStyle}
+          inactiveColor={inactiveDotColor}
+          inactiveOpacity={inactiveDotOpacity}
+          inactiveScale={inactiveDotScale}
+          inactiveStyle={inactiveDotStyle}
+          animatedDuration={animatedDuration}
+          animatedFriction={animatedFriction}
+          animatedTension={animatedTension}
+          delayPressInDot={delayPressInDot}
+        />;
+
+        const dots = [...Array(dotsLength).keys()].map(i => {
+            const isActive = i === this._activeDotIndex;
+            return React.cloneElement(
+                (isActive ? dotElement : inactiveDotElement) || DefaultDot,
+                {
+                    key: `pagination-dot-${i}`,
+                    active: isActive,
+                    index: i
+                }
+            );
+        });
+
+        return dots;
+    }
+
+    render () {
+        const { dotsLength, containerStyle, vertical, accessibilityLabel } = this.props;
+
+        if (!dotsLength || dotsLength < 2) {
+            return false;
+        }
+
+        const style = [
+            styles.sliderPagination,
+            { flexDirection: vertical ?
+                'column' :
+                (this._needsRTLAdaptations() ? 'row-reverse' : 'row')
+            },
+            containerStyle || {}
+        ];
+
+        return (
+            <View
+              pointerEvents={'box-none'}
+              style={style}
+              accessible={!!accessibilityLabel}
+              accessibilityLabel={accessibilityLabel}
+            >
+                { this.dots }
+            </View>
+        );
+    }
+}
diff --git a/node_modules/react-native-snap-carousel/src/pagination/Pagination.style.js b/node_modules/react-native-snap-carousel/src/pagination/Pagination.style.js
new file mode 100644
index 0000000..4911924
--- /dev/null
+++ b/node_modules/react-native-snap-carousel/src/pagination/Pagination.style.js
@@ -0,0 +1,24 @@
+import { StyleSheet } from 'react-native';
+
+const DEFAULT_DOT_SIZE = 7;
+const DEFAULT_DOT_COLOR = 'rgba(0, 0, 0, 0.75)';
+
+export default StyleSheet.create({
+    sliderPagination: {
+        alignItems: 'center',
+        justifyContent: 'center',
+        paddingHorizontal: 20,
+        paddingVertical: 30
+    },
+    sliderPaginationDotContainer: {
+        alignItems: 'center',
+        justifyContent: 'center',
+        marginHorizontal: 8
+    },
+    sliderPaginationDot: {
+        width: DEFAULT_DOT_SIZE,
+        height: DEFAULT_DOT_SIZE,
+        borderRadius: DEFAULT_DOT_SIZE / 2,
+        backgroundColor: DEFAULT_DOT_COLOR
+    }
+});
diff --git a/node_modules/react-native-snap-carousel/src/pagination/PaginationDot.js b/node_modules/react-native-snap-carousel/src/pagination/PaginationDot.js
new file mode 100644
index 0000000..f289ee9
--- /dev/null
+++ b/node_modules/react-native-snap-carousel/src/pagination/PaginationDot.js
@@ -0,0 +1,157 @@
+import React, { PureComponent } from 'react';
+import { ViewPropTypes } from 'deprecated-react-native-prop-types';
+import { View, Animated, Easing, TouchableOpacity } from 'react-native';
+import PropTypes from 'prop-types';
+import styles from './Pagination.style';
+
+export default class PaginationDot extends PureComponent {
+
+    static propTypes = {
+        inactiveOpacity: PropTypes.number.isRequired,
+        inactiveScale: PropTypes.number.isRequired,
+        active: PropTypes.bool,
+        activeOpacity: PropTypes.number,
+        carouselRef: PropTypes.object,
+        color: PropTypes.string,
+        containerStyle: ViewPropTypes ? ViewPropTypes.style : View.propTypes.style,
+        inactiveColor: PropTypes.string,
+        inactiveStyle: ViewPropTypes ? ViewPropTypes.style : View.propTypes.style,
+        index: PropTypes.number,
+        style: ViewPropTypes ? ViewPropTypes.style : View.propTypes.style,
+        tappable: PropTypes.bool
+    };
+
+    constructor (props) {
+        super(props);
+        this.state = {
+            animColor: new Animated.Value(0),
+            animOpacity: new Animated.Value(0),
+            animTransform: new Animated.Value(0)
+        };
+    }
+
+    componentDidMount () {
+        if (this.props.active) {
+            this._animate(1);
+        }
+    }
+
+    componentDidUpdate (prevProps) {
+        if (prevProps.active !== this.props.active) {
+            this._animate(this.props.active ? 1 : 0);
+        }
+    }
+
+    _animate (toValue = 0) {
+        const { animColor, animOpacity, animTransform } = this.state;
+        const { animatedDuration, animatedFriction, animatedTension } = this.props
+
+        const commonProperties = {
+            toValue,
+            duration: animatedDuration,
+            isInteraction: false,
+            useNativeDriver: !this._shouldAnimateColor
+        };
+
+        let animations = [
+            Animated.timing(animOpacity, {
+                easing: Easing.linear,
+                ...commonProperties
+            }),
+            Animated.spring(animTransform, {
+                friction: animatedFriction,
+                tension: animatedTension,
+                ...commonProperties
+            })
+        ];
+
+        if (this._shouldAnimateColor) {
+            animations.push(Animated.timing(animColor, {
+                easing: Easing.linear,
+                ...commonProperties
+            }));
+        }
+
+        Animated.parallel(animations).start();
+    }
+
+    get _shouldAnimateColor () {
+        const { color, inactiveColor } = this.props;
+        return color && inactiveColor;
+    }
+
+    render () {
+        const { animColor, animOpacity, animTransform } = this.state;
+        const {
+            active,
+            activeOpacity,
+            carouselRef,
+            color,
+            containerStyle,
+            inactiveColor,
+            inactiveStyle,
+            inactiveOpacity,
+            inactiveScale,
+            index,
+            style,
+            tappable,
+            delayPressInDot
+        } = this.props;
+
+        const animatedStyle = {
+            opacity: animOpacity.interpolate({
+                inputRange: [0, 1],
+                outputRange: [inactiveOpacity, 1]
+            }),
+            transform: [{
+                scale: animTransform.interpolate({
+                    inputRange: [0, 1],
+                    outputRange: [inactiveScale, 1]
+                })
+            }]
+        };
+        const animatedColor = this._shouldAnimateColor ? {
+            backgroundColor: animColor.interpolate({
+                inputRange: [0, 1],
+                outputRange: [inactiveColor, color]
+            })
+        } : {};
+
+        const dotContainerStyle = [
+            styles.sliderPaginationDotContainer,
+            containerStyle || {}
+        ];
+
+        const dotStyle = [
+            styles.sliderPaginationDot,
+            style || {},
+            (!active && inactiveStyle) || {},
+            animatedStyle,
+            animatedColor
+        ];
+
+        const onPress = tappable ? () => {
+            try {
+                const currentRef = carouselRef.current || carouselRef;
+                currentRef._snapToItem(currentRef._getPositionIndex(index));
+            } catch (error) {
+                console.warn(
+                    'react-native-snap-carousel | Pagination: ' +
+                    '`carouselRef` has to be a Carousel ref.\n' + error
+                );
+            }
+        } : undefined;
+
+        return (
+            <TouchableOpacity
+              accessible={false}
+              style={dotContainerStyle}
+              activeOpacity={tappable ? activeOpacity : 1}
+              onPress={onPress}
+              delayPressIn={delayPressInDot}
+            >
+                <Animated.View style={dotStyle} />
+            </TouchableOpacity>
+        );
+    }
+}
diff --git a/node_modules/react-native-snap-carousel/src/parallaximage/ParallaxImage.js b/node_modules/react-native-snap-carousel/src/parallaximage/ParallaxImage.js
new file mode 100644
index 0000000..d6d9de3
--- /dev/null
+++ b/node_modules/react-native-snap-carousel/src/parallaximage/ParallaxImage.js
@@ -0,0 +1,223 @@
+// Parallax effect inspired by https://github.com/oblador/react-native-parallax/
+
+import React, { Component } from 'react';
+import { View, Image, Animated, Easing, ActivityIndicator, findNodeHandle } from 'react-native';
+import { ViewPropTypes } from 'deprecated-react-native-prop-types';
+import PropTypes from 'prop-types';
+import styles from './ParallaxImage.style';
+
+export default class ParallaxImage extends Component {
+
+    static propTypes = {
+        ...Image.propTypes,
+        carouselRef: PropTypes.object, // passed from <Carousel />
+        itemHeight: PropTypes.number, // passed from <Carousel />
+        itemWidth: PropTypes.number, // passed from <Carousel />
+        scrollPosition: PropTypes.object, // passed from <Carousel />
+        sliderHeight: PropTypes.number, // passed from <Carousel />
+        sliderWidth: PropTypes.number, // passed from <Carousel />
+        vertical: PropTypes.bool, // passed from <Carousel />
+        containerStyle: ViewPropTypes ? ViewPropTypes.style : View.propTypes.style,
+        dimensions: PropTypes.shape({
+            width: PropTypes.number,
+            height: PropTypes.number
+        }),
+        fadeDuration: PropTypes.number,
+        parallaxFactor: PropTypes.number,
+        showSpinner: PropTypes.bool,
+        spinnerColor: PropTypes.string,
+        AnimatedImageComponent: PropTypes.oneOfType([
+            PropTypes.func,
+            PropTypes.object
+        ])
+    };
+
+    static defaultProps = {
+        containerStyle: {},
+        fadeDuration: 500,
+        parallaxFactor: 0.3,
+        showSpinner: true,
+        spinnerColor: 'rgba(0, 0, 0, 0.4)',
+        AnimatedImageComponent: Animated.Image
+    }
+
+    constructor (props) {
+        super(props);
+        this.state = {
+            offset: 0,
+            width: 0,
+            height: 0,
+            status: 1, // 1 -> loading; 2 -> loaded // 3 -> transition finished; 4 -> error
+            animOpacity: new Animated.Value(0)
+        };
+        this._onLoad = this._onLoad.bind(this);
+        this._onError = this._onError.bind(this);
+        this._measureLayout = this._measureLayout.bind(this);
+    }
+
+    setNativeProps (nativeProps) {
+        this._container.setNativeProps(nativeProps);
+    }
+
+    componentDidMount () {
+        this._mounted = true;
+
+        setTimeout(() => {
+            this._measureLayout();
+        }, 0);
+    }
+
+    componentWillUnmount () {
+        this._mounted = false;
+    }
+
+    _measureLayout () {
+        if (this._container) {
+            const {
+                dimensions,
+                vertical,
+                carouselRef,
+                sliderWidth,
+                sliderHeight,
+                itemWidth,
+                itemHeight
+            } = this.props;
+
+            if (carouselRef) {
+                this._container.measureLayout(
+                    findNodeHandle(carouselRef),
+                    (x, y, width, height, pageX, pageY) => {
+                        const offset = vertical ?
+                            y - ((sliderHeight - itemHeight) / 2) :
+                            x - ((sliderWidth - itemWidth) / 2);
+
+                        this.setState({
+                            offset: offset,
+                            width: dimensions && dimensions.width ?
+                                dimensions.width :
+                                Math.ceil(width),
+                            height: dimensions && dimensions.height ?
+                                dimensions.height :
+                                Math.ceil(height)
+                        });
+                    }
+                );
+            }
+        }
+    }
+
+    _onLoad (event) {
+        const { animOpacity } = this.state;
+        const { fadeDuration, onLoad } = this.props;
+
+        if (!this._mounted) {
+            return;
+        }
+
+        this.setState({ status: 2 });
+
+        if (onLoad) {
+            onLoad(event);
+        }
+
+        Animated.timing(animOpacity, {
+            toValue: 1,
+            duration: fadeDuration,
+            easing: Easing.out(Easing.quad),
+            isInteraction: false,
+            useNativeDriver: true
+        }).start(() => {
+            this.setState({ status: 3 });
+        });
+    }
+
+    // If arg is missing from method signature, it just won't be called
+    _onError (event) {
+        const { onError } = this.props;
+
+        this.setState({ status: 4 });
+
+        if (onError) {
+            onError(event);
+        }
+    }
+
+    get image () {
+        const { status, animOpacity, offset, width, height } = this.state;
+        const {
+            scrollPosition,
+            dimensions,
+            vertical,
+            sliderWidth,
+            sliderHeight,
+            parallaxFactor,
+            style,
+            AnimatedImageComponent,
+            ...other
+        } = this.props;
+
+        const parallaxPadding = (vertical ? height : width) * parallaxFactor;
+        const requiredStyles = { position: 'relative' };
+        const dynamicStyles = {
+            width: vertical ? width : width + parallaxPadding * 2,
+            height: vertical ? height + parallaxPadding * 2 : height,
+            opacity: animOpacity,
+            transform: scrollPosition ? [
+                {
+                    translateX: !vertical ? scrollPosition.interpolate({
+                        inputRange: [offset - sliderWidth, offset + sliderWidth],
+                        outputRange: [-parallaxPadding, parallaxPadding],
+                        extrapolate: 'clamp'
+                    }) : 0
+                },
+                {
+                    translateY: vertical ? scrollPosition.interpolate({
+                        inputRange: [offset - sliderHeight, offset + sliderHeight],
+                        outputRange: [-parallaxPadding, parallaxPadding],
+                        extrapolate: 'clamp'
+                    }) : 0
+                }
+            ] : []
+        };
+
+        return (
+            <AnimatedImageComponent
+              {...other}
+              style={[styles.image, style, requiredStyles, dynamicStyles]}
+              onLoad={this._onLoad}
+              onError={status !== 3 ? this._onError : undefined} // prevent infinite-loop bug
+            />
+        );
+    }
+
+    get spinner () {
+        const { status } = this.state;
+        const { showSpinner, spinnerColor } = this.props;
+
+        return status === 1 && showSpinner ? (
+            <View style={styles.loaderContainer}>
+                <ActivityIndicator
+                  size={'small'}
+                  color={spinnerColor}
+                  animating={true}
+                />
+            </View>
+        ) : false;
+    }
+
+    render () {
+        const { containerStyle } = this.props;
+
+        return (
+            <View
+              ref={(c) => { this._container = c; }}
+              pointerEvents={'none'}
+              style={[containerStyle, styles.container]}
+              onLayout={this._measureLayout}
+            >
+                { this.image }
+                { this.spinner }
+            </View>
+        );
+    }
+}
diff --git a/node_modules/react-native-snap-carousel/src/parallaximage/ParallaxImage.style.js b/node_modules/react-native-snap-carousel/src/parallaximage/ParallaxImage.style.js
new file mode 100644
index 0000000..a71ea47
--- /dev/null
+++ b/node_modules/react-native-snap-carousel/src/parallaximage/ParallaxImage.style.js
@@ -0,0 +1,20 @@
+import { StyleSheet } from 'react-native';
+
+export default StyleSheet.create({
+    container: {
+        overflow: 'hidden',
+        alignItems: 'center',
+        justifyContent: 'center'
+    },
+    image: {
+        position: 'relative',
+        resizeMode: 'cover',
+        width: null,
+        height: null
+    },
+    loaderContainer: {
+        ...StyleSheet.absoluteFillObject,
+        alignItems: 'center',
+        justifyContent: 'center'
+    }
+});
diff --git a/node_modules/react-native-snap-carousel/src/utils/animations.js b/node_modules/react-native-snap-carousel/src/utils/animations.js
new file mode 100644
index 0000000..bdb58b6
--- /dev/null
+++ b/node_modules/react-native-snap-carousel/src/utils/animations.js
@@ -0,0 +1,325 @@
+import { Platform } from 'react-native';
+
+const IS_ANDROID = Platform.OS === 'android';
+
+// Get scroll interpolator's input range from an array of slide indexes
+// Indexes are relative to the current active slide (index 0)
+// For example, using [3, 2, 1, 0, -1] will return:
+// [
+//     (index - 3) * sizeRef, // active + 3
+//     (index - 2) * sizeRef, // active + 2
+//     (index - 1) * sizeRef, // active + 1
+//     index * sizeRef, // active
+//     (index + 1) * sizeRef // active - 1
+// ]
+export function getInputRangeFromIndexes (range, index, carouselProps) {
+    const sizeRef = carouselProps.vertical ? carouselProps.itemHeight : carouselProps.itemWidth;
+    let inputRange = [];
+
+    for (let i = 0; i < range.length; i++) {
+        inputRange.push((index - range[i]) * sizeRef);
+    }
+
+    return inputRange;
+}
+
+// Default behavior
+// Scale and/or opacity effect
+// Based on props 'inactiveSlideOpacity' and 'inactiveSlideScale'
+export function defaultScrollInterpolator (index, carouselProps) {
+    const range = [1, 0, -1];
+    const inputRange = getInputRangeFromIndexes(range, index, carouselProps);
+    const outputRange = [0, 1, 0];
+
+    return { inputRange, outputRange };
+}
+export function defaultAnimatedStyles (index, animatedValue, carouselProps) {
+    let animatedOpacity = {};
+    let animatedScale = {};
+
+    if (carouselProps.inactiveSlideOpacity < 1) {
+        animatedOpacity = {
+            opacity: animatedValue.interpolate({
+                inputRange: [0, 1],
+                outputRange: [carouselProps.inactiveSlideOpacity, 1]
+            })
+        };
+    }
+
+    if (carouselProps.inactiveSlideScale < 1) {
+        animatedScale = {
+            transform: [{
+                scale: animatedValue.interpolate({
+                    inputRange: [0, 1],
+                    outputRange: [carouselProps.inactiveSlideScale, 1]
+                })
+            }]
+        };
+    }
+
+    return {
+        ...animatedOpacity,
+        ...animatedScale
+    };
+}
+
+// Shift animation
+// Same as the default one, but the active slide is also shifted up or down
+// Based on prop 'inactiveSlideShift'
+export function shiftAnimatedStyles (index, animatedValue, carouselProps) {
+    let animatedOpacity = {};
+    let animatedScale = {};
+    let animatedTranslate = {};
+
+    if (carouselProps.inactiveSlideOpacity < 1) {
+        animatedOpacity = {
+            opacity: animatedValue.interpolate({
+                inputRange: [0, 1],
+                outputRange: [carouselProps.inactiveSlideOpacity, 1]
+            })
+        };
+    }
+
+    if (carouselProps.inactiveSlideScale < 1) {
+        animatedScale = {
+            scale: animatedValue.interpolate({
+                inputRange: [0, 1],
+                outputRange: [carouselProps.inactiveSlideScale, 1]
+            })
+        };
+    }
+
+    if (carouselProps.inactiveSlideShift !== 0) {
+        const translateProp = carouselProps.vertical ? 'translateX' : 'translateY';
+        animatedTranslate = {
+            [translateProp]: animatedValue.interpolate({
+                inputRange: [0, 1],
+                outputRange: [carouselProps.inactiveSlideShift, 0]
+            })
+        };
+    }
+
+    return {
+        ...animatedOpacity,
+        transform: [
+            { ...animatedScale },
+            { ...animatedTranslate }
+        ]
+    };
+}
+
+// Stack animation
+// Imitate a deck/stack of cards (see #195)
+// WARNING: The effect had to be visually inverted on Android because this OS doesn't honor the `zIndex`property
+// This means that the item with the higher zIndex (and therefore the tap receiver) remains the one AFTER the currently active item
+// The `elevation` property compensates for that only visually, which is not good enough
+export function stackScrollInterpolator (index, carouselProps) {
+    const range = IS_ANDROID ?
+        [1, 0, -1, -2, -3] :
+        [3, 2, 1, 0, -1];
+    const inputRange = getInputRangeFromIndexes(range, index, carouselProps);
+    const outputRange = range;
+
+    return { inputRange, outputRange };
+}
+export function stackAnimatedStyles (index, animatedValue, carouselProps, cardOffset) {
+    const sizeRef = carouselProps.vertical ? carouselProps.itemHeight : carouselProps.itemWidth;
+    const translateProp = carouselProps.vertical ? 'translateY' : 'translateX';
+
+    const card1Scale = 0.9;
+    const card2Scale = 0.8;
+
+    cardOffset = !cardOffset && cardOffset !== 0 ? 18 : cardOffset;
+
+    const getTranslateFromScale = (cardIndex, scale) => {
+        const centerFactor = 1 / scale * cardIndex;
+        const centeredPosition = -Math.round(sizeRef * centerFactor);
+        const edgeAlignment = Math.round((sizeRef - (sizeRef * scale)) / 2);
+        const offset = Math.round(cardOffset * Math.abs(cardIndex) / scale);
+
+        return IS_ANDROID ?
+            centeredPosition - edgeAlignment - offset :
+            centeredPosition + edgeAlignment + offset;
+    };
+
+    const opacityOutputRange = carouselProps.inactiveSlideOpacity === 1 ? [1, 1, 1, 0] : [1, 0.75, 0.5, 0];
+
+    return IS_ANDROID ? {
+        // elevation: carouselProps.data.length - index, // fix zIndex bug visually, but not from a logic point of view
+        opacity: animatedValue.interpolate({
+            inputRange: [-3, -2, -1, 0],
+            outputRange: opacityOutputRange.reverse(),
+            extrapolate: 'clamp'
+        }),
+        transform: [{
+            scale: animatedValue.interpolate({
+                inputRange: [-2, -1, 0, 1],
+                outputRange: [card2Scale, card1Scale, 1, card1Scale],
+                extrapolate: 'clamp'
+            })
+        }, {
+            [translateProp]: animatedValue.interpolate({
+                inputRange: [-3, -2, -1, 0, 1],
+                outputRange: [
+                    getTranslateFromScale(-3, card2Scale),
+                    getTranslateFromScale(-2, card2Scale),
+                    getTranslateFromScale(-1, card1Scale),
+                    0,
+                    sizeRef * 0.5
+                ],
+                extrapolate: 'clamp'
+            })
+        }]
+    } : {
+        zIndex: carouselProps.data.length - index,
+        opacity: animatedValue.interpolate({
+            inputRange: [0, 1, 2, 3],
+            outputRange: opacityOutputRange,
+            extrapolate: 'clamp'
+        }),
+        transform: [{
+            scale: animatedValue.interpolate({
+                inputRange: [-1, 0, 1, 2],
+                outputRange: [card1Scale, 1, card1Scale, card2Scale],
+                extrapolate: 'clamp'
+            })
+        }, {
+            [translateProp]: animatedValue.interpolate({
+                inputRange: [-1, 0, 1, 2, 3],
+                outputRange: [
+                    -sizeRef * 0.5,
+                    0,
+                    getTranslateFromScale(1, card1Scale),
+                    getTranslateFromScale(2, card2Scale),
+                    getTranslateFromScale(3, card2Scale)
+                ],
+                extrapolate: 'clamp'
+            })
+        }]
+    };
+}
+
+// Tinder animation
+// Imitate the popular Tinder layout
+// WARNING: The effect had to be visually inverted on Android because this OS doesn't honor the `zIndex`property
+// This means that the item with the higher zIndex (and therefore the tap receiver) remains the one AFTER the currently active item
+// The `elevation` property compensates for that only visually, which is not good enough
+export function tinderScrollInterpolator (index, carouselProps) {
+    const range = IS_ANDROID ?
+        [1, 0, -1, -2, -3] :
+        [3, 2, 1, 0, -1];
+    const inputRange = getInputRangeFromIndexes(range, index, carouselProps);
+    const outputRange = range;
+
+    return { inputRange, outputRange };
+}
+export function tinderAnimatedStyles (index, animatedValue, carouselProps, cardOffset) {
+    const sizeRef = carouselProps.vertical ? carouselProps.itemHeight : carouselProps.itemWidth;
+    const mainTranslateProp = carouselProps.vertical ? 'translateY' : 'translateX';
+    const secondaryTranslateProp = carouselProps.vertical ? 'translateX' : 'translateY';
+
+    const card1Scale = 0.96;
+    const card2Scale = 0.92;
+    const card3Scale = 0.88;
+
+    const peekingCardsOpacity = IS_ANDROID ? 0.92 : 1;
+
+    cardOffset = !cardOffset && cardOffset !== 0 ? 9 : cardOffset;
+
+    const getMainTranslateFromScale = (cardIndex, scale) => {
+        const centerFactor = 1 / scale * cardIndex;
+        return -Math.round(sizeRef * centerFactor);
+    };
+
+    const getSecondaryTranslateFromScale = (cardIndex, scale) => {
+        return Math.round(cardOffset * Math.abs(cardIndex) / scale);
+    };
+
+    return IS_ANDROID ? {
+        // elevation: carouselProps.data.length - index, // fix zIndex bug visually, but not from a logic point of view
+        opacity: animatedValue.interpolate({
+            inputRange: [-3, -2, -1, 0, 1],
+            outputRange: [0, peekingCardsOpacity, peekingCardsOpacity, 1, 0],
+            extrapolate: 'clamp'
+        }),
+        transform: [{
+            scale: animatedValue.interpolate({
+                inputRange: [-3, -2, -1, 0],
+                outputRange: [card3Scale, card2Scale, card1Scale, 1],
+                extrapolate: 'clamp'
+            })
+        }, {
+            rotate: animatedValue.interpolate({
+                inputRange: [0, 1],
+                outputRange: ['0deg', '22deg'],
+                extrapolate: 'clamp'
+            })
+        }, {
+            [mainTranslateProp]: animatedValue.interpolate({
+                inputRange: [-3, -2, -1, 0, 1],
+                outputRange: [
+                    getMainTranslateFromScale(-3, card3Scale),
+                    getMainTranslateFromScale(-2, card2Scale),
+                    getMainTranslateFromScale(-1, card1Scale),
+                    0,
+                    sizeRef * 1.1
+                ],
+                extrapolate: 'clamp'
+            })
+        }, {
+            [secondaryTranslateProp]: animatedValue.interpolate({
+                inputRange: [-3, -2, -1, 0],
+                outputRange: [
+                    getSecondaryTranslateFromScale(-3, card3Scale),
+                    getSecondaryTranslateFromScale(-2, card2Scale),
+                    getSecondaryTranslateFromScale(-1, card1Scale),
+                    0
+                ],
+                extrapolate: 'clamp'
+            })
+        }]
+    } : {
+        zIndex: carouselProps.data.length - index,
+        opacity: animatedValue.interpolate({
+            inputRange: [-1, 0, 1, 2, 3],
+            outputRange: [0, 1, peekingCardsOpacity, peekingCardsOpacity, 0],
+            extrapolate: 'clamp'
+        }),
+        transform: [{
+            scale: animatedValue.interpolate({
+                inputRange: [0, 1, 2, 3],
+                outputRange: [1, card1Scale, card2Scale, card3Scale],
+                extrapolate: 'clamp'
+            })
+        }, {
+            rotate: animatedValue.interpolate({
+                inputRange: [-1, 0],
+                outputRange: ['-22deg', '0deg'],
+                extrapolate: 'clamp'
+            })
+        }, {
+            [mainTranslateProp]: animatedValue.interpolate({
+                inputRange: [-1, 0, 1, 2, 3],
+                outputRange: [
+                    -sizeRef * 1.1,
+                    0,
+                    getMainTranslateFromScale(1, card1Scale),
+                    getMainTranslateFromScale(2, card2Scale),
+                    getMainTranslateFromScale(3, card3Scale)
+                ],
+                extrapolate: 'clamp'
+            })
+        }, {
+            [secondaryTranslateProp]: animatedValue.interpolate({
+                inputRange: [0, 1, 2, 3],
+                outputRange: [
+                    0,
+                    getSecondaryTranslateFromScale(1, card1Scale),
+                    getSecondaryTranslateFromScale(2, card2Scale),
+                    getSecondaryTranslateFromScale(3, card3Scale)
+                ],
+                extrapolate: 'clamp'
+            })
+        }]
+    };
+}
diff --git a/node_modules/react-native-snap-carousel/yarn.lock b/node_modules/react-native-snap-carousel/yarn.lock
deleted file mode 100644
index e621a50..0000000
--- a/node_modules/react-native-snap-carousel/yarn.lock
+++ /dev/null
@@ -1,1294 +0,0 @@
-# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
-# yarn lockfile v1
-
-
-acorn-jsx@^3.0.0, acorn-jsx@^3.0.1:
-  version "3.0.1"
-  resolved "https://registry.yarnpkg.com/acorn-jsx/-/acorn-jsx-3.0.1.tgz#afdf9488fb1ecefc8348f6fb22f464e32a58b36b"
-  dependencies:
-    acorn "^3.0.4"
-
-acorn@^3.0.4:
-  version "3.3.0"
-  resolved "https://registry.yarnpkg.com/acorn/-/acorn-3.3.0.tgz#45e37fb39e8da3f25baee3ff5369e2bb5f22017a"
-
-acorn@^4.0.1:
-  version "4.0.3"
-  resolved "https://registry.yarnpkg.com/acorn/-/acorn-4.0.3.tgz#1a3e850b428e73ba6b09d1cc527f5aaad4d03ef1"
-
-ajv-keywords@^1.0.0:
-  version "1.1.1"
-  resolved "https://registry.yarnpkg.com/ajv-keywords/-/ajv-keywords-1.1.1.tgz#02550bc605a3e576041565628af972e06c549d50"
-
-ajv@^4.7.0:
-  version "4.9.0"
-  resolved "https://registry.yarnpkg.com/ajv/-/ajv-4.9.0.tgz#5a358085747b134eb567d6d15e015f1d7802f45c"
-  dependencies:
-    co "^4.6.0"
-    json-stable-stringify "^1.0.1"
-
-ansi-escapes@^1.1.0:
-  version "1.4.0"
-  resolved "https://registry.yarnpkg.com/ansi-escapes/-/ansi-escapes-1.4.0.tgz#d3a8a83b319aa67793662b13e761c7911422306e"
-
-ansi-regex@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/ansi-regex/-/ansi-regex-2.0.0.tgz#c5061b6e0ef8a81775e50f5d66151bf6bf371107"
-
-ansi-styles@^2.2.1:
-  version "2.2.1"
-  resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-2.2.1.tgz#b432dd3358b634cf75e1e4664368240533c1ddbe"
-
-argparse@^1.0.7:
-  version "1.0.9"
-  resolved "https://registry.yarnpkg.com/argparse/-/argparse-1.0.9.tgz#73d83bc263f86e97f8cc4f6bae1b0e90a7d22c86"
-  dependencies:
-    sprintf-js "~1.0.2"
-
-array-union@^1.0.1:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/array-union/-/array-union-1.0.2.tgz#9a34410e4f4e3da23dea375be5be70f24778ec39"
-  dependencies:
-    array-uniq "^1.0.1"
-
-array-uniq@^1.0.1:
-  version "1.0.3"
-  resolved "https://registry.yarnpkg.com/array-uniq/-/array-uniq-1.0.3.tgz#af6ac877a25cc7f74e058894753858dfdb24fdb6"
-
-arrify@^1.0.0:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/arrify/-/arrify-1.0.1.tgz#898508da2226f380df904728456849c1501a4b0d"
-
-babel-code-frame@^6.16.0:
-  version "6.16.0"
-  resolved "https://registry.yarnpkg.com/babel-code-frame/-/babel-code-frame-6.16.0.tgz#f90e60da0862909d3ce098733b5d3987c97cb8de"
-  dependencies:
-    chalk "^1.1.0"
-    esutils "^2.0.2"
-    js-tokens "^2.0.0"
-
-babel-eslint@^6.1.2:
-  version "6.1.2"
-  resolved "https://registry.yarnpkg.com/babel-eslint/-/babel-eslint-6.1.2.tgz#5293419fe3672d66598d327da9694567ba6a5f2f"
-  dependencies:
-    babel-traverse "^6.0.20"
-    babel-types "^6.0.19"
-    babylon "^6.0.18"
-    lodash.assign "^4.0.0"
-    lodash.pickby "^4.0.0"
-
-babel-helper-builder-react-jsx@^6.8.0:
-  version "6.18.0"
-  resolved "https://registry.yarnpkg.com/babel-helper-builder-react-jsx/-/babel-helper-builder-react-jsx-6.18.0.tgz#ab02f19a2eb7ace936dd87fa55896d02be59bf71"
-  dependencies:
-    babel-runtime "^6.9.0"
-    babel-types "^6.18.0"
-    esutils "^2.0.0"
-    lodash "^4.2.0"
-
-babel-helper-call-delegate@^6.18.0:
-  version "6.18.0"
-  resolved "https://registry.yarnpkg.com/babel-helper-call-delegate/-/babel-helper-call-delegate-6.18.0.tgz#05b14aafa430884b034097ef29e9f067ea4133bd"
-  dependencies:
-    babel-helper-hoist-variables "^6.18.0"
-    babel-runtime "^6.0.0"
-    babel-traverse "^6.18.0"
-    babel-types "^6.18.0"
-
-babel-helper-define-map@^6.18.0, babel-helper-define-map@^6.8.0:
-  version "6.18.0"
-  resolved "https://registry.yarnpkg.com/babel-helper-define-map/-/babel-helper-define-map-6.18.0.tgz#8d6c85dc7fbb4c19be3de40474d18e97c3676ec2"
-  dependencies:
-    babel-helper-function-name "^6.18.0"
-    babel-runtime "^6.9.0"
-    babel-types "^6.18.0"
-    lodash "^4.2.0"
-
-babel-helper-function-name@^6.18.0, babel-helper-function-name@^6.8.0:
-  version "6.18.0"
-  resolved "https://registry.yarnpkg.com/babel-helper-function-name/-/babel-helper-function-name-6.18.0.tgz#68ec71aeba1f3e28b2a6f0730190b754a9bf30e6"
-  dependencies:
-    babel-helper-get-function-arity "^6.18.0"
-    babel-runtime "^6.0.0"
-    babel-template "^6.8.0"
-    babel-traverse "^6.18.0"
-    babel-types "^6.18.0"
-
-babel-helper-get-function-arity@^6.18.0:
-  version "6.18.0"
-  resolved "https://registry.yarnpkg.com/babel-helper-get-function-arity/-/babel-helper-get-function-arity-6.18.0.tgz#a5b19695fd3f9cdfc328398b47dafcd7094f9f24"
-  dependencies:
-    babel-runtime "^6.0.0"
-    babel-types "^6.18.0"
-
-babel-helper-hoist-variables@^6.18.0:
-  version "6.18.0"
-  resolved "https://registry.yarnpkg.com/babel-helper-hoist-variables/-/babel-helper-hoist-variables-6.18.0.tgz#a835b5ab8b46d6de9babefae4d98ea41e866b82a"
-  dependencies:
-    babel-runtime "^6.0.0"
-    babel-types "^6.18.0"
-
-babel-helper-optimise-call-expression@^6.18.0:
-  version "6.18.0"
-  resolved "https://registry.yarnpkg.com/babel-helper-optimise-call-expression/-/babel-helper-optimise-call-expression-6.18.0.tgz#9261d0299ee1a4f08a6dd28b7b7c777348fd8f0f"
-  dependencies:
-    babel-runtime "^6.0.0"
-    babel-types "^6.18.0"
-
-babel-helper-replace-supers@^6.18.0:
-  version "6.18.0"
-  resolved "https://registry.yarnpkg.com/babel-helper-replace-supers/-/babel-helper-replace-supers-6.18.0.tgz#28ec69877be4144dbd64f4cc3a337e89f29a924e"
-  dependencies:
-    babel-helper-optimise-call-expression "^6.18.0"
-    babel-messages "^6.8.0"
-    babel-runtime "^6.0.0"
-    babel-template "^6.16.0"
-    babel-traverse "^6.18.0"
-    babel-types "^6.18.0"
-
-babel-messages@^6.8.0:
-  version "6.8.0"
-  resolved "https://registry.yarnpkg.com/babel-messages/-/babel-messages-6.8.0.tgz#bf504736ca967e6d65ef0adb5a2a5f947c8e0eb9"
-  dependencies:
-    babel-runtime "^6.0.0"
-
-babel-plugin-check-es2015-constants@^6.5.0:
-  version "6.8.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-check-es2015-constants/-/babel-plugin-check-es2015-constants-6.8.0.tgz#dbf024c32ed37bfda8dee1e76da02386a8d26fe7"
-  dependencies:
-    babel-runtime "^6.0.0"
-
-babel-plugin-react-transform@2.0.2:
-  version "2.0.2"
-  resolved "https://registry.yarnpkg.com/babel-plugin-react-transform/-/babel-plugin-react-transform-2.0.2.tgz#515bbfa996893981142d90b1f9b1635de2995109"
-  dependencies:
-    lodash "^4.6.1"
-
-babel-plugin-syntax-async-functions@^6.5.0:
-  version "6.13.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-syntax-async-functions/-/babel-plugin-syntax-async-functions-6.13.0.tgz#cad9cad1191b5ad634bf30ae0872391e0647be95"
-
-babel-plugin-syntax-class-properties@^6.5.0, babel-plugin-syntax-class-properties@^6.8.0:
-  version "6.13.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-syntax-class-properties/-/babel-plugin-syntax-class-properties-6.13.0.tgz#d7eb23b79a317f8543962c505b827c7d6cac27de"
-
-babel-plugin-syntax-decorators@^6.1.18:
-  version "6.13.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-syntax-decorators/-/babel-plugin-syntax-decorators-6.13.0.tgz#312563b4dbde3cc806cee3e416cceeaddd11ac0b"
-
-babel-plugin-syntax-flow@^6.18.0, babel-plugin-syntax-flow@^6.5.0:
-  version "6.18.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-syntax-flow/-/babel-plugin-syntax-flow-6.18.0.tgz#4c3ab20a2af26aa20cd25995c398c4eb70310c8d"
-
-babel-plugin-syntax-jsx@^6.5.0, babel-plugin-syntax-jsx@^6.8.0:
-  version "6.18.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-syntax-jsx/-/babel-plugin-syntax-jsx-6.18.0.tgz#0af32a9a6e13ca7a3fd5069e62d7b0f58d0d8946"
-
-babel-plugin-syntax-object-rest-spread@^6.8.0:
-  version "6.13.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-syntax-object-rest-spread/-/babel-plugin-syntax-object-rest-spread-6.13.0.tgz#fd6536f2bce13836ffa3a5458c4903a597bb3bf5"
-
-babel-plugin-syntax-trailing-function-commas@^6.5.0:
-  version "6.13.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-syntax-trailing-function-commas/-/babel-plugin-syntax-trailing-function-commas-6.13.0.tgz#2b84b7d53dd744f94ff1fad7669406274b23f541"
-
-babel-plugin-transform-class-properties@^6.5.0:
-  version "6.19.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-transform-class-properties/-/babel-plugin-transform-class-properties-6.19.0.tgz#1274b349abaadc835164e2004f4a2444a2788d5f"
-  dependencies:
-    babel-helper-function-name "^6.18.0"
-    babel-plugin-syntax-class-properties "^6.8.0"
-    babel-runtime "^6.9.1"
-    babel-template "^6.15.0"
-
-babel-plugin-transform-decorators-legacy@^1.3.4:
-  version "1.3.4"
-  resolved "https://registry.yarnpkg.com/babel-plugin-transform-decorators-legacy/-/babel-plugin-transform-decorators-legacy-1.3.4.tgz#741b58f6c5bce9e6027e0882d9c994f04f366925"
-  dependencies:
-    babel-plugin-syntax-decorators "^6.1.18"
-    babel-runtime "^6.2.0"
-    babel-template "^6.3.0"
-
-babel-plugin-transform-es2015-arrow-functions@^6.5.0:
-  version "6.8.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-transform-es2015-arrow-functions/-/babel-plugin-transform-es2015-arrow-functions-6.8.0.tgz#5b63afc3181bdc9a8c4d481b5a4f3f7d7fef3d9d"
-  dependencies:
-    babel-runtime "^6.0.0"
-
-babel-plugin-transform-es2015-block-scoping@^6.5.0:
-  version "6.18.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-transform-es2015-block-scoping/-/babel-plugin-transform-es2015-block-scoping-6.18.0.tgz#3bfdcfec318d46df22525cdea88f1978813653af"
-  dependencies:
-    babel-runtime "^6.9.0"
-    babel-template "^6.15.0"
-    babel-traverse "^6.18.0"
-    babel-types "^6.18.0"
-    lodash "^4.2.0"
-
-babel-plugin-transform-es2015-classes@^6.5.0:
-  version "6.18.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-transform-es2015-classes/-/babel-plugin-transform-es2015-classes-6.18.0.tgz#ffe7a17321bf83e494dcda0ae3fc72df48ffd1d9"
-  dependencies:
-    babel-helper-define-map "^6.18.0"
-    babel-helper-function-name "^6.18.0"
-    babel-helper-optimise-call-expression "^6.18.0"
-    babel-helper-replace-supers "^6.18.0"
-    babel-messages "^6.8.0"
-    babel-runtime "^6.9.0"
-    babel-template "^6.14.0"
-    babel-traverse "^6.18.0"
-    babel-types "^6.18.0"
-
-babel-plugin-transform-es2015-computed-properties@^6.5.0:
-  version "6.8.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-transform-es2015-computed-properties/-/babel-plugin-transform-es2015-computed-properties-6.8.0.tgz#f51010fd61b3bd7b6b60a5fdfd307bb7a5279870"
-  dependencies:
-    babel-helper-define-map "^6.8.0"
-    babel-runtime "^6.0.0"
-    babel-template "^6.8.0"
-
-babel-plugin-transform-es2015-destructuring@^6.5.0:
-  version "6.19.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-transform-es2015-destructuring/-/babel-plugin-transform-es2015-destructuring-6.19.0.tgz#ff1d911c4b3f4cab621bd66702a869acd1900533"
-  dependencies:
-    babel-runtime "^6.9.0"
-
-babel-plugin-transform-es2015-for-of@^6.5.0:
-  version "6.18.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-transform-es2015-for-of/-/babel-plugin-transform-es2015-for-of-6.18.0.tgz#4c517504db64bf8cfc119a6b8f177211f2028a70"
-  dependencies:
-    babel-runtime "^6.0.0"
-
-babel-plugin-transform-es2015-function-name@^6.5.0:
-  version "6.9.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-transform-es2015-function-name/-/babel-plugin-transform-es2015-function-name-6.9.0.tgz#8c135b17dbd064e5bba56ec511baaee2fca82719"
-  dependencies:
-    babel-helper-function-name "^6.8.0"
-    babel-runtime "^6.9.0"
-    babel-types "^6.9.0"
-
-babel-plugin-transform-es2015-literals@^6.5.0:
-  version "6.8.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-transform-es2015-literals/-/babel-plugin-transform-es2015-literals-6.8.0.tgz#50aa2e5c7958fc2ab25d74ec117e0cc98f046468"
-  dependencies:
-    babel-runtime "^6.0.0"
-
-babel-plugin-transform-es2015-modules-commonjs@^6.5.0:
-  version "6.18.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-transform-es2015-modules-commonjs/-/babel-plugin-transform-es2015-modules-commonjs-6.18.0.tgz#c15ae5bb11b32a0abdcc98a5837baa4ee8d67bcc"
-  dependencies:
-    babel-plugin-transform-strict-mode "^6.18.0"
-    babel-runtime "^6.0.0"
-    babel-template "^6.16.0"
-    babel-types "^6.18.0"
-
-babel-plugin-transform-es2015-parameters@^6.5.0:
-  version "6.18.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-transform-es2015-parameters/-/babel-plugin-transform-es2015-parameters-6.18.0.tgz#9b2cfe238c549f1635ba27fc1daa858be70608b1"
-  dependencies:
-    babel-helper-call-delegate "^6.18.0"
-    babel-helper-get-function-arity "^6.18.0"
-    babel-runtime "^6.9.0"
-    babel-template "^6.16.0"
-    babel-traverse "^6.18.0"
-    babel-types "^6.18.0"
-
-babel-plugin-transform-es2015-shorthand-properties@^6.5.0:
-  version "6.18.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-transform-es2015-shorthand-properties/-/babel-plugin-transform-es2015-shorthand-properties-6.18.0.tgz#e2ede3b7df47bf980151926534d1dd0cbea58f43"
-  dependencies:
-    babel-runtime "^6.0.0"
-    babel-types "^6.18.0"
-
-babel-plugin-transform-es2015-spread@^6.5.0:
-  version "6.8.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-transform-es2015-spread/-/babel-plugin-transform-es2015-spread-6.8.0.tgz#0217f737e3b821fa5a669f187c6ed59205f05e9c"
-  dependencies:
-    babel-runtime "^6.0.0"
-
-babel-plugin-transform-es2015-template-literals@^6.5.0:
-  version "6.8.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-transform-es2015-template-literals/-/babel-plugin-transform-es2015-template-literals-6.8.0.tgz#86eb876d0a2c635da4ec048b4f7de9dfc897e66b"
-  dependencies:
-    babel-runtime "^6.0.0"
-
-babel-plugin-transform-flow-strip-types@^6.5.0:
-  version "6.18.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-transform-flow-strip-types/-/babel-plugin-transform-flow-strip-types-6.18.0.tgz#4d3e642158661e9b40db457c004a30817fa32592"
-  dependencies:
-    babel-plugin-syntax-flow "^6.18.0"
-    babel-runtime "^6.0.0"
-
-babel-plugin-transform-object-assign@^6.5.0:
-  version "6.8.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-transform-object-assign/-/babel-plugin-transform-object-assign-6.8.0.tgz#76e17f2dc0f36f14f548b9afd7aaef58d29ebb75"
-  dependencies:
-    babel-runtime "^6.0.0"
-
-babel-plugin-transform-object-rest-spread@^6.5.0:
-  version "6.19.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-transform-object-rest-spread/-/babel-plugin-transform-object-rest-spread-6.19.0.tgz#f6ac428ee3cb4c6aa00943ed1422ce813603b34c"
-  dependencies:
-    babel-plugin-syntax-object-rest-spread "^6.8.0"
-    babel-runtime "^6.0.0"
-
-babel-plugin-transform-react-display-name@^6.5.0:
-  version "6.8.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-transform-react-display-name/-/babel-plugin-transform-react-display-name-6.8.0.tgz#f7a084977383d728bdbdc2835bba0159577f660e"
-  dependencies:
-    babel-runtime "^6.0.0"
-
-babel-plugin-transform-react-jsx-source@^6.5.0:
-  version "6.9.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-transform-react-jsx-source/-/babel-plugin-transform-react-jsx-source-6.9.0.tgz#af684a05c2067a86e0957d4f343295ccf5dccf00"
-  dependencies:
-    babel-plugin-syntax-jsx "^6.8.0"
-    babel-runtime "^6.9.0"
-
-babel-plugin-transform-react-jsx@^6.5.0:
-  version "6.8.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-transform-react-jsx/-/babel-plugin-transform-react-jsx-6.8.0.tgz#94759942f70af18c617189aa7f3593f1644a71ab"
-  dependencies:
-    babel-helper-builder-react-jsx "^6.8.0"
-    babel-plugin-syntax-jsx "^6.8.0"
-    babel-runtime "^6.0.0"
-
-babel-plugin-transform-regenerator@^6.5.0:
-  version "6.16.1"
-  resolved "https://registry.yarnpkg.com/babel-plugin-transform-regenerator/-/babel-plugin-transform-regenerator-6.16.1.tgz#a75de6b048a14154aae14b0122756c5bed392f59"
-  dependencies:
-    babel-runtime "^6.9.0"
-    babel-types "^6.16.0"
-    private "~0.1.5"
-
-babel-plugin-transform-strict-mode@^6.18.0:
-  version "6.18.0"
-  resolved "https://registry.yarnpkg.com/babel-plugin-transform-strict-mode/-/babel-plugin-transform-strict-mode-6.18.0.tgz#df7cf2991fe046f44163dcd110d5ca43bc652b9d"
-  dependencies:
-    babel-runtime "^6.0.0"
-    babel-types "^6.18.0"
-
-babel-preset-react-native@^1.9.0:
-  version "1.9.0"
-  resolved "https://registry.yarnpkg.com/babel-preset-react-native/-/babel-preset-react-native-1.9.0.tgz#035fc06c65f4f2a02d0336a100b2da142f36dab1"
-  dependencies:
-    babel-plugin-check-es2015-constants "^6.5.0"
-    babel-plugin-react-transform "2.0.2"
-    babel-plugin-syntax-async-functions "^6.5.0"
-    babel-plugin-syntax-class-properties "^6.5.0"
-    babel-plugin-syntax-flow "^6.5.0"
-    babel-plugin-syntax-jsx "^6.5.0"
-    babel-plugin-syntax-trailing-function-commas "^6.5.0"
-    babel-plugin-transform-class-properties "^6.5.0"
-    babel-plugin-transform-es2015-arrow-functions "^6.5.0"
-    babel-plugin-transform-es2015-block-scoping "^6.5.0"
-    babel-plugin-transform-es2015-classes "^6.5.0"
-    babel-plugin-transform-es2015-computed-properties "^6.5.0"
-    babel-plugin-transform-es2015-destructuring "^6.5.0"
-    babel-plugin-transform-es2015-for-of "^6.5.0"
-    babel-plugin-transform-es2015-function-name "^6.5.0"
-    babel-plugin-transform-es2015-literals "^6.5.0"
-    babel-plugin-transform-es2015-modules-commonjs "^6.5.0"
-    babel-plugin-transform-es2015-parameters "^6.5.0"
-    babel-plugin-transform-es2015-shorthand-properties "^6.5.0"
-    babel-plugin-transform-es2015-spread "^6.5.0"
-    babel-plugin-transform-es2015-template-literals "^6.5.0"
-    babel-plugin-transform-flow-strip-types "^6.5.0"
-    babel-plugin-transform-object-assign "^6.5.0"
-    babel-plugin-transform-object-rest-spread "^6.5.0"
-    babel-plugin-transform-react-display-name "^6.5.0"
-    babel-plugin-transform-react-jsx "^6.5.0"
-    babel-plugin-transform-react-jsx-source "^6.5.0"
-    babel-plugin-transform-regenerator "^6.5.0"
-    react-transform-hmr "^1.0.4"
-
-babel-runtime@^6.0.0, babel-runtime@^6.2.0, babel-runtime@^6.9.0, babel-runtime@^6.9.1:
-  version "6.18.0"
-  resolved "https://registry.yarnpkg.com/babel-runtime/-/babel-runtime-6.18.0.tgz#0f4177ffd98492ef13b9f823e9994a02584c9078"
-  dependencies:
-    core-js "^2.4.0"
-    regenerator-runtime "^0.9.5"
-
-babel-template@^6.14.0, babel-template@^6.15.0, babel-template@^6.16.0, babel-template@^6.3.0, babel-template@^6.8.0:
-  version "6.16.0"
-  resolved "https://registry.yarnpkg.com/babel-template/-/babel-template-6.16.0.tgz#e149dd1a9f03a35f817ddbc4d0481988e7ebc8ca"
-  dependencies:
-    babel-runtime "^6.9.0"
-    babel-traverse "^6.16.0"
-    babel-types "^6.16.0"
-    babylon "^6.11.0"
-    lodash "^4.2.0"
-
-babel-traverse@^6.0.20, babel-traverse@^6.16.0, babel-traverse@^6.18.0:
-  version "6.19.0"
-  resolved "https://registry.yarnpkg.com/babel-traverse/-/babel-traverse-6.19.0.tgz#68363fb821e26247d52a519a84b2ceab8df4f55a"
-  dependencies:
-    babel-code-frame "^6.16.0"
-    babel-messages "^6.8.0"
-    babel-runtime "^6.9.0"
-    babel-types "^6.19.0"
-    babylon "^6.11.0"
-    debug "^2.2.0"
-    globals "^9.0.0"
-    invariant "^2.2.0"
-    lodash "^4.2.0"
-
-babel-types@^6.0.19, babel-types@^6.16.0, babel-types@^6.18.0, babel-types@^6.19.0, babel-types@^6.9.0:
-  version "6.19.0"
-  resolved "https://registry.yarnpkg.com/babel-types/-/babel-types-6.19.0.tgz#8db2972dbed01f1192a8b602ba1e1e4c516240b9"
-  dependencies:
-    babel-runtime "^6.9.1"
-    esutils "^2.0.2"
-    lodash "^4.2.0"
-    to-fast-properties "^1.0.1"
-
-babylon@^6.0.18, babylon@^6.11.0:
-  version "6.14.1"
-  resolved "https://registry.yarnpkg.com/babylon/-/babylon-6.14.1.tgz#956275fab72753ad9b3435d7afe58f8bf0a29815"
-
-balanced-match@^0.4.1:
-  version "0.4.2"
-  resolved "https://registry.yarnpkg.com/balanced-match/-/balanced-match-0.4.2.tgz#cb3f3e3c732dc0f01ee70b403f302e61d7709838"
-
-brace-expansion@^1.0.0:
-  version "1.1.6"
-  resolved "https://registry.yarnpkg.com/brace-expansion/-/brace-expansion-1.1.6.tgz#7197d7eaa9b87e648390ea61fc66c84427420df9"
-  dependencies:
-    balanced-match "^0.4.1"
-    concat-map "0.0.1"
-
-caller-path@^0.1.0:
-  version "0.1.0"
-  resolved "https://registry.yarnpkg.com/caller-path/-/caller-path-0.1.0.tgz#94085ef63581ecd3daa92444a8fe94e82577751f"
-  dependencies:
-    callsites "^0.2.0"
-
-callsites@^0.2.0:
-  version "0.2.0"
-  resolved "https://registry.yarnpkg.com/callsites/-/callsites-0.2.0.tgz#afab96262910a7f33c19a5775825c69f34e350ca"
-
-chalk@^1.0.0, chalk@^1.1.0, chalk@^1.1.1, chalk@^1.1.3:
-  version "1.1.3"
-  resolved "https://registry.yarnpkg.com/chalk/-/chalk-1.1.3.tgz#a8115c55e4a702fe4d150abd3872822a7e09fc98"
-  dependencies:
-    ansi-styles "^2.2.1"
-    escape-string-regexp "^1.0.2"
-    has-ansi "^2.0.0"
-    strip-ansi "^3.0.0"
-    supports-color "^2.0.0"
-
-circular-json@^0.3.0:
-  version "0.3.1"
-  resolved "https://registry.yarnpkg.com/circular-json/-/circular-json-0.3.1.tgz#be8b36aefccde8b3ca7aa2d6afc07a37242c0d2d"
-
-cli-cursor@^1.0.1:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/cli-cursor/-/cli-cursor-1.0.2.tgz#64da3f7d56a54412e59794bd62dc35295e8f2987"
-  dependencies:
-    restore-cursor "^1.0.1"
-
-cli-width@^2.0.0:
-  version "2.1.0"
-  resolved "https://registry.yarnpkg.com/cli-width/-/cli-width-2.1.0.tgz#b234ca209b29ef66fc518d9b98d5847b00edf00a"
-
-co@^4.6.0:
-  version "4.6.0"
-  resolved "https://registry.yarnpkg.com/co/-/co-4.6.0.tgz#6ea6bdf3d853ae54ccb8e47bfa0bf3f9031fb184"
-
-code-point-at@^1.0.0:
-  version "1.1.0"
-  resolved "https://registry.yarnpkg.com/code-point-at/-/code-point-at-1.1.0.tgz#0d070b4d043a5bea33a2f1a40e2edb3d9a4ccf77"
-
-concat-map@0.0.1:
-  version "0.0.1"
-  resolved "https://registry.yarnpkg.com/concat-map/-/concat-map-0.0.1.tgz#d8a96bd77fd68df7793a73036a3ba0d5405d477b"
-
-concat-stream@^1.4.6:
-  version "1.5.2"
-  resolved "https://registry.yarnpkg.com/concat-stream/-/concat-stream-1.5.2.tgz#708978624d856af41a5a741defdd261da752c266"
-  dependencies:
-    inherits "~2.0.1"
-    readable-stream "~2.0.0"
-    typedarray "~0.0.5"
-
-core-js@^2.4.0:
-  version "2.4.1"
-  resolved "https://registry.yarnpkg.com/core-js/-/core-js-2.4.1.tgz#4de911e667b0eae9124e34254b53aea6fc618d3e"
-
-core-util-is@~1.0.0:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/core-util-is/-/core-util-is-1.0.2.tgz#b5fd54220aa2bc5ab57aab7140c940754503c1a7"
-
-d@^0.1.1, d@~0.1.1:
-  version "0.1.1"
-  resolved "https://registry.yarnpkg.com/d/-/d-0.1.1.tgz#da184c535d18d8ee7ba2aa229b914009fae11309"
-  dependencies:
-    es5-ext "~0.10.2"
-
-debug@^2.1.1, debug@^2.2.0:
-  version "2.3.3"
-  resolved "https://registry.yarnpkg.com/debug/-/debug-2.3.3.tgz#40c453e67e6e13c901ddec317af8986cda9eff8c"
-  dependencies:
-    ms "0.7.2"
-
-deep-is@~0.1.3:
-  version "0.1.3"
-  resolved "https://registry.yarnpkg.com/deep-is/-/deep-is-0.1.3.tgz#b369d6fb5dbc13eecf524f91b070feedc357cf34"
-
-del@^2.0.2:
-  version "2.2.2"
-  resolved "https://registry.yarnpkg.com/del/-/del-2.2.2.tgz#c12c981d067846c84bcaf862cff930d907ffd1a8"
-  dependencies:
-    globby "^5.0.0"
-    is-path-cwd "^1.0.0"
-    is-path-in-cwd "^1.0.0"
-    object-assign "^4.0.1"
-    pify "^2.0.0"
-    pinkie-promise "^2.0.0"
-    rimraf "^2.2.8"
-
-doctrine@^1.2.2:
-  version "1.5.0"
-  resolved "https://registry.yarnpkg.com/doctrine/-/doctrine-1.5.0.tgz#379dce730f6166f76cefa4e6707a159b02c5a6fa"
-  dependencies:
-    esutils "^2.0.2"
-    isarray "^1.0.0"
-
-dom-walk@^0.1.0:
-  version "0.1.1"
-  resolved "https://registry.yarnpkg.com/dom-walk/-/dom-walk-0.1.1.tgz#672226dc74c8f799ad35307df936aba11acd6018"
-
-es5-ext@^0.10.7, es5-ext@^0.10.8, es5-ext@~0.10.11, es5-ext@~0.10.2, es5-ext@~0.10.7:
-  version "0.10.12"
-  resolved "https://registry.yarnpkg.com/es5-ext/-/es5-ext-0.10.12.tgz#aa84641d4db76b62abba5e45fd805ecbab140047"
-  dependencies:
-    es6-iterator "2"
-    es6-symbol "~3.1"
-
-es6-iterator@2:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/es6-iterator/-/es6-iterator-2.0.0.tgz#bd968567d61635e33c0b80727613c9cb4b096bac"
-  dependencies:
-    d "^0.1.1"
-    es5-ext "^0.10.7"
-    es6-symbol "3"
-
-es6-map@^0.1.3:
-  version "0.1.4"
-  resolved "https://registry.yarnpkg.com/es6-map/-/es6-map-0.1.4.tgz#a34b147be224773a4d7da8072794cefa3632b897"
-  dependencies:
-    d "~0.1.1"
-    es5-ext "~0.10.11"
-    es6-iterator "2"
-    es6-set "~0.1.3"
-    es6-symbol "~3.1.0"
-    event-emitter "~0.3.4"
-
-es6-set@~0.1.3:
-  version "0.1.4"
-  resolved "https://registry.yarnpkg.com/es6-set/-/es6-set-0.1.4.tgz#9516b6761c2964b92ff479456233a247dc707ce8"
-  dependencies:
-    d "~0.1.1"
-    es5-ext "~0.10.11"
-    es6-iterator "2"
-    es6-symbol "3"
-    event-emitter "~0.3.4"
-
-es6-symbol@3, es6-symbol@~3.1, es6-symbol@~3.1.0:
-  version "3.1.0"
-  resolved "https://registry.yarnpkg.com/es6-symbol/-/es6-symbol-3.1.0.tgz#94481c655e7a7cad82eba832d97d5433496d7ffa"
-  dependencies:
-    d "~0.1.1"
-    es5-ext "~0.10.11"
-
-es6-weak-map@^2.0.1:
-  version "2.0.1"
-  resolved "https://registry.yarnpkg.com/es6-weak-map/-/es6-weak-map-2.0.1.tgz#0d2bbd8827eb5fb4ba8f97fbfea50d43db21ea81"
-  dependencies:
-    d "^0.1.1"
-    es5-ext "^0.10.8"
-    es6-iterator "2"
-    es6-symbol "3"
-
-escape-string-regexp@^1.0.2, escape-string-regexp@^1.0.5:
-  version "1.0.5"
-  resolved "https://registry.yarnpkg.com/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz#1b61c0562190a8dff6ae3bb2cf0200ca130b86d4"
-
-escope@^3.6.0:
-  version "3.6.0"
-  resolved "https://registry.yarnpkg.com/escope/-/escope-3.6.0.tgz#e01975e812781a163a6dadfdd80398dc64c889c3"
-  dependencies:
-    es6-map "^0.1.3"
-    es6-weak-map "^2.0.1"
-    esrecurse "^4.1.0"
-    estraverse "^4.1.1"
-
-eslint-config-standard-jsx@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/eslint-config-standard-jsx/-/eslint-config-standard-jsx-2.0.0.tgz#26650353bda0d273368f5357c236af9ff54edf1e"
-
-eslint-config-standard-react@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/eslint-config-standard-react/-/eslint-config-standard-react-3.0.0.tgz#f28857a9a5828b19edd034d0b7f1959054ea9020"
-  dependencies:
-    eslint-config-standard-jsx "^2.0.0"
-
-eslint-config-standard@^5.3.5:
-  version "5.3.5"
-  resolved "https://registry.yarnpkg.com/eslint-config-standard/-/eslint-config-standard-5.3.5.tgz#2b42bb5c9f0049b8527868e109c34ee22b13dcf6"
-
-eslint-plugin-promise@^2.0.0:
-  version "2.0.1"
-  resolved "https://registry.yarnpkg.com/eslint-plugin-promise/-/eslint-plugin-promise-2.0.1.tgz#a9759cefa5e38ab11bb2ef65a04ef042309aa0a4"
-
-eslint-plugin-react@^6.3.0:
-  version "6.7.1"
-  resolved "https://registry.yarnpkg.com/eslint-plugin-react/-/eslint-plugin-react-6.7.1.tgz#1af96aea545856825157d97c1b50d5a8fb64a5a7"
-  dependencies:
-    doctrine "^1.2.2"
-    jsx-ast-utils "^1.3.3"
-
-eslint-plugin-standard@^2.0.0:
-  version "2.0.1"
-  resolved "https://registry.yarnpkg.com/eslint-plugin-standard/-/eslint-plugin-standard-2.0.1.tgz#3589699ff9c917f2c25f76a916687f641c369ff3"
-
-eslint@^3.6.1:
-  version "3.11.1"
-  resolved "https://registry.yarnpkg.com/eslint/-/eslint-3.11.1.tgz#408be581041385cba947cd8d1cd2227782b55dbf"
-  dependencies:
-    babel-code-frame "^6.16.0"
-    chalk "^1.1.3"
-    concat-stream "^1.4.6"
-    debug "^2.1.1"
-    doctrine "^1.2.2"
-    escope "^3.6.0"
-    espree "^3.3.1"
-    estraverse "^4.2.0"
-    esutils "^2.0.2"
-    file-entry-cache "^2.0.0"
-    glob "^7.0.3"
-    globals "^9.2.0"
-    ignore "^3.2.0"
-    imurmurhash "^0.1.4"
-    inquirer "^0.12.0"
-    is-my-json-valid "^2.10.0"
-    is-resolvable "^1.0.0"
-    js-yaml "^3.5.1"
-    json-stable-stringify "^1.0.0"
-    levn "^0.3.0"
-    lodash "^4.0.0"
-    mkdirp "^0.5.0"
-    natural-compare "^1.4.0"
-    optionator "^0.8.2"
-    path-is-inside "^1.0.1"
-    pluralize "^1.2.1"
-    progress "^1.1.8"
-    require-uncached "^1.0.2"
-    shelljs "^0.7.5"
-    strip-bom "^3.0.0"
-    strip-json-comments "~1.0.1"
-    table "^3.7.8"
-    text-table "~0.2.0"
-    user-home "^2.0.0"
-
-espree@^3.3.1:
-  version "3.3.2"
-  resolved "https://registry.yarnpkg.com/espree/-/espree-3.3.2.tgz#dbf3fadeb4ecb4d4778303e50103b3d36c88b89c"
-  dependencies:
-    acorn "^4.0.1"
-    acorn-jsx "^3.0.0"
-
-esprima@^2.6.0:
-  version "2.7.3"
-  resolved "https://registry.yarnpkg.com/esprima/-/esprima-2.7.3.tgz#96e3b70d5779f6ad49cd032673d1c312767ba581"
-
-esrecurse@^4.1.0:
-  version "4.1.0"
-  resolved "https://registry.yarnpkg.com/esrecurse/-/esrecurse-4.1.0.tgz#4713b6536adf7f2ac4f327d559e7756bff648220"
-  dependencies:
-    estraverse "~4.1.0"
-    object-assign "^4.0.1"
-
-estraverse@^4.1.1, estraverse@^4.2.0:
-  version "4.2.0"
-  resolved "https://registry.yarnpkg.com/estraverse/-/estraverse-4.2.0.tgz#0dee3fed31fcd469618ce7342099fc1afa0bdb13"
-
-estraverse@~4.1.0:
-  version "4.1.1"
-  resolved "https://registry.yarnpkg.com/estraverse/-/estraverse-4.1.1.tgz#f6caca728933a850ef90661d0e17982ba47111a2"
-
-esutils@^2.0.0, esutils@^2.0.2:
-  version "2.0.2"
-  resolved "https://registry.yarnpkg.com/esutils/-/esutils-2.0.2.tgz#0abf4f1caa5bcb1f7a9d8acc6dea4faaa04bac9b"
-
-event-emitter@~0.3.4:
-  version "0.3.4"
-  resolved "https://registry.yarnpkg.com/event-emitter/-/event-emitter-0.3.4.tgz#8d63ddfb4cfe1fae3b32ca265c4c720222080bb5"
-  dependencies:
-    d "~0.1.1"
-    es5-ext "~0.10.7"
-
-exit-hook@^1.0.0:
-  version "1.1.1"
-  resolved "https://registry.yarnpkg.com/exit-hook/-/exit-hook-1.1.1.tgz#f05ca233b48c05d54fff07765df8507e95c02ff8"
-
-fast-levenshtein@~2.0.4:
-  version "2.0.5"
-  resolved "https://registry.yarnpkg.com/fast-levenshtein/-/fast-levenshtein-2.0.5.tgz#bd33145744519ab1c36c3ee9f31f08e9079b67f2"
-
-figures@^1.3.5:
-  version "1.7.0"
-  resolved "https://registry.yarnpkg.com/figures/-/figures-1.7.0.tgz#cbe1e3affcf1cd44b80cadfed28dc793a9701d2e"
-  dependencies:
-    escape-string-regexp "^1.0.5"
-    object-assign "^4.1.0"
-
-file-entry-cache@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/file-entry-cache/-/file-entry-cache-2.0.0.tgz#c392990c3e684783d838b8c84a45d8a048458361"
-  dependencies:
-    flat-cache "^1.2.1"
-    object-assign "^4.0.1"
-
-flat-cache@^1.2.1:
-  version "1.2.1"
-  resolved "https://registry.yarnpkg.com/flat-cache/-/flat-cache-1.2.1.tgz#6c837d6225a7de5659323740b36d5361f71691ff"
-  dependencies:
-    circular-json "^0.3.0"
-    del "^2.0.2"
-    graceful-fs "^4.1.2"
-    write "^0.2.1"
-
-fs.realpath@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/fs.realpath/-/fs.realpath-1.0.0.tgz#1504ad2523158caa40db4a2787cb01411994ea4f"
-
-generate-function@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/generate-function/-/generate-function-2.0.0.tgz#6858fe7c0969b7d4e9093337647ac79f60dfbe74"
-
-generate-object-property@^1.1.0:
-  version "1.2.0"
-  resolved "https://registry.yarnpkg.com/generate-object-property/-/generate-object-property-1.2.0.tgz#9c0e1c40308ce804f4783618b937fa88f99d50d0"
-  dependencies:
-    is-property "^1.0.0"
-
-glob@^7.0.0, glob@^7.0.3, glob@^7.0.5:
-  version "7.1.1"
-  resolved "https://registry.yarnpkg.com/glob/-/glob-7.1.1.tgz#805211df04faaf1c63a3600306cdf5ade50b2ec8"
-  dependencies:
-    fs.realpath "^1.0.0"
-    inflight "^1.0.4"
-    inherits "2"
-    minimatch "^3.0.2"
-    once "^1.3.0"
-    path-is-absolute "^1.0.0"
-
-global@^4.3.0:
-  version "4.3.1"
-  resolved "https://registry.yarnpkg.com/global/-/global-4.3.1.tgz#5f757908c7cbabce54f386ae440e11e26b7916df"
-  dependencies:
-    min-document "^2.19.0"
-    process "~0.5.1"
-
-globals@^9.0.0, globals@^9.2.0:
-  version "9.14.0"
-  resolved "https://registry.yarnpkg.com/globals/-/globals-9.14.0.tgz#8859936af0038741263053b39d0e76ca241e4034"
-
-globby@^5.0.0:
-  version "5.0.0"
-  resolved "https://registry.yarnpkg.com/globby/-/globby-5.0.0.tgz#ebd84667ca0dbb330b99bcfc68eac2bc54370e0d"
-  dependencies:
-    array-union "^1.0.1"
-    arrify "^1.0.0"
-    glob "^7.0.3"
-    object-assign "^4.0.1"
-    pify "^2.0.0"
-    pinkie-promise "^2.0.0"
-
-graceful-fs@^4.1.2:
-  version "4.1.11"
-  resolved "https://registry.yarnpkg.com/graceful-fs/-/graceful-fs-4.1.11.tgz#0e8bdfe4d1ddb8854d64e04ea7c00e2a026e5658"
-
-has-ansi@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/has-ansi/-/has-ansi-2.0.0.tgz#34f5049ce1ecdf2b0649af3ef24e45ed35416d91"
-  dependencies:
-    ansi-regex "^2.0.0"
-
-ignore@^3.2.0:
-  version "3.2.0"
-  resolved "https://registry.yarnpkg.com/ignore/-/ignore-3.2.0.tgz#8d88f03c3002a0ac52114db25d2c673b0bf1e435"
-
-imurmurhash@^0.1.4:
-  version "0.1.4"
-  resolved "https://registry.yarnpkg.com/imurmurhash/-/imurmurhash-0.1.4.tgz#9218b9b2b928a238b13dc4fb6b6d576f231453ea"
-
-inflight@^1.0.4:
-  version "1.0.6"
-  resolved "https://registry.yarnpkg.com/inflight/-/inflight-1.0.6.tgz#49bd6331d7d02d0c09bc910a1075ba8165b56df9"
-  dependencies:
-    once "^1.3.0"
-    wrappy "1"
-
-inherits@2, inherits@~2.0.1:
-  version "2.0.3"
-  resolved "https://registry.yarnpkg.com/inherits/-/inherits-2.0.3.tgz#633c2c83e3da42a502f52466022480f4208261de"
-
-inquirer@^0.12.0:
-  version "0.12.0"
-  resolved "https://registry.yarnpkg.com/inquirer/-/inquirer-0.12.0.tgz#1ef2bfd63504df0bc75785fff8c2c41df12f077e"
-  dependencies:
-    ansi-escapes "^1.1.0"
-    ansi-regex "^2.0.0"
-    chalk "^1.0.0"
-    cli-cursor "^1.0.1"
-    cli-width "^2.0.0"
-    figures "^1.3.5"
-    lodash "^4.3.0"
-    readline2 "^1.0.1"
-    run-async "^0.1.0"
-    rx-lite "^3.1.2"
-    string-width "^1.0.1"
-    strip-ansi "^3.0.0"
-    through "^2.3.6"
-
-interpret@^1.0.0:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/interpret/-/interpret-1.0.1.tgz#d579fb7f693b858004947af39fa0db49f795602c"
-
-invariant@^2.2.0:
-  version "2.2.2"
-  resolved "https://registry.yarnpkg.com/invariant/-/invariant-2.2.2.tgz#9e1f56ac0acdb6bf303306f338be3b204ae60360"
-  dependencies:
-    loose-envify "^1.0.0"
-
-is-fullwidth-code-point@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/is-fullwidth-code-point/-/is-fullwidth-code-point-1.0.0.tgz#ef9e31386f031a7f0d643af82fde50c457ef00cb"
-  dependencies:
-    number-is-nan "^1.0.0"
-
-is-fullwidth-code-point@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz#a3b30a5c4f199183167aaab93beefae3ddfb654f"
-
-is-my-json-valid@^2.10.0:
-  version "2.15.0"
-  resolved "https://registry.yarnpkg.com/is-my-json-valid/-/is-my-json-valid-2.15.0.tgz#936edda3ca3c211fd98f3b2d3e08da43f7b2915b"
-  dependencies:
-    generate-function "^2.0.0"
-    generate-object-property "^1.1.0"
-    jsonpointer "^4.0.0"
-    xtend "^4.0.0"
-
-is-path-cwd@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/is-path-cwd/-/is-path-cwd-1.0.0.tgz#d225ec23132e89edd38fda767472e62e65f1106d"
-
-is-path-in-cwd@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/is-path-in-cwd/-/is-path-in-cwd-1.0.0.tgz#6477582b8214d602346094567003be8a9eac04dc"
-  dependencies:
-    is-path-inside "^1.0.0"
-
-is-path-inside@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/is-path-inside/-/is-path-inside-1.0.0.tgz#fc06e5a1683fbda13de667aff717bbc10a48f37f"
-  dependencies:
-    path-is-inside "^1.0.1"
-
-is-property@^1.0.0:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/is-property/-/is-property-1.0.2.tgz#57fe1c4e48474edd65b09911f26b1cd4095dda84"
-
-is-resolvable@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/is-resolvable/-/is-resolvable-1.0.0.tgz#8df57c61ea2e3c501408d100fb013cf8d6e0cc62"
-  dependencies:
-    tryit "^1.0.1"
-
-isarray@^1.0.0, isarray@~1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/isarray/-/isarray-1.0.0.tgz#bb935d48582cba168c06834957a54a3e07124f11"
-
-js-tokens@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/js-tokens/-/js-tokens-2.0.0.tgz#79903f5563ee778cc1162e6dcf1a0027c97f9cb5"
-
-js-yaml@^3.5.1:
-  version "3.7.0"
-  resolved "https://registry.yarnpkg.com/js-yaml/-/js-yaml-3.7.0.tgz#5c967ddd837a9bfdca5f2de84253abe8a1c03b80"
-  dependencies:
-    argparse "^1.0.7"
-    esprima "^2.6.0"
-
-json-stable-stringify@^1.0.0, json-stable-stringify@^1.0.1:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/json-stable-stringify/-/json-stable-stringify-1.0.1.tgz#9a759d39c5f2ff503fd5300646ed445f88c4f9af"
-  dependencies:
-    jsonify "~0.0.0"
-
-jsonify@~0.0.0:
-  version "0.0.0"
-  resolved "https://registry.yarnpkg.com/jsonify/-/jsonify-0.0.0.tgz#2c74b6ee41d93ca51b7b5aaee8f503631d252a73"
-
-jsonpointer@^4.0.0:
-  version "4.0.0"
-  resolved "https://registry.yarnpkg.com/jsonpointer/-/jsonpointer-4.0.0.tgz#6661e161d2fc445f19f98430231343722e1fcbd5"
-
-jsx-ast-utils@^1.3.3:
-  version "1.3.4"
-  resolved "https://registry.yarnpkg.com/jsx-ast-utils/-/jsx-ast-utils-1.3.4.tgz#0257ed1cc4b1e65b39d7d9940f9fb4f20f7ba0a9"
-  dependencies:
-    acorn-jsx "^3.0.1"
-    object-assign "^4.1.0"
-
-levn@^0.3.0, levn@~0.3.0:
-  version "0.3.0"
-  resolved "https://registry.yarnpkg.com/levn/-/levn-0.3.0.tgz#3b09924edf9f083c0490fdd4c0bc4421e04764ee"
-  dependencies:
-    prelude-ls "~1.1.2"
-    type-check "~0.3.2"
-
-lodash.assign@^4.0.0:
-  version "4.2.0"
-  resolved "https://registry.yarnpkg.com/lodash.assign/-/lodash.assign-4.2.0.tgz#0d99f3ccd7a6d261d19bdaeb9245005d285808e7"
-
-lodash.pickby@^4.0.0:
-  version "4.6.0"
-  resolved "https://registry.yarnpkg.com/lodash.pickby/-/lodash.pickby-4.6.0.tgz#7dea21d8c18d7703a27c704c15d3b84a67e33aff"
-
-lodash@^4.0.0, lodash@^4.2.0, lodash@^4.3.0, lodash@^4.6.1:
-  version "4.17.2"
-  resolved "https://registry.yarnpkg.com/lodash/-/lodash-4.17.2.tgz#34a3055babe04ce42467b607d700072c7ff6bf42"
-
-loose-envify@^1.0.0:
-  version "1.3.0"
-  resolved "https://registry.yarnpkg.com/loose-envify/-/loose-envify-1.3.0.tgz#6b26248c42f6d4fa4b0d8542f78edfcde35642a8"
-  dependencies:
-    js-tokens "^2.0.0"
-
-min-document@^2.19.0:
-  version "2.19.0"
-  resolved "https://registry.yarnpkg.com/min-document/-/min-document-2.19.0.tgz#7bd282e3f5842ed295bb748cdd9f1ffa2c824685"
-  dependencies:
-    dom-walk "^0.1.0"
-
-minimatch@^3.0.2:
-  version "3.0.3"
-  resolved "https://registry.yarnpkg.com/minimatch/-/minimatch-3.0.3.tgz#2a4e4090b96b2db06a9d7df01055a62a77c9b774"
-  dependencies:
-    brace-expansion "^1.0.0"
-
-minimist@0.0.8:
-  version "0.0.8"
-  resolved "https://registry.yarnpkg.com/minimist/-/minimist-0.0.8.tgz#857fcabfc3397d2625b8228262e86aa7a011b05d"
-
-mkdirp@^0.5.0, mkdirp@^0.5.1:
-  version "0.5.1"
-  resolved "https://registry.yarnpkg.com/mkdirp/-/mkdirp-0.5.1.tgz#30057438eac6cf7f8c4767f38648d6697d75c903"
-  dependencies:
-    minimist "0.0.8"
-
-ms@0.7.2:
-  version "0.7.2"
-  resolved "https://registry.yarnpkg.com/ms/-/ms-0.7.2.tgz#ae25cf2512b3885a1d95d7f037868d8431124765"
-
-mute-stream@0.0.5:
-  version "0.0.5"
-  resolved "https://registry.yarnpkg.com/mute-stream/-/mute-stream-0.0.5.tgz#8fbfabb0a98a253d3184331f9e8deb7372fac6c0"
-
-natural-compare@^1.4.0:
-  version "1.4.0"
-  resolved "https://registry.yarnpkg.com/natural-compare/-/natural-compare-1.4.0.tgz#4abebfeed7541f2c27acfb29bdbbd15c8d5ba4f7"
-
-number-is-nan@^1.0.0:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/number-is-nan/-/number-is-nan-1.0.1.tgz#097b602b53422a522c1afb8790318336941a011d"
-
-object-assign@^4.0.1, object-assign@^4.1.0:
-  version "4.1.0"
-  resolved "https://registry.yarnpkg.com/object-assign/-/object-assign-4.1.0.tgz#7a3b3d0e98063d43f4c03f2e8ae6cd51a86883a0"
-
-once@^1.3.0:
-  version "1.4.0"
-  resolved "https://registry.yarnpkg.com/once/-/once-1.4.0.tgz#583b1aa775961d4b113ac17d9c50baef9dd76bd1"
-  dependencies:
-    wrappy "1"
-
-onetime@^1.0.0:
-  version "1.1.0"
-  resolved "https://registry.yarnpkg.com/onetime/-/onetime-1.1.0.tgz#a1f7838f8314c516f05ecefcbc4ccfe04b4ed789"
-
-optionator@^0.8.2:
-  version "0.8.2"
-  resolved "https://registry.yarnpkg.com/optionator/-/optionator-0.8.2.tgz#364c5e409d3f4d6301d6c0b4c05bba50180aeb64"
-  dependencies:
-    deep-is "~0.1.3"
-    fast-levenshtein "~2.0.4"
-    levn "~0.3.0"
-    prelude-ls "~1.1.2"
-    type-check "~0.3.2"
-    wordwrap "~1.0.0"
-
-os-homedir@^1.0.0:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/os-homedir/-/os-homedir-1.0.2.tgz#ffbc4988336e0e833de0c168c7ef152121aa7fb3"
-
-path-is-absolute@^1.0.0:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/path-is-absolute/-/path-is-absolute-1.0.1.tgz#174b9268735534ffbc7ace6bf53a5a9e1b5c5f5f"
-
-path-is-inside@^1.0.1:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/path-is-inside/-/path-is-inside-1.0.2.tgz#365417dede44430d1c11af61027facf074bdfc53"
-
-pify@^2.0.0:
-  version "2.3.0"
-  resolved "https://registry.yarnpkg.com/pify/-/pify-2.3.0.tgz#ed141a6ac043a849ea588498e7dca8b15330e90c"
-
-pinkie-promise@^2.0.0:
-  version "2.0.1"
-  resolved "https://registry.yarnpkg.com/pinkie-promise/-/pinkie-promise-2.0.1.tgz#2135d6dfa7a358c069ac9b178776288228450ffa"
-  dependencies:
-    pinkie "^2.0.0"
-
-pinkie@^2.0.0:
-  version "2.0.4"
-  resolved "https://registry.yarnpkg.com/pinkie/-/pinkie-2.0.4.tgz#72556b80cfa0d48a974e80e77248e80ed4f7f870"
-
-pluralize@^1.2.1:
-  version "1.2.1"
-  resolved "https://registry.yarnpkg.com/pluralize/-/pluralize-1.2.1.tgz#d1a21483fd22bb41e58a12fa3421823140897c45"
-
-prelude-ls@~1.1.2:
-  version "1.1.2"
-  resolved "https://registry.yarnpkg.com/prelude-ls/-/prelude-ls-1.1.2.tgz#21932a549f5e52ffd9a827f570e04be62a97da54"
-
-private@~0.1.5:
-  version "0.1.6"
-  resolved "https://registry.yarnpkg.com/private/-/private-0.1.6.tgz#55c6a976d0f9bafb9924851350fe47b9b5fbb7c1"
-
-process-nextick-args@~1.0.6:
-  version "1.0.7"
-  resolved "https://registry.yarnpkg.com/process-nextick-args/-/process-nextick-args-1.0.7.tgz#150e20b756590ad3f91093f25a4f2ad8bff30ba3"
-
-process@~0.5.1:
-  version "0.5.2"
-  resolved "https://registry.yarnpkg.com/process/-/process-0.5.2.tgz#1638d8a8e34c2f440a91db95ab9aeb677fc185cf"
-
-progress@^1.1.8:
-  version "1.1.8"
-  resolved "https://registry.yarnpkg.com/progress/-/progress-1.1.8.tgz#e260c78f6161cdd9b0e56cc3e0a85de17c7a57be"
-
-react-addons-perf@^15.3.2:
-  version "15.4.1"
-  resolved "https://registry.yarnpkg.com/react-addons-perf/-/react-addons-perf-15.4.1.tgz#c6dd5a7011f43cd3222f47b7cb1aebe9d4174cb0"
-
-react-addons-shallow-compare@latest:
-  version "15.4.1"
-  resolved "https://registry.yarnpkg.com/react-addons-shallow-compare/-/react-addons-shallow-compare-15.4.1.tgz#b68103dd4d13144cb221065f6021de1822bd435a"
-
-react-deep-force-update@^1.0.0:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/react-deep-force-update/-/react-deep-force-update-1.0.1.tgz#f911b5be1d2a6fe387507dd6e9a767aa2924b4c7"
-
-react-proxy@^1.1.7:
-  version "1.1.8"
-  resolved "https://registry.yarnpkg.com/react-proxy/-/react-proxy-1.1.8.tgz#9dbfd9d927528c3aa9f444e4558c37830ab8c26a"
-  dependencies:
-    lodash "^4.6.1"
-    react-deep-force-update "^1.0.0"
-
-react-transform-hmr@^1.0.4:
-  version "1.0.4"
-  resolved "https://registry.yarnpkg.com/react-transform-hmr/-/react-transform-hmr-1.0.4.tgz#e1a40bd0aaefc72e8dfd7a7cda09af85066397bb"
-  dependencies:
-    global "^4.3.0"
-    react-proxy "^1.1.7"
-
-readable-stream@~2.0.0:
-  version "2.0.6"
-  resolved "https://registry.yarnpkg.com/readable-stream/-/readable-stream-2.0.6.tgz#8f90341e68a53ccc928788dacfcd11b36eb9b78e"
-  dependencies:
-    core-util-is "~1.0.0"
-    inherits "~2.0.1"
-    isarray "~1.0.0"
-    process-nextick-args "~1.0.6"
-    string_decoder "~0.10.x"
-    util-deprecate "~1.0.1"
-
-readline2@^1.0.1:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/readline2/-/readline2-1.0.1.tgz#41059608ffc154757b715d9989d199ffbf372e35"
-  dependencies:
-    code-point-at "^1.0.0"
-    is-fullwidth-code-point "^1.0.0"
-    mute-stream "0.0.5"
-
-rechoir@^0.6.2:
-  version "0.6.2"
-  resolved "https://registry.yarnpkg.com/rechoir/-/rechoir-0.6.2.tgz#85204b54dba82d5742e28c96756ef43af50e3384"
-  dependencies:
-    resolve "^1.1.6"
-
-regenerator-runtime@^0.9.5:
-  version "0.9.6"
-  resolved "https://registry.yarnpkg.com/regenerator-runtime/-/regenerator-runtime-0.9.6.tgz#d33eb95d0d2001a4be39659707c51b0cb71ce029"
-
-require-uncached@^1.0.2:
-  version "1.0.3"
-  resolved "https://registry.yarnpkg.com/require-uncached/-/require-uncached-1.0.3.tgz#4e0d56d6c9662fd31e43011c4b95aa49955421d3"
-  dependencies:
-    caller-path "^0.1.0"
-    resolve-from "^1.0.0"
-
-resolve-from@^1.0.0:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/resolve-from/-/resolve-from-1.0.1.tgz#26cbfe935d1aeeeabb29bc3fe5aeb01e93d44226"
-
-resolve@^1.1.6:
-  version "1.1.7"
-  resolved "https://registry.yarnpkg.com/resolve/-/resolve-1.1.7.tgz#203114d82ad2c5ed9e8e0411b3932875e889e97b"
-
-restore-cursor@^1.0.1:
-  version "1.0.1"
-  resolved "https://registry.yarnpkg.com/restore-cursor/-/restore-cursor-1.0.1.tgz#34661f46886327fed2991479152252df92daa541"
-  dependencies:
-    exit-hook "^1.0.0"
-    onetime "^1.0.0"
-
-rimraf@^2.2.8:
-  version "2.5.4"
-  resolved "https://registry.yarnpkg.com/rimraf/-/rimraf-2.5.4.tgz#96800093cbf1a0c86bd95b4625467535c29dfa04"
-  dependencies:
-    glob "^7.0.5"
-
-run-async@^0.1.0:
-  version "0.1.0"
-  resolved "https://registry.yarnpkg.com/run-async/-/run-async-0.1.0.tgz#c8ad4a5e110661e402a7d21b530e009f25f8e389"
-  dependencies:
-    once "^1.3.0"
-
-rx-lite@^3.1.2:
-  version "3.1.2"
-  resolved "https://registry.yarnpkg.com/rx-lite/-/rx-lite-3.1.2.tgz#19ce502ca572665f3b647b10939f97fd1615f102"
-
-shelljs@^0.7.5:
-  version "0.7.5"
-  resolved "https://registry.yarnpkg.com/shelljs/-/shelljs-0.7.5.tgz#2eef7a50a21e1ccf37da00df767ec69e30ad0675"
-  dependencies:
-    glob "^7.0.0"
-    interpret "^1.0.0"
-    rechoir "^0.6.2"
-
-slice-ansi@0.0.4:
-  version "0.0.4"
-  resolved "https://registry.yarnpkg.com/slice-ansi/-/slice-ansi-0.0.4.tgz#edbf8903f66f7ce2f8eafd6ceed65e264c831b35"
-
-sprintf-js@~1.0.2:
-  version "1.0.3"
-  resolved "https://registry.yarnpkg.com/sprintf-js/-/sprintf-js-1.0.3.tgz#04e6926f662895354f3dd015203633b857297e2c"
-
-string-width@^1.0.1:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/string-width/-/string-width-1.0.2.tgz#118bdf5b8cdc51a2a7e70d211e07e2b0b9b107d3"
-  dependencies:
-    code-point-at "^1.0.0"
-    is-fullwidth-code-point "^1.0.0"
-    strip-ansi "^3.0.0"
-
-string-width@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/string-width/-/string-width-2.0.0.tgz#635c5436cc72a6e0c387ceca278d4e2eec52687e"
-  dependencies:
-    is-fullwidth-code-point "^2.0.0"
-    strip-ansi "^3.0.0"
-
-string_decoder@~0.10.x:
-  version "0.10.31"
-  resolved "https://registry.yarnpkg.com/string_decoder/-/string_decoder-0.10.31.tgz#62e203bc41766c6c28c9fc84301dab1c5310fa94"
-
-strip-ansi@^3.0.0:
-  version "3.0.1"
-  resolved "https://registry.yarnpkg.com/strip-ansi/-/strip-ansi-3.0.1.tgz#6a385fb8853d952d5ff05d0e8aaf94278dc63dcf"
-  dependencies:
-    ansi-regex "^2.0.0"
-
-strip-bom@^3.0.0:
-  version "3.0.0"
-  resolved "https://registry.yarnpkg.com/strip-bom/-/strip-bom-3.0.0.tgz#2334c18e9c759f7bdd56fdef7e9ae3d588e68ed3"
-
-strip-json-comments@~1.0.1:
-  version "1.0.4"
-  resolved "https://registry.yarnpkg.com/strip-json-comments/-/strip-json-comments-1.0.4.tgz#1e15fbcac97d3ee99bf2d73b4c656b082bbafb91"
-
-supports-color@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-2.0.0.tgz#535d045ce6b6363fa40117084629995e9df324c7"
-
-table@^3.7.8:
-  version "3.8.3"
-  resolved "https://registry.yarnpkg.com/table/-/table-3.8.3.tgz#2bbc542f0fda9861a755d3947fefd8b3f513855f"
-  dependencies:
-    ajv "^4.7.0"
-    ajv-keywords "^1.0.0"
-    chalk "^1.1.1"
-    lodash "^4.0.0"
-    slice-ansi "0.0.4"
-    string-width "^2.0.0"
-
-text-table@~0.2.0:
-  version "0.2.0"
-  resolved "https://registry.yarnpkg.com/text-table/-/text-table-0.2.0.tgz#7f5ee823ae805207c00af2df4a84ec3fcfa570b4"
-
-through@^2.3.6:
-  version "2.3.8"
-  resolved "https://registry.yarnpkg.com/through/-/through-2.3.8.tgz#0dd4c9ffaabc357960b1b724115d7e0e86a2e1f5"
-
-to-fast-properties@^1.0.1:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/to-fast-properties/-/to-fast-properties-1.0.2.tgz#f3f5c0c3ba7299a7ef99427e44633257ade43320"
-
-tryit@^1.0.1:
-  version "1.0.3"
-  resolved "https://registry.yarnpkg.com/tryit/-/tryit-1.0.3.tgz#393be730a9446fd1ead6da59a014308f36c289cb"
-
-type-check@~0.3.2:
-  version "0.3.2"
-  resolved "https://registry.yarnpkg.com/type-check/-/type-check-0.3.2.tgz#5884cab512cf1d355e3fb784f30804b2b520db72"
-  dependencies:
-    prelude-ls "~1.1.2"
-
-typedarray@~0.0.5:
-  version "0.0.6"
-  resolved "https://registry.yarnpkg.com/typedarray/-/typedarray-0.0.6.tgz#867ac74e3864187b1d3d47d996a78ec5c8830777"
-
-user-home@^2.0.0:
-  version "2.0.0"
-  resolved "https://registry.yarnpkg.com/user-home/-/user-home-2.0.0.tgz#9c70bfd8169bc1dcbf48604e0f04b8b49cde9e9f"
-  dependencies:
-    os-homedir "^1.0.0"
-
-util-deprecate@~1.0.1:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/util-deprecate/-/util-deprecate-1.0.2.tgz#450d4dc9fa70de732762fbd2d4a28981419a0ccf"
-
-wordwrap@~1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/wordwrap/-/wordwrap-1.0.0.tgz#27584810891456a4171c8d0226441ade90cbcaeb"
-
-wrappy@1:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/wrappy/-/wrappy-1.0.2.tgz#b5243d8f3ec1aa35f1364605bc0d1036e30ab69f"
-
-write@^0.2.1:
-  version "0.2.1"
-  resolved "https://registry.yarnpkg.com/write/-/write-0.2.1.tgz#5fc03828e264cea3fe91455476f7a3c566cb0757"
-  dependencies:
-    mkdirp "^0.5.1"
-
-xtend@^4.0.0:
-  version "4.0.1"
-  resolved "https://registry.yarnpkg.com/xtend/-/xtend-4.0.1.tgz#a5c6d532be656e23db820efb943a1f04998d63af"
